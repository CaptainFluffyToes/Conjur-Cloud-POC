{
	"info": {
		"_postman_id": "ef08253d-3739-4e03-b368-61e651b44110",
		"name": "CyberArk Secrets Management POC",
		"description": "This collection creates the testing items for a Conjur Cloud POC.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17431960"
	},
	"item": [
		{
			"name": "1. SaaS",
			"item": [
				{
					"name": "1. Retrieve Tenant Information",
					"item": [
						{
							"name": "Get Tenant Information",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Conjur Cloud Exists\", function() {",
											"    if (jsonData.secrets_manager) {",
											"        pm.environment.set(\"conjurCloudAPIURL\", jsonData.secrets_manager.api);",
											"    }",
											"    else{",
											"        throw new Error(\"Conjur Cloud Not configured\")",
											"    }",
											"});",
											"",
											"pm.test(\"Secrets Hub  Exists\", function() {",
											"    if (jsonData.secrets_hub) {",
											"        pm.environment.set(\"SecretsHubAPIURL\", jsonData.secrets_hub.api);",
											"    }",
											"    else{",
											"        throw new Error(\"Secrets Hub Not configured\")",
											"    }",
											"});",
											"",
											"postman.setEnvironmentVariable(\"identityTenantURL\", jsonData['identity_administration']['api']);",
											"postman.setEnvironmentVariable(\"pasBaseURL\", jsonData['pcloud']['api']);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://platform-discovery.cyberark.cloud/api/v2/services/subdomain/{{tenantSubDomain}}",
									"protocol": "https",
									"host": [
										"platform-discovery",
										"cyberark",
										"cloud"
									],
									"path": [
										"api",
										"v2",
										"services",
										"subdomain",
										"{{tenantSubDomain}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2. Privilege Cloud",
					"item": [
						{
							"name": "1. Conjur Cloud",
							"item": [
								{
									"name": "1. Users",
									"item": [
										{
											"name": "1. Get Conjur Sync User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json()",
															"",
															"pm.environment.set(\"conjurCloudSyncUserID\", jsonData.Users[0].id);",
															"pm.environment.set(\"conjurCloudSyncUserName\", jsonData.Users[0].username);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer  {{identityToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{pasBaseURL}}/PasswordVault/API/users?search=conjur",
													"host": [
														"{{pasBaseURL}}"
													],
													"path": [
														"PasswordVault",
														"API",
														"users"
													],
													"query": [
														{
															"key": "search",
															"value": "conjur"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "2. Safe",
									"item": [
										{
											"name": "Optional",
											"item": [
												{
													"name": "Delete Test Safe",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer  {{identityToken}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "v"
														},
														"url": {
															"raw": "{{pasBaseURL}}/PasswordVault/API/Safes/{{conjurCloudTestSafeName}}",
															"host": [
																"{{pasBaseURL}}"
															],
															"path": [
																"PasswordVault",
																"API",
																"Safes",
																"{{conjurCloudTestSafeName}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "1. Create Test Safe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json()",
															"",
															"pm.environment.set(\"conjurCloudTestSafeID\", jsonData.safeNumber);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer  {{identityToken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"numberOfVersionsRetention\": 7,\n    \"autoPurgeEnabled\": true,\n    \"safeName\": \"{{conjurCloudTestSafeName}}\",\n    \"description\": \"This safe's contents will get replicated over to Conjur Cloud.\"\n}"
												},
												"url": {
													"raw": "{{pasBaseURL}}/PasswordVault/API/Safes/",
													"host": [
														"{{pasBaseURL}}"
													],
													"path": [
														"PasswordVault",
														"API",
														"Safes",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Add Conjur Sync User Safe Membership",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json()",
															"",
															"pm.environment.set(\"conjurCloudTestSafeID\", jsonData.safeNumber);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer  {{identityToken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"memberName\": \"{{conjurCloudSyncUserName}}\",\n    \"searchIn\": \"Vault\",\n    \"permissions\": {\n        \"useAccounts\": true,\n        \"retrieveAccounts\": true,\n        \"listAccounts\": true,\n        \"addAccounts\": false,\n        \"updateAccountContent\": false,\n        \"updateAccountProperties\": false,\n        \"initiateCPMAccountManagementOperations\": false,\n        \"specifyNextAccountContent\": false,\n        \"renameAccounts\": false,\n        \"deleteAccounts\": false,\n        \"unlockAccounts\": false,\n        \"manageSafe\": false,\n        \"manageSafeMembers\": false,\n        \"backupSafe\": false,\n        \"viewAuditLog\": false,\n        \"viewSafeMembers\": true,\n        \"accessWithoutConfirmation\": true,\n        \"createFolders\": false,\n        \"deleteFolders\": false,\n        \"moveAccountsAndFolders\": false,\n        \"requestsAuthorizationLevel1\": false,\n        \"requestsAuthorizationLevel2\": false\n    },\n    \"MemberType\": \"Group\"\n}"
												},
												"url": {
													"raw": "{{pasBaseURL}}/PasswordVault/API/Safes/{{conjurCloudTestSafeName}}/Members/",
													"host": [
														"{{pasBaseURL}}"
													],
													"path": [
														"PasswordVault",
														"API",
														"Safes",
														"{{conjurCloudTestSafeName}}",
														"Members",
														""
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "3. Accounts",
									"item": [
										{
											"name": "Optional",
											"item": [
												{
													"name": "Delete Test Account",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer  {{identityToken}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{pasBaseURL}}/PasswordVault/API/Accounts/{{conjurCloudTestAccountID}}",
															"host": [
																"{{pasBaseURL}}"
															],
															"path": [
																"PasswordVault",
																"API",
																"Accounts",
																"{{conjurCloudTestAccountID}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "1. Create Test Account",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json()",
															"",
															"pm.environment.set(\"conjurCloudTestAccountID\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer  {{identityToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{conjurCloudTestAccountName}}\",\n    \"address\": \"{{conjurCloudTestAccountAddress}}\",\n    \"userName\": \"{{conjurCloudTestAccountUserName}}\",\n    \"platformId\": \"{{conjurCloudTestAccountPlatformID}}\",\n    \"safeName\": \"{{conjurCloudTestSafeName}}\",\n    \"secretType\": \"password\",\n    \"secret\": \"{{conjurCloudTestAccountPassword}}\",\n    \"platformAccountProperties\": {},\n    \"secretManagement\": {\n        \"automaticManagementEnabled\": false,\n        \"manualManagementReason\": \"Account for Testing\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{pasBaseURL}}/PasswordVault/API/Accounts/",
													"host": [
														"{{pasBaseURL}}"
													],
													"path": [
														"PasswordVault",
														"API",
														"Accounts",
														""
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "2. Secrets Hub",
							"item": [
								{
									"name": "1. Users",
									"item": [
										{
											"name": "Optional",
											"item": [
												{
													"name": "Delete Secrets Hub User",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer  {{identityToken}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{pasBaseURL}}/PasswordVault/API/Users/{{secretsHubUserID}}/",
															"host": [
																"{{pasBaseURL}}"
															],
															"path": [
																"PasswordVault",
																"API",
																"Users",
																"{{secretsHubUserID}}",
																""
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "1. Add Secrets Hub User",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json()",
															"",
															"pm.environment.set(\"secretsHubUserID\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer  {{identityToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": {{secretsHubUser}},\n    \"userType\": \"DAPService\",\n    \"initialPassword\": {{secretsHubUserPassword}},\n    \"authenticationMethod\": [\n        \"AuthTypePass\"\n    ],\n    \"location\": \"\\\\\",\n    \"enableUser\": true,\n    \"changePassOnNextLogon\": false,\n    \"passwordNeverExpires\": true,\n    \"distinguishedName\": \"\",\n    \"description\": \"\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{pasBaseURL}}/PasswordVault/API/users",
													"host": [
														"{{pasBaseURL}}"
													],
													"path": [
														"PasswordVault",
														"API",
														"users"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "2. Safe",
									"item": [
										{
											"name": "Optional",
											"item": [
												{
													"name": "Delete Test Safe",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer  {{identityToken}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{pasBaseURL}}/PasswordVault/API/Safes/{{secretsHubTestSafeName}}/",
															"host": [
																"{{pasBaseURL}}"
															],
															"path": [
																"PasswordVault",
																"API",
																"Safes",
																"{{secretsHubTestSafeName}}",
																""
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "1. Create Test Safe",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json()",
															"",
															"pm.environment.set(\"secretsHubTestSafeNameID\", jsonData.safeNumber);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer  {{identityToken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"numberOfVersionsRetention\": 7,\n    \"autoPurgeEnabled\": true,\n    \"safeName\": \"{{secretsHubTestSafeName}}\",\n    \"description\": \"This safe's contents will get replicated over to Secrets Hub.\"\n}"
												},
												"url": {
													"raw": "{{pasBaseURL}}/PasswordVault/API/Safes/",
													"host": [
														"{{pasBaseURL}}"
													],
													"path": [
														"PasswordVault",
														"API",
														"Safes",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Add Secrets Hub Sync User Safe Membership",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json()",
															"",
															"pm.environment.set(\"secretsHubTestSafeNameID\", jsonData.safeNumber);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer  {{identityToken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"memberName\": \"{{secretsHubUser}}\",\n    \"searchIn\": \"Vault\",\n    \"permissions\": {\n        \"useAccounts\": true,\n        \"retrieveAccounts\": true,\n        \"listAccounts\": true,\n        \"addAccounts\": false,\n        \"updateAccountContent\": false,\n        \"updateAccountProperties\": false,\n        \"initiateCPMAccountManagementOperations\": false,\n        \"specifyNextAccountContent\": false,\n        \"renameAccounts\": false,\n        \"deleteAccounts\": false,\n        \"unlockAccounts\": false,\n        \"manageSafe\": false,\n        \"manageSafeMembers\": false,\n        \"backupSafe\": false,\n        \"viewAuditLog\": false,\n        \"viewSafeMembers\": true,\n        \"accessWithoutConfirmation\": true,\n        \"createFolders\": false,\n        \"deleteFolders\": false,\n        \"moveAccountsAndFolders\": false,\n        \"requestsAuthorizationLevel1\": false,\n        \"requestsAuthorizationLevel2\": false\n    },\n    \"MemberType\": \"Group\"\n}"
												},
												"url": {
													"raw": "{{pasBaseURL}}/PasswordVault/API/Safes/{{secretsHubTestSafeName}}/Members/",
													"host": [
														"{{pasBaseURL}}"
													],
													"path": [
														"PasswordVault",
														"API",
														"Safes",
														"{{secretsHubTestSafeName}}",
														"Members",
														""
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "3. Accounts",
									"item": [
										{
											"name": "Optional",
											"item": [
												{
													"name": "Delete Test Account",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer  {{identityToken}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{pasBaseURL}}/PasswordVault/API/Accounts/{{secretsHubTestAccountID}}",
															"host": [
																"{{pasBaseURL}}"
															],
															"path": [
																"PasswordVault",
																"API",
																"Accounts",
																"{{secretsHubTestAccountID}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "1. Create Test Account",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json()",
															"",
															"pm.environment.set(\"secretsHubTestAccountID\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer  {{identityToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{secretsHubTestAccountName}}\",\n    \"address\": \"{{secretsHubTestAccountAddress}}\",\n    \"userName\": \"{{secretsHubTestAccountUserName}}\",\n    \"platformId\": \"{{secretsHubTestAccountPlatformID}}\",\n    \"safeName\": \"{{secretsHubTestSafeName}}\",\n    \"secretType\": \"password\",\n    \"secret\": \"{{secretsHubestAccountPassword}}\",\n    \"platformAccountProperties\": {},\n    \"secretManagement\": {\n        \"automaticManagementEnabled\": false,\n        \"manualManagementReason\": \"Account for Testing\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{pasBaseURL}}/PasswordVault/API/Accounts/",
													"host": [
														"{{pasBaseURL}}"
													],
													"path": [
														"PasswordVault",
														"API",
														"Accounts",
														""
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let url = pm.environment.get(\"identityTenantURL\");",
									"let account = pm.environment.get(\"conjurCloudAccount\");",
									"let userName = pm.environment.get(\"identityUsername\")",
									"let password = pm.environment.get(\"identityPassword\")",
									"",
									"let login = {",
									"  url: url + \"/Security/StartAuthentication\",",
									"  method: 'POST',",
									"  header: { 'content-type': 'application/json' },",
									"  body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify({\"Version\": \"1.0\",\"User\": userName})",
									"  }",
									"}",
									"",
									"pm.sendRequest(login, function (err, res) {",
									"    var jsonData = res.json();",
									"    if (jsonData.Result.Token) {",
									"        pm.test(\"Identity Token Exists\", function() {",
									"            if (jsonData.Result.Token) {",
									"                pm.environment.set(\"identityToken\", jsonData.Result.Token);",
									"            }",
									"        });",
									"    }",
									"    else{",
									"        pm.test(\"Identity Session ID Exists\", function() {",
									"            if (jsonData.Result.SessionId) {",
									"                pm.environment.set(\"identitySessionID\", jsonData.Result.SessionId);",
									"            }",
									"        });",
									"",
									"        pm.test(\"Identity Mechanism ID Exists\", function() {",
									"            if (jsonData.Result.Challenges[0].Mechanisms[0].MechanismId) {",
									"                pm.environment.set(\"identityMechanismID\", jsonData.Result.Challenges[0].Mechanisms[0].MechanismId);",
									"            }",
									"        });",
									"    }",
									"    }",
									")",
									"",
									"let identityMechanismID = pm.environment.get(\"identityMechanismID\");",
									"let identitySessionID = pm.environment.get(\"identitySessionID\");",
									"",
									"let auth = {",
									"  url: url + \"/Security/AdvanceAuthentication\",",
									"  method: 'POST',",
									"  header: { 'content-type': 'application/json' },",
									"  body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify(     {",
									"      \"Action\": \"Answer\",",
									"      \"SessionId\": identitySessionID,",
									"      \"MechanismId\": identityMechanismID,\"Answer\": password})",
									"  }",
									"}",
									"pm.sendRequest(auth, function (err, res) {",
									"    var jsonData = res.json().Result;",
									"    pm.test(\"Identity Token Exists\", function() {",
									"    if (jsonData.Token) {",
									"        pm.environment.set(\"identityToken\", jsonData.Token);",
									"    }",
									"    else{",
									"        throw new Error(\"You already have a token. Next step: Authenticate user\")",
									"    }",
									"});",
									"    }",
									")"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "3. Conjur Cloud",
					"item": [
						{
							"name": "1. Conjur Policy",
							"item": [
								{
									"name": "1. conjur",
									"item": [
										{
											"name": "1. aws",
											"item": [
												{
													"name": "1. authn-aws",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "#Load policy into conjur/authn-iam\n---\n- !policy\n  id: region1\n  body:\n  - !webservice\n\n  - !group consumers\n\n  - !permit\n    role: !group consumers\n    privilege: [ read, authenticate ]\n    resource: !webservice\n\n  - !webservice\n    id: status\n    annotations:\n      description: Status service to check that the authenticator is configured correctly\n\n  - !group\n    id: operators\n    annotations:\n      description: Group of users who can check the status of the authenticator\n\n  - !permit\n     role: !group operators\n     privilege: [ read ]\n     resource: !webservice status"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/conjur/authn-iam",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"policies",
																"{{conjurCloudAccount}}",
																"policy",
																"conjur",
																"authn-iam"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "2. Enable Authenticator",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "enabled",
																	"value": "true",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/authn-iam/region1/conjur",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"authn-iam",
																"region1",
																"conjur"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												}
											]
										},
										{
											"name": "2. azure",
											"item": [
												{
													"name": "1. authn-azure",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "#Load policy into conjur/authn-azure\n---\n- !policy\n  id: region1\n  body:\n  - !webservice\n\n  - !variable\n    id: provider-uri\n\n  - !group\n    id: consumers\n    annotations:\n      description: Group of hosts that can authenticate using the authn-azure/<service-id> authenticator\n\n  - !permit\n    role: !group consumers\n    privilege: [ read, authenticate ]\n    resource: !webservice\n\n  - !webservice\n    id: status\n    annotations:\n      description: Status service to check that the authenticator is configured correctly\n\n  - !group\n    id: operators\n    annotations:\n      description: Group of users who can check the status of the authenticator\n\n  - !permit\n     role: !group operators\n     privilege: [ read ]\n     resource: !webservice status"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/conjur/authn-azure",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"policies",
																"{{conjurCloudAccount}}",
																"policy",
																"conjur",
																"authn-azure"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "2. Enable Authenticator",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "enabled",
																	"value": "true",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/authn-azure/region1/conjur",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"authn-azure",
																"region1",
																"conjur"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												}
											]
										},
										{
											"name": "3. gcp",
											"item": [
												{
													"name": "1. authn-gcp",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "#Load policy into conjur/authn-gcp\n---\n- !policy\n  id: region1\n  body:\n  - !webservice\n\n  - !group \n    id: consumers\n    annotations:\n      description: Group of hosts that can authenticate using the authn-gcp authenticator\n\n  - !permit\n    role: !group consumers\n    privilege: [ read, authenticate ]\n    resource: !webservice\n\n  - !webservice\n    id: status\n    annotations:\n      description: Status service to check that the authenticator is configured correctly\n\n  - !group\n    id: operators\n    annotations:\n      description: Group of users who can check the status of the authenticator\n\n  - !permit\n     role: !group operators\n     privilege: [ read ]\n     resource: !webservice status"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/conjur/authn-gcp",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"policies",
																"{{conjurCloudAccount}}",
																"policy",
																"conjur",
																"authn-gcp"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "2 Enable Authenticator",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "enabled",
																	"value": "true",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/authn-gcp/region1/conjur",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"authn-gcp",
																"region1",
																"conjur"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												}
											]
										},
										{
											"name": "4. authn-jwt",
											"item": [
												{
													"name": "1. gitlab",
													"item": [
														{
															"name": "1. authn-jwt-gitlab",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "#Load policy into conjur/authn-jwt\n# This policy defines a JWT authenticator to be used with an instance of Gitlab\n---\n- !policy\n  id: gitlab1\n  body:\n  - !webservice\n\n  # If the JWKS service is publicly available, uncomment 'jwks-uri'.\n  # If the JWKS service is not available, uncomment 'public-keys'\n\n  - !variable\n    id: jwks-uri\n\n  # - !variable\n  #   id: public-keys\n\n  # This variable tells Conjur which claim in the JWT to use to determine the conjur host identity.\n  - !variable\n    id: token-app-property\n\n  # This variable is used with token-app-property. This variable will hold the conjur policy path that contains the conjur host identity found by looking at the claim entered in token-app-property.\n  - !variable\n    id: identity-path\n\n  # Uncomment ca-cert if the JWKS website cert isn't trusted by conjur\n\n  # - !variable\n  #   id: ca-cert\n\n  # This variable contains what \"iss\" in the JWT.\n  - !variable\n    id: issuer\n  \n  # This variable contains what \"aud\" is the JWT.\n  - !variable\n    id: audience\n\n  # - !variable\n  #   id: enforced-claims\n\n  # - !variable\n  #   id: claim-aliases\n\n  - !group\n    id: consumers\n\n  - !permit\n    role: !group consumers\n    privilege: [ read, authenticate ]\n    resource: !webservice\n\n  - !webservice\n    id: status\n    annotations:\n      description: Status service to check that the authenticator is configured correctly\n\n  - !group\n    id: operators\n    annotations:\n      description: Group of users who can check the status of the authenticator\n\n  - !permit\n     role: !group operators\n     privilege: [ read ]\n     resource: !webservice status"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/conjur/authn-jwt",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"conjur",
																		"authn-jwt"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "1. Enable Authenticator",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "PATCH",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "urlencoded",
																	"urlencoded": [
																		{
																			"key": "enabled",
																			"value": "true",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/authn-jwt/gitlab1/conjur",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"authn-jwt",
																		"gitlab1",
																		"conjur"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														}
													]
												},
												{
													"name": "2. jenkins",
													"item": [
														{
															"name": "1. authn-jwt-jenkins",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "#Load policy into conjur/authn-jwt\n# This policy defines a JWT authenticator to be used with an instance of Jenkins\n---\n- !policy\n  id: jenkins1\n  body:\n  - !webservice\n\n  # If the JWKS service is publicly available, uncomment 'jwks-uri'.\n  # If the JWKS service is not available, uncomment 'public-keys'\n\n  - !variable\n    id: jwks-uri\n\n  # - !variable\n  #   id: public-keys\n\n  # This variable tells Conjur which claim in the JWT to use to determine the conjur host identity.\n  - !variable\n    id: token-app-property\n\n  # This variable is used with token-app-property. This variable will hold the conjur policy path that contains the conjur host identity found by looking at the claim entered in token-app-property.\n  - !variable\n    id: identity-path\n\n  # Uncomment ca-cert if the JWKS website cert isn't trusted by conjur\n\n  # - !variable\n  #   id: ca-cert\n\n  # This variable contains what \"iss\" in the JWT.\n  - !variable\n    id: issuer\n  \n  # This variable contains what \"aud\" is the JWT.\n  - !variable\n    id: audience\n\n  # - !variable\n  #   id: enforced-claims\n\n  # - !variable\n  #   id: claim-aliases\n\n  - !group\n    id: consumers\n\n  - !permit\n    role: !group consumers\n    privilege: [ read, authenticate ]\n    resource: !webservice\n\n  - !webservice\n    id: status\n    annotations:\n      description: Status service to check that the authenticator is configured correctly\n\n  - !group\n    id: operators\n    annotations:\n      description: Group of users who can check the status of the authenticator\n\n  - !permit\n     role: !group operators\n     privilege: [ read ]\n     resource: !webservice status"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/conjur/authn-jwt",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"conjur",
																		"authn-jwt"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "2. Enable Authenticator",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "PATCH",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "urlencoded",
																	"urlencoded": [
																		{
																			"key": "enabled",
																			"value": "true",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/authn-jwt/jenkins1/conjur",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"authn-jwt",
																		"jenkins1",
																		"conjur"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														}
													]
												},
												{
													"name": "3. kubernetes",
													"item": [
														{
															"name": "1. authn-jwt-kubernetes",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "#Load policy into conjur/authn-jwt\n# This policy defines a JWT authenticator to be used with an instance of Jenkins\n- !policy\n  id: k8s-cluster1\n  body:\n  - !webservice\n\n  # Uncomment one of following variables depending on the public availability\n  # of the Service Account Issuer Discovery service in Kubernetes \n  # If the service is publicly available, uncomment 'jwks-uri'.\n  # If the service is not available, uncomment 'public-keys'\n\n  # - !variable\n  #   id: jwks-uri\n\n  - !variable\n    id: public-keys\n\n  # This variable tells Conjur which claim in the JWT to use to determine the conjur host identity.\n  - !variable\n    id: token-app-property\n\n  # This variable is used with token-app-property. This variable will hold the conjur policy path that contains the conjur host identity found by looking at the claim entered in token-app-property.\n  - !variable\n    id: identity-path\n\n  # Uncomment ca-cert if the JWKS website cert isn't trusted by conjur\n\n  # - !variable\n  #   id: ca-cert\n\n  # This variable contains what \"iss\" in the JWT.\n  - !variable\n    id: issuer\n  \n  # This variable contains what \"aud\" is the JWT.\n  # - !variable\n  #   id: audience\n\n  # - !variable\n  #   id: enforced-claims\n\n  # - !variable\n  #   id: claim-aliases\n\n  - !group\n    id: consumers\n\n  - !permit\n    role: !group consumers\n    privilege: [ read, authenticate ]\n    resource: !webservice\n\n  - !webservice\n    id: status\n    annotations:\n      description: Status service to check that the authenticator is configured correctly\n\n  - !group\n    id: operators\n    annotations:\n      description: Group of users who can check the status of the authenticator\n\n  - !permit\n     role: !group operators\n     privilege: [ read ]\n     resource: !webservice status"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/conjur/authn-jwt",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"conjur",
																		"authn-jwt"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "2. Enable Authenticator",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "PATCH",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "urlencoded",
																	"urlencoded": [
																		{
																			"key": "enabled",
																			"value": "true",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/authn-jwt/k8s-cluster1/conjur",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"authn-jwt",
																		"k8s-cluster1",
																		"conjur"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														}
													]
												}
											]
										}
									]
								},
								{
									"name": "2. data",
									"item": [
										{
											"name": "1. secrets",
											"item": [
												{
													"name": "1-secrets",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "#Load policy into data branch\n- !group\n  id: example-vault1-admins\n\n- !policy\n  id: example-vault1\n  owner: !group example-vault1-admins\n  body:\n  - !group \n    id: example-safe1-admins\n  \n  - !policy\n    id: example-safe1\n    owner: !group example-safe1-admins\n    body:\n    - &safe1-secrets\n      - !variable\n        id: secret1/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe1/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret1/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe1/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret2/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe1/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret2/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe1/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret3/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe1/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret3/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe1/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret4/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe1/secret4\n          mime_type: application/json\n\n      - !variable\n        id: secret4/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe1/secret4\n          mime_type: application/json\n\n    - !policy\n      id: delegation\n      body:\n      - !group\n        id: consumers\n      \n    - !permit\n      role: !group delegation/consumers\n      privilege: [ read, execute ]\n      resource: *safe1-secrets\n\n  - !group \n    id: example-safe2-admins\n  \n  - !policy\n    id: example-safe2\n    owner: !group example-safe2-admins\n    body:\n    - &safe2-secrets\n      - !variable\n        id: secret1/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe2/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret1/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe2/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret2/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe2/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret2/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe2/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret3/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe2/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret3/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe2/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret4/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe2/secret4\n          mime_type: application/json\n\n      - !variable\n        id: secret4/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe2/secret4\n          mime_type: application/json\n\n    - !policy\n      id: delegation\n      body:\n      - !group\n        id: consumers\n      \n    - !permit\n      role: !group delegation/consumers\n      privilege: [ read, execute ]\n      resource: *safe2-secrets\n\n  - !group \n    id: example-safe3-admins\n  \n  - !policy\n    id: example-safe3\n    owner: !group example-safe3-admins\n    body:\n    - &safe3-secrets\n      - !variable\n        id: secret1/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe3/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret1/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe3/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret2/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe3/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret2/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe3/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret3/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe3/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret3/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe3/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret4/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe3/secret4\n          mime_type: application/json\n\n      - !variable\n        id: secret4/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe3/secret4\n          mime_type: application/json\n\n    - !policy\n      id: delegation\n      body:\n      - !group\n        id: consumers\n      \n    - !permit\n      role: !group delegation/consumers\n      privilege: [ read, execute ]\n      resource: *safe3-secrets\n\n  - !group \n    id: example-safe4-admins\n  \n  - !policy\n    id: example-safe4\n    owner: !group example-safe4-admins\n    body:\n    - &safe4-secrets\n      - !variable\n        id: secret1/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe4/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret1/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe4/secret1\n          mime_type: application/json\n          \n      - !variable\n        id: secret2/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe4/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret2/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe4/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret3/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe4/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret3/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe4/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret4/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe4/secret4\n          mime_type: application/json\n\n      - !variable\n        id: secret4/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe4/secret4\n          mime_type: application/json\n\n    - !policy\n      id: delegation\n      body:\n      - !group\n        id: consumers\n      \n    - !permit\n      role: !group delegation/consumers\n      privilege: [ read, execute ]\n      resource: *safe4-secrets\n\n  - !group \n    id: example-safe5-admins\n  \n  - !policy\n    id: example-safe5\n    owner: !group example-safe5-admins\n    body:\n    - &safe5-secrets\n      - !variable\n        id: secret1/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe5/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret1/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe5/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret2/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe5/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret2/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe5/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret3/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe5/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret3/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe5/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret4/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe5/secret4\n          mime_type: application/json\n\n      - !variable\n        id: secret4/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe5/secret4\n          mime_type: application/json\n\n    - !policy\n      id: delegation\n      body:\n      - !group\n        id: consumers\n    \n    - !permit\n      role: !group delegation/consumers\n      privilege: [ read, execute ]\n      resource: *safe5-secrets\n\n  - !group \n    id: example-safe6-admins\n  \n  - !policy\n    id: example-safe6\n    owner: !group example-safe6-admins\n    body:\n    - &safe6-secrets\n      - !variable\n        id: secret1/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe6/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret1/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe6/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret2/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe6/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret2/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe6/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret3/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe6/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret3/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe6/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret4/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe6/secret4\n          mime_type: application/json\n\n      - !variable\n        id: secret4/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe6/secret4\n          mime_type: application/json\n\n    - !policy\n      id: delegation\n      body:\n      - !group\n        id: consumers\n      \n    - !permit\n      role: !group delegation/consumers\n      privilege: [ read, execute ]\n      resource: *safe6-secrets\n\n  - !group \n    id: example-safe7-admins\n  \n  - !policy\n    id: example-safe7\n    owner: !group example-safe7-admins\n    body:\n    - &safe7-secrets\n      - !variable\n        id: secret1/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe7/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret1/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe7/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret2/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe7/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret2/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe7/secret2\n          mime_type: application/json\n          \n      - !variable\n        id: secret3/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe7/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret3/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe7/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret4/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe7/secret4\n          mime_type: application/json\n\n      - !variable\n        id: secret4/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe7/secret4\n          mime_type: application/json\n          \n    - !policy\n      id: delegation\n      body:\n      - !group\n        id: consumers\n      \n    - !permit\n      role: !group delegation/consumers\n      privilege: [ read, execute ]\n      resource: *safe7-secrets\n\n  - !group \n    id: example-safe8-admins\n  \n  - !policy\n    id: example-safe8\n    owner: !group example-safe8-admins\n    body:\n    - &safe8-secrets\n      - !variable\n        id: secret1/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe8/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret1/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe8/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret2/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe8/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret2/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe8/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret3/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe8/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret3/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe8/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret4/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe8/secret4\n          mime_type: application/json\n\n      - !variable\n        id: secret4/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe8/secret4\n          mime_type: application/json\n\n    - !policy\n      id: delegation\n      body:\n      - !group\n        id: consumers\n      \n    - !permit\n      role: !group delegation/consumers\n      privilege: [ read, execute ]\n      resource: *safe8-secrets"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"policies",
																"{{conjurCloudAccount}}",
																"policy",
																"{{conjurCloudPolicyToExtend}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												}
											]
										},
										{
											"name": "2. cd",
											"item": [
												{
													"name": "1. kubernetes",
													"item": [
														{
															"name": "Optional",
															"item": [
																{
																	"name": "k8s-delete-public-keys",
																	"request": {
																		"auth": {
																			"type": "noauth"
																		},
																		"method": "PATCH",
																		"header": [
																			{
																				"key": "Authorization",
																				"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "- !delete\n  record: !variable authn-jwt/k8s-cluster1/public-keys"
																		},
																		"url": {
																			"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/conjur",
																			"host": [
																				"{{conjurCloudAPIURL}}"
																			],
																			"path": [
																				"policies",
																				"{{conjurCloudAccount}}",
																				"policy",
																				"conjur"
																			]
																		},
																		"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
																	},
																	"response": []
																},
																{
																	"name": "k8s-delete-jwks-uri",
																	"request": {
																		"auth": {
																			"type": "noauth"
																		},
																		"method": "PATCH",
																		"header": [
																			{
																				"key": "Authorization",
																				"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "- !delete\n  record: !variable authn-jwt/k8s-cluster1/jwks-uri\n\n- !delete\n  record: !variable authn-jwt/k8s-cluster1/ca-certs"
																		},
																		"url": {
																			"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/conjur",
																			"host": [
																				"{{conjurCloudAPIURL}}"
																			],
																			"path": [
																				"policies",
																				"{{conjurCloudAccount}}",
																				"policy",
																				"conjur"
																			]
																		},
																		"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
																	},
																	"response": []
																}
															]
														},
														{
															"name": "1-k8s-follower-auto-configuration",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load policy into data branch\n#\n# Example Payload of JWT for a mounted service account token\n# {\n#   \"aud\": [\n#     \"https://kubernetes.default.svc.cluster.local\"\n#   ],\n#   \"exp\": 1680268878,\n#   \"iat\": 1648732878,\n#   \"iss\": \"https://kubernetes.default.svc.cluster.local\",\n#   \"kubernetes.io\": {\n#     \"namespace\": \"conjur\",\n#     \"pod\": {\n#       \"name\": \"k8s-jwt-app1-6679d7b48-sk8br\",\n#       \"uid\": \"77495a36-9fa7-422a-8422-f2ed73916c8b\"\n#     },\n#     \"serviceaccount\": {\n#       \"name\": \"jwt-app-account\",\n#       \"uid\": \"f5dcf3f4-e8b5-4d83-a631-499d1f97324b\"\n#     },\n#     \"warnafter\": 1648736485\n#   },\n#   \"nbf\": 1648732878,\n#   \"sub\": \"system:serviceaccount:conjur:jwt-app-account\"\n# }\n\n- !policy\n  id: cd/kubernetes/k8s-follower-auto-configuration/jwt-authn-k8s-cluster1\n  body:\n  - !group\n\n  - &follower-service-accounts-jwt\n    - !host\n      id: system:serviceaccount:conjur:conjur-cluster\n      annotations:\n        authn-jwt/k8s-cluster1/kubernetes.io/namespace: conjur\n        authn-jwt/k8s-cluster1/kubernetes.io/service-account: conjur-cluster\n        authn/api-key: true\n  \n  - !grant \n    role: !group\n    members: *follower-service-accounts-jwt\n\n"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "2-k8s-dev-team-3-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "---\n- !policy\n  id: cd/kubernetes/dev-team-3/applications\n  body:\n  - &dev_team_3_jwt_apps\n    - !host\n      id: system:serviceaccount:conjur:jwt-app-account\n      annotations:\n        authn-jwt/k8s-cluster1/kubernetes.io/namespace: conjur\n        authn-jwt/k8s-cluster1/kubernetes.io/serviceaccount/name: jwt-app-account\n        authn/api-key: true\n  \n  - !group\n    id: jwt-apps\n\n  - !grant\n    roles:\n      - !group jwt-apps\n    members: *dev_team_3_jwt_apps\n\n# Example Payload of JWT for a mounted service account token\n# {\n#   \"aud\": [\n#     \"https://kubernetes.default.svc.cluster.local\"\n#   ],\n#   \"exp\": 1680268878,\n#   \"iat\": 1648732878,\n#   \"iss\": \"https://kubernetes.default.svc.cluster.local\",\n#   \"kubernetes.io\": {\n#     \"namespace\": \"conjur\",\n#     \"pod\": {\n#       \"name\": \"k8s-jwt-app1-6679d7b48-sk8br\",\n#       \"uid\": \"77495a36-9fa7-422a-8422-f2ed73916c8b\"\n#     },\n#     \"serviceaccount\": {\n#       \"name\": \"jwt-app-account\",\n#       \"uid\": \"f5dcf3f4-e8b5-4d83-a631-499d1f97324b\"\n#     },\n#     \"warnafter\": 1648736485\n#   },\n#   \"nbf\": 1648732878,\n#   \"sub\": \"system:serviceaccount:conjur:jwt-app-account\"\n# }\n\n# Example Payload of JWT for an unmounted service account token\n# {\n#   \"iss\": \"kubernetes/serviceaccount\",\n#   \"kubernetes.io/serviceaccount/namespace\": \"conjur\",\n#   \"kubernetes.io/serviceaccount/secret.name\": \"conjur-cluster-token-r4qmp\",\n#   \"kubernetes.io/serviceaccount/service-account.name\": \"conjur-cluster\",\n#   \"kubernetes.io/serviceaccount/service-account.uid\": \"cb40fbdc-2b56-4057-8ab7-04c6873c6dc7\",\n#   \"sub\": \"system:serviceaccount:conjur:conjur-cluster\"\n# }"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "3-k8s-grants-jwt-authenticator",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into conjur/authn-jwt/k8s-cluster1 branch\n- !grant\n  roles:\n    - !group consumers\n  members:\n    - !group /data/cd/kubernetes/k8s-follower-auto-configuration/jwt-authn-k8s-cluster1\n    - !group /data/cd/kubernetes/dev-team-3/applications/jwt-apps"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/conjur/authn-jwt/k8s-cluster1",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"conjur",
																		"authn-jwt",
																		"k8s-cluster1"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "4-k8s-grants-jwt-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "- !grant\n  roles:\n    - !group vault/{{conjurCloudTestSafeName}}/delegation/consumers\n  members:\n    - !group cd/kubernetes/dev-team-3/applications/jwt-apps"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														}
													]
												},
												{
													"name": "2. ansible",
													"item": [
														{
															"name": "1-ansible-automation-controller-team-1-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into data branch\n---\n- !policy\n  id: cd/ansible/automation-controller-team-1/controllers\n  body:\n  - &test_environment\n    - !host\n      id: boise-controller\n      annotations:\n        team: automation-controller-team-1\n        ansible: true\n        location: datacenter9\n        environment: test\n        authn/api-key: true\n\n  - !group test-controllers\n\n  - !grant\n    role: !group test-controllers\n    members: *test_environment\n      \n  - &production_environment\n    - !host\n      id: aws-controller\n      annotations:\n        team: automation-controller-team-1\n        ansible: true\n        location: aws\n        environment: prod\n        authn/api-key: true\n\n    - !host\n      id: onprem-controller\n      annotations:\n        team: automation-controller-team-1\n        ansible: true\n        location: datacenter7\n        environment: prod\n        authn/api-key: true\n  \n  - !group prod-controllers\n\n  - !grant\n    role: !group prod-controllers\n    members: *production_environment"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "2-ansible-dev-team-1-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into data branch\n---\n- !policy\n  id: cd/ansible/dev-team-1/applications\n  body:\n  - &test_environment\n    - !host\n      id: app1\n      annotations:\n        team: dev-team-1\n        ansible: true\n        location: datacenter3\n        environment: test\n        authn/api-key: true\n\n  - !group test-apps\n\n  - !grant\n    role: !group test-apps\n    members: *test_environment\n      \n  - &production_environment\n    - !host\n      id: app2\n      annotations:\n        team: dev-team-1\n        ansible: true\n        location: gcp\n        environment: prod\n        authn/api-key: true\n  \n  - !group prod-apps\n\n  - !grant\n    role: !group prod-apps\n    members: *production_environment"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "3-ansible-grants",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into the data branch\n- !grant\n  role: !group vault/{{conjurCloudTestSafeName}}/delegation/consumers\n  members:\n    - !group cd/ansible/dev-team-1/applications/test-apps\n    - !group cd/ansible/dev-team-1/applications/prod-apps\n    - !group cd/ansible/automation-controller-team-1/controllers/test-controllers\n    - !group cd/ansible/automation-controller-team-1/controllers/prod-controllers"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														}
													]
												},
												{
													"name": "3. tanzu",
													"item": [
														{
															"name": "1-tanzu-service-brokers",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "---\n# this policy will be automatically populated by the service-broker once an application is bound\n- &policies\n  - !policy\n    id: cd/tanzu/service-brokers\n\n    - &service_brokers\n      - !host\n        id: conjur-service-broker-foundation1\n        annotations:\n          authn/api-key: true\n          platform: tanzu\n\n  - !group conjur-service-brokers\n\n  - !grant\n    role: !group conjur-service-brokers\n    members: *service_brokers"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "2-tanzu-dev-team-1-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "---\n# this policy will be automatically populated by the service-broker once an application is bound\n- &policies\n  - !policy\n    id: cd/tanzu/foundation1\n\n- !permit\n  role: !group /cd/tanzu/service-brokers/conjur-service-brokers\n  privileges: [ read, update, create ]\n  resources: *policies"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "3-tanzu-grants",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Grants for Tanzu apps can't be created until the service-broker populates the policies. \n\n# - !grant:\n#   role: !group vault/{{conjurCloudTestSafeName}}/delegation/consumers\n#   resources:\n#     - !host cd/tanzu/foundation1/<<org guid>>/<<space guid>>/<<app guid>>"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														}
													]
												},
												{
													"name": "4. terraform",
													"item": [
														{
															"name": "1-terraform-dev-team-1-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into data branch\n---\n- !policy\n  id: cd/terraform/dev-team-1/applications\n  body:\n  - &test_environment\n    - !host\n      id: aws_test1\n      annotations:\n        team: dev-team-1\n        terraform: true\n        location: aws\n        environment: test\n        authn/api-key: true\n\n  - !group test-apps\n\n  - !grant\n    role: !group test-apps\n    members: *test_environment\n      \n  - &production_environment\n    - !host\n      id: aws_prod1\n      annotations:\n        team: dev-team-1\n        ansible: true\n        location: aws\n        environment: prod\n        authn/api-key: true\n  \n  - !group prod-apps\n\n  - !grant\n    role: !group prod-apps\n    members: *production_environment"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "2-terraform-grants-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into the data branch\n- !grant\n  role: !group vault/{{conjurCloudTestSafeName}}/delegation/consumers\n  members:\n    - !group cd/terraform/dev-team-1/applications/test-apps\n    - !group cd/terraform/dev-team-1/applications/prod-apps"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														}
													]
												},
												{
													"name": "5. octopus deploy",
													"item": [
														{
															"name": "1-octopus-deploy-dev-team-1-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into data branch\n---\n- !policy\n  id: cd/octopus-deploy/dev-team-1/applications\n  body:\n  - &production_environment\n    - !host\n      id: app1\n      annotations:\n        team: dev-team-1\n        environment: prod\n        authn/api-key: true\n  \n  - !group prod-apps\n\n  - !grant\n    role: !group prod-apps\n    members: *production_environment"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "2-octopus-deploy-dev-team-1-grants-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into the data branch\n- !grant\n  role: !group vault/{{conjurCloudTestSafeName}}/delegation/consumers\n  members:\n    - !group cd/octopus-deploy/dev-team-1/applications/prod-apps"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "3. ci",
											"item": [
												{
													"name": "1. azure devops",
													"item": [
														{
															"name": "1-azure-devops-dev-team-1-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into data branch\n---\n- !policy\n  id: ci/azure-devops/dev-team-1/applications\n  body:\n  - &production_environment\n    - !host\n      id: app1\n      annotations:\n        team: dev-team-1\n        environment: prod\n        authn/api-key: true\n  \n  - !group prod-apps\n\n  - !grant\n    role: !group prod-apps\n    members: *production_environment"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "2-azure-devops-grants-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into the data branch\n- !grant\n  role: !group vault/{{conjurCloudTestSafeName}}/delegation/consumers\n  members:\n    - !group ci/azure-devops/dev-team-1/applications/prod-apps"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														}
													]
												},
												{
													"name": "2. gitlab",
													"item": [
														{
															"name": "1-gitlab-projects",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into the data branch\n---\n- !policy\n  id: ci/gitlab/projects\n  body:\n  - &dev_team_1_job_hosts\n    - !host\n      id: Dev-Team-1/Job1\n      annotations:\n        authn/api-key: true\n        authn-jwt/gitlab1/namespace_path: Dev-Team-1\n\n  - !group\n    id: dev-team-1-jobs\n\n  - !grant\n    role: !group dev-team-1-jobs\n    members: *dev_team_1_job_hosts\n    \n \n  - &dev_team_2_job_hosts\n    - !host\n      id: Dev-Team-2/Job2\n      annotations:\n        authn/api-key: true\n        authn-jwt/gitlab1/namespace_path: Dev-Team-2\n\n  - !group\n    id: dev-team-2-jobs\n\n  - !grant\n    role: !group dev-team-2-jobs\n    members: *dev_team_2_job_hosts"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "2-gitlab-grants-authenticator",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into conjur/authn-jwt/gitlab1 branch\n- !grant\n  role: !group consumers\n  members: \n    - !group /data/ci/gitlab/projects/dev-team-1-jobs\n    - !group /data/ci/gitlab/projects/dev-team-2-jobs"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/conjur/authn-jwt/gitlab1",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"conjur",
																		"authn-jwt",
																		"gitlab1"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "3-gitlab-grants-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into data branch\n- !grant\n  role: !group vault/{{conjurCloudTestSafeName}}/delegation/consumers\n  members:\n    - !group ci/gitlab/projects/dev-team-1-jobs\n    - !group ci/gitlab/projects/dev-team-2-jobs"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														}
													]
												},
												{
													"name": "3. jenkins",
													"item": [
														{
															"name": "1-jenkins-projects",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into data branch\n---\n- !policy\n  id: ci/jenkins/projects\n  body:\n  - &dev_team_1_job_hosts\n    - !host\n      id: Dev-Team-1/Job1\n      annotations:\n        authn/api-key: true\n        authn-jwt/jenkins1/jenkins_task_noun: Build\n        authn-jwt/jenkins1/jenkins_parent_full_name: Dev-Team-1\n\n    - !host\n      id: Dev-Team-1/Job2\n      annotations:\n        authn/api-key: true\n        authn-jwt/jenkins1/jenkins_task_noun: Build\n        authn-jwt/jenkins1/jenkins_parent_full_name: Dev-Team-1\n\n  - !group\n    id: dev-team-1-jobs\n\n  - !grant\n    role: !group dev-team-1-jobs\n    members: *dev_team_1_job_hosts\n    \n  - &dev_team_1_folder_host\n    - !host\n      id: Dev-Team-1\n      annotations:\n        authn/api-key: true\n        authn-jwt/jenkins1/jenkins_task_noun: Build\n  \n  - !group\n    id: dev-team-1-folder\n\n  - !grant\n    role: !group dev-team-1-folder\n    members: *dev_team_1_folder_host\n\n  - &dev_team_2_job_hosts\n    - !host\n      id: Dev-Team-2/Job2\n      annotations:\n        authn/api-key: true\n        authn-jwt/jenkins1/jenkins_task_noun: Build\n        authn-jwt/jenkins1/jenkins_parent_full_name: Dev-Team-2\n\n  - !group\n    id: dev-team-2-jobs\n\n  - !grant\n    role: !group dev-team-2-jobs\n    members: *dev_team_2_job_hosts\n    \n  - &dev_team_2_folder_host\n    - !host\n      id: Dev-Team-2\n      annotations:\n        authn/api-key: true\n        authn-jwt/jenkins1/jenkins_task_noun: Build\n  \n  - !group\n    id: dev-team-2-folder\n\n  - !grant\n    role: !group dev-team-2-folder\n    members: *dev_team_2_folder_host"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "2-jenkins-grants-authenticator",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into conjur/authn-jwt/jenkins1 branch\n- !grant\n  role: !group consumers\n  members: \n    - !group /data/ci/jenkins/projects/dev-team-1-jobs\n    - !group /data/ci/jenkins/projects/dev-team-1-folder\n    - !group /data/ci/jenkins/projects/dev-team-2-jobs\n    - !group /data/ci/jenkins/projects/dev-team-2-folder"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/conjur/authn-jwt/jenkins1",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"conjur",
																		"authn-jwt",
																		"jenkins1"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "3-jenkins-grants-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into data branch\n- !grant\n  role: !group vault/{{conjurCloudTestSafeName}}/delegation/consumers\n  members:\n    - !group ci/jenkins/projects/dev-team-1-folder\n    - !group ci/jenkins/projects/dev-team-1-jobs\n    - !group ci/jenkins/projects/dev-team-2-jobs"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "4. cloud",
											"item": [
												{
													"name": "1. aws",
													"item": [
														{
															"name": "1-aws-dev-team-1-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load in data branch\n---\n- !policy\n  id: cloud/azure/dev-team-1/applications\n  body:\n  - &dev_team_1_vm_apps\n    - !host\n      id: vm-app1\n      annotations:\n        authn/api-key: true\n        azure: VM\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n\n    \n  - !group\n    id: vm-apps\n\n  - !grant\n    role: !group vm-apps\n    members: *dev_team_1_vm_apps\n\n  - &dev_team_1_app_services_apps\n    - !host\n      id: app-services-app1\n      annotations:\n        authn/api-key: true\n        azure: \"app services\"\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n\n    \n  - !group\n    id: app-services-apps\n\n  - !grant\n    role: !group app-services-apps\n    members: *dev_team_1_app_services_apps\n\n  - &dev_team_1_function_apps\n    - !host\n      id: function-app1\n      annotations:\n        authn/api-key: true\n        azure: function\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n    \n  - !group\n    id: function-apps\n\n  - !grant\n    role: !group function-apps\n    members: *dev_team_1_function_apps\n\n  - &dev_team_1_container_apps\n    - !host\n      id: container-app1\n      annotations:\n        authn/api-key: true\n        azure: container\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n    \n  - !group\n    id: container-apps\n\n  - !grant\n    role: !group container-apps\n    members: *dev_team_1_container_apps"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "2-aws-dev-team-2-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load in data branch\n---\n- !policy\n  id: cloud/aws/dev-team-2/applications\n  annotations:\n    aws: true\n  body:\n  # The host's name has to follow the format: \"AccountID\"/\"IAMRoleName\"\n  - &dev_team_2_lambda_apps\n    - !host\n      id: 735280068473/ConjurAWSRole\n      annotations:\n        authn/api-key: true\n        aws: lambda\n    \n  - !group\n    id: lambda-apps\n\n  - !grant\n    role: !group lambda-apps\n    members: *dev_team_2_lambda_apps"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "3-aws-grants-authenticator",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into conjur/authn-iam/region1 branch\n- !grant\n  roles:\n    - !group consumers\n  members:\n    - !group /data/cloud/aws/dev-team-1/applications/ec2-apps\n    - !group /data/cloud/aws/dev-team-2/applications/lambda-apps"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/conjur/authn-iam/region1",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"conjur",
																		"authn-iam",
																		"region1"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "4-aws-grants-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load in data branch\n- !grant\n  roles:\n    - !group vault/{{conjurCloudTestSafeName}}/delegation/consumers\n  members:\n    - !group cloud/aws/dev-team-1/applications/ec2-apps\n    - !group cloud/aws/dev-team-2/applications/lambda-apps"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														}
													]
												},
												{
													"name": "2. azure",
													"item": [
														{
															"name": "1-azure-dev-team-1-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into data branch\n\n---\n- !policy\n  id: cloud/azure/dev-team-1/applications\n  body:\n  - &dev_team_1_vm_apps\n    - !host\n      id: vm-app1\n      annotations:\n        authn/api-key: true\n        azure: VM\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n    \n  - !group\n    id: vm-apps\n\n  - !grant\n    role: !group vm-apps\n    members: *dev_team_1_vm_apps\n\n  - &dev_team_1_app_services_apps\n    - !host\n      id: app-services-app1\n      annotations:\n        authn/api-key: true\n        azure: \"app services\"\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n    \n  - !group\n    id: app-services-apps\n\n  - !grant\n    role: !group app-services-apps\n    members: *dev_team_1_app_services_apps\n\n  - &dev_team_1_function_apps\n    - !host\n      id: function-app1\n      annotations:\n        authn/api-key: true\n        azure: function\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n    \n  - !group\n    id: function-apps\n\n  - !grant\n    role: !group function-apps\n    members: *dev_team_1_function_apps\n\n  - &dev_team_1_container_apps\n    - !host\n      id: container-app1\n      annotations:\n        authn/api-key: true\n        azure: container\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n    \n  - !group\n    id: container-apps\n\n  - !grant\n    role: !group container-apps\n    members: *dev_team_1_container_apps"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "2-azure-dev-team-2-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into data branch\n\n---\n- !policy\n  id: cloud/azure/dev-team-2/applications\n  body:\n  - &dev_team_2_vm_apps\n    - !host\n      id: vm-app1\n      annotations:\n        authn/api-key: true\n        azure: VM\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n    \n  - !group\n    id: vm-apps\n\n  - !grant\n    role: !group vm-apps\n    members: *dev_team_2_vm_apps\n\n  - &dev_team_2_app_services_apps\n    - !host\n      id: app-services-app1\n      annotations:\n        authn/api-key: true\n        azure: \"app services\"\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n    \n  - !group\n    id: app-services-apps\n\n  - !grant\n    role: !group app-services-apps\n    members: *dev_team_2_app_services_apps\n\n  - &dev_team_1_function_apps\n    - !host\n      id: function-app1\n      annotations:\n        authn/api-key: true\n        azure: function\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n    \n  - !group\n    id: function-apps\n\n  - !grant\n    role: !group function-apps\n    members: *dev_team_2_function_apps\n\n  - &dev_team_2_container_apps\n    - !host\n      id: container-app1\n      annotations:\n        authn/api-key: true\n        azure: container\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n\n  - !group\n    id: container-apps\n\n  - !grant\n    role: !group container-apps\n    members: *dev_team_2_container_apps"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "3-azure-grants-authenticator",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into conjur/authn-azure/region1 branch\n- !grant\n  roles:\n    - !group consumers\n  members:\n    - !group /data/cloud/azure/dev-team-1/applications/vm-apps\n    - !group /data/cloud/azure/dev-team-1/applications/app-services-apps\n    - !group /data/cloud/azure/dev-team-1/applications/function-apps\n    - !group /data/cloud/azure/dev-team-1/applications/container-apps\n    - !group /data/cloud/azure/dev-team-2/applications/vm-apps\n    - !group /data/cloud/azure/dev-team-2/applications/app-services-apps\n    - !group /data/cloud/azure/dev-team-2/applications/function-apps\n    - !group /data/cloud/azure/dev-team-2/applications/container-apps"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/conjur/authn-azure/region1",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"conjur",
																		"authn-azure",
																		"region1"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "4-azure-grants-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into data branch\n- !grant\n  roles:\n    - !group vault/{{conjurCloudTestSafeName}}/delegation/consumers\n  members:\n    - !group cloud/azure/dev-team-1/applications/vm-apps\n    - !group cloud/azure/dev-team-1/applications/app-services-apps\n    - !group cloud/azure/dev-team-1/applications/function-apps\n    - !group cloud/azure/dev-team-1/applications/container-apps\n    - !group cloud/azure/dev-team-2/applications/vm-apps\n    - !group cloud/azure/dev-team-2/applications/app-services-apps\n    - !group cloud/azure/dev-team-2/applications/function-apps\n    - !group cloud/azure/dev-team-2/applications/container-apps"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														}
													]
												},
												{
													"name": "3. gcp",
													"item": [
														{
															"name": "1-gcp-dev-team-1-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# The hosts in the policy need to have this format:\n# - !host\n#   id: <host-id>\n#   annotations:\n#     authn/api-key: false\n#     authn-gcp/instance-name: <instance-name>\n#     authn-gcp/project-id: <project-id>\n#     authn-gcp/service-account-id: <service-account-id>\n#     authn-gcp/service-account-email: <service-account-email>\n---\n- !policy\n  id: cloud/gcp/dev-team-1/applications\n  body:\n  - &dev_team_1_compute_apps\n    - !host\n      id: compute-app1\n      annotations:\n        authn/api-key: true\n        authn-gcp/instance-name: <instance-name>\n        authn-gcp/project-id: <project-id>\n        authn-gcp/service-account-id: <service-account-id>\n        authn-gcp/service-account-email: <service-account-email>\n        gcp: compute\n    \n  - !group\n    id: compute-apps\n\n  - !grant\n    role: !group compute-apps\n    members: *dev_team_1_compute_apps\n\n  - &dev_team_1_cloud_function_apps\n    - !host\n      id: cloud-function-app1\n      annotations:\n        authn/api-key: true\n        authn-gcp/instance-name: <instance-name>\n        authn-gcp/project-id: <project-id>\n        authn-gcp/service-account-id: <service-account-id>\n        authn-gcp/service-account-email: <service-account-email>\n        gcp: cloud-function\n    \n  - !group\n    id: cloud-function-apps\n\n  - !grant\n    role: !group cloud-function-apps\n    members: *dev_team_1_cloud_function_apps\n"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "2-gcp-dev-team-2-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# The hosts in the policy need to have this format:\n# - !host\n#   id: <host-id>\n#   annotations:\n#     authn-gcp/instance-name: <instance-name>\n#     authn-gcp/project-id: <project-id>\n#     authn-gcp/service-account-id: <service-account-id>\n#     authn-gcp/service-account-email: <service-account-email>\n---\n- !policy\n  id: cloud/gcp/dev-team-2/applications\n  body:\n  - &dev_team_1_compute_apps\n    - !host\n      id: compute-app1\n      annotations:\n        authn/api-key: true\n        authn-gcp/instance-name: <instance-name>\n        authn-gcp/project-id: <project-id>\n        authn-gcp/service-account-id: <service-account-id>\n        authn-gcp/service-account-email: <service-account-email>\n        gcp: compute\n    \n  - !group\n    id: compute-apps\n\n  - !grant\n    role: !group compute-apps\n    members: *dev_team_1_compute_apps\n\n  - &dev_team_1_cloud_function_apps\n    - !host\n      id: cloud-function-app1\n      annotations:\n        authn/api-key: true\n        authn-gcp/instance-name: <instance-name>\n        authn-gcp/project-id: <project-id>\n        authn-gcp/service-account-id: <service-account-id>\n        authn-gcp/service-account-email: <service-account-email>\n        gcp: cloud-function\n    \n  - !group\n    id: cloud-function-apps\n\n  - !grant\n    role: !group cloud-function-apps\n    members: *dev_team_1_cloud_function_apps"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "3-gcp-grants-authenticator",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into conjur/authn-gcp/region1 branch\n- !grant\n  roles:\n    - !group consumers\n  members:\n    - !group /data/cloud/gcp/dev-team-1/applications/compute-apps\n    - !group /data/cloud/gcp/dev-team-1/applications/cloud-function-apps\n    - !group /data/cloud/gcp/dev-team-2/applications/compute-apps\n    - !group /data/cloud/gcp/dev-team-2/applications/cloud-function-apps"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/conjur/authn-gcp/region1",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"conjur",
																		"authn-gcp",
																		"region1"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														},
														{
															"name": "4-gcp-grants-apps",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into data branch\n- !grant\n  roles:\n    - !group vault/{{conjurCloudTestSafeName}}/delegation/consumers\n  members:\n    - !group cloud/gcp/dev-team-1/applications/compute-apps\n    - !group cloud/gcp/dev-team-1/applications/cloud-function-apps\n    - !group cloud/gcp/dev-team-2/applications/compute-apps\n    - !group cloud/gcp/dev-team-2/applications/cloud-function-apps"
																},
																"url": {
																	"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
																	"host": [
																		"{{conjurCloudAPIURL}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurCloudAccount}}",
																		"policy",
																		"{{conjurCloudPolicyToExtend}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "5. Scripts",
											"item": [
												{
													"name": "1-bash-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n---\n- !policy\n  id: scripts\n  body: \n  - &staticScripts\n    - !host\n      id: bashApp1\n      annotations:\n        authn/api-key: true\n  \n  - !group static-apps\n\n  - !grant\n    role: !group static-apps\n    members: *staticScripts"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"policies",
																"{{conjurCloudAccount}}",
																"policy",
																"{{conjurCloudPolicyToExtend}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "2-bash-grants-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into the data branch\n- !grant\n  role: !group vault/{{conjurCloudTestSafeName}}/delegation/consumers\n  members:\n    - !group scripts/static-apps"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"policies",
																"{{conjurCloudAccount}}",
																"policy",
																"{{conjurCloudPolicyToExtend}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												}
											]
										}
									]
								}
							],
							"description": "This folder contains sample policy files. They can be used to test different integrations.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "2. Populate Policy Values",
							"item": [
								{
									"name": "1. Kubernetes",
									"item": [
										{
											"name": "1. authn-jwt/k8s-cluster1",
											"item": [
												{
													"name": "JWKS Uri",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "https://192.168.65.4:6443/openid/v1/jwks"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/k8s-cluster1/jwks-uri",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"k8s-cluster1",
																"jwks-uri"
															]
														}
													},
													"response": []
												},
												{
													"name": "JWKS Uri Ca Cert",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "-----BEGIN CERTIFICATE-----\nMIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl\ncm5ldGVzMB4XDTE5MDMxODE5NTE0NloXDTI5MDMxNTE5NTE0NlowFTETMBEGA1UE\nAxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAPSr\ni+aUjWdfe7I+snYG2CXEgvP8DVVbLtJn/MzWiIiuqqT14ozkrL7u+a/jLw0GLv4e\nbPXUdVy6Ob80DEuTJZ9Jb+MOPSP7Xsce9nPMwUPN17ucH+m4BLYC/60PuZkrQF95\neLQ38qoQIgnViYYnpyNLI5lY23aNLsqHK6Hk/DgzrfQTaBeIqpsvu0/QKew2Tjq2\n7gRhd8ZRRmwquO/MNyOBxkQ/B0iBq20ZwOoG/3UMw3gynJEcMwGlFcmXETxxxtnj\nlJIGNg3c0L1Lk4CRCRDoi00zE27heHdNXS0nhXSvOnNSM3Pjcr92kLg7NArBv1Oo\ncLDoAeFvt9Hmoc0nwEUCAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB\n/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAMEsF+w2wmLGl9EQ0ohtVBMQivmo\nHWsmchSRGoIo9U3Ns+z40Lm7u0qD9mKi3hFS7s73NioRF3XWKZZ2g0BxhUfiX7oe\nKlEN+p8WL2ld4ELHzI+xd5TfYJadn4QYrY0joE65X74TCuCe9quoFtDK7sENn6+R\njkh821YJJH3qy56rwmxmXcmwdtStFoFiF93RLLpBTfKvLiTnIF3Yj5Kf9qcRBd9Z\nKMWaLCavB2OWoE31SfGGetgi5grJxoUcRxVGZX4F/nyIjNEvly/nfg1X0igfn0fz\nB8U+sRYaJN6sD/lFV68qgbXH+BaV/Y+hyrTLLtoPoCXzO16vavVsJSHhvVk=\n-----END CERTIFICATE-----"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/k8s-cluster1/ca-cert",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"k8s-cluster1",
																"ca-cert"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Public Keys",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\": \"jwks\",\n    \"value\": {\n        \"keys\": [\n            {\n                \"use\": \"sig\",\n                \"kty\": \"RSA\",\n                \"kid\": \"N3zpI8APgPQzOBbwobZYTM5zatsgOjMw_FFZesp8QQI\",\n                \"alg\": \"RS256\",\n                \"n\": \"2FjpNLQUmceQdixAZ6_Kp9EYq5xXQFxklUeIFv0LqL8qqfbtRtpiHBfSXTWpnSxP6nlkKO8by4X9rWo0vuUVk7ihW-u1V3h-gvwuUBfj3y6TrsZGyM6TA-kTpwgf7WPMr14QCiTOLO0T-1DgfSrRx6q_boV1n80h8UdEuwcSSLU9DmxGltlJsdE2EnNm6Mv1CwPtIhg4gRxMK1-ElyYY5M8wq4TcHgpPIZZeY2wrX-8BiI_gQ8DwhXQXStiKH0jPdbhr2oieWNRVDyq1e-lG_1RoeXLT9zHSfVklX0aP9dEEuK28NkPBqVFVW-AqOUaSozeKPKsfNdV4inA_PC0xdw\",\n                \"e\": \"AQAB\"\n            }\n        ]\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/k8s-cluster1/public-keys",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"k8s-cluster1",
																"public-keys"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Token App Property",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "sub"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/k8s-cluster1/token-app-property",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"k8s-cluster1",
																"token-app-property"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Identity Path",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "/data/cd/kubernetes/dev-team-3/applications"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/k8s-cluster1/identity-path",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"k8s-cluster1",
																"identity-path"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Issuer",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "https://kubernetes.default.svc.cluster.local"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/k8s-cluster1/issuer",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"k8s-cluster1",
																"issuer"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Audience",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "conjur"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/k8s-cluster1/audience",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"k8s-cluster1",
																"audience"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Enforced Claims",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "claim_root/claim_name,custom_claim1,custom_claim2"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/k8s-cluster1/enforced-claims",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"k8s-cluster1",
																"enforced-claims"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Claim Aliases",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "target-annotation-name_1:source-claim-name_1,target-annotation-name_2:source-claim-name_2"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/k8s-cluster1/claim-aliases",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"k8s-cluster1",
																"claim-aliases"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Public Keys Variable",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "- !delete\n  record: !variable authn-jwt/k8s-cluster1/public-keys"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/conjur",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"policies",
																"{{conjurCloudAccount}}",
																"policy",
																"conjur"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "Delete JWKS URI and CA Certs Variables",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "- !delete\n  record: !variable authn-jwt/k8s-cluster/jwks-uri\n\n- !delete\n  record: !variable authn-jwt/k8s-cluster1/ca-certs"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/conjur",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"policies",
																"{{conjurCloudAccount}}",
																"policy",
																"conjur"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "2. Jenkins",
									"item": [
										{
											"name": "1. authn-jwt/jenkins1",
											"item": [
												{
													"name": "JWKS Uri",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "https://jenkins.internal/jwtauth/conjur-jwk-set"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/jenkins1/jwks-uri",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"jenkins1",
																"jwks-uri"
															]
														}
													},
													"response": []
												},
												{
													"name": "JWKS Uri Ca Cert",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "-----BEGIN CERTIFICATE-----\nMIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl\ncm5ldGVzMB4XDTE5MDMxODE5NTE0NloXDTI5MDMxNTE5NTE0NlowFTETMBEGA1UE\nAxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAPSr\ni+aUjWdfe7I+snYG2CXEgvP8DVVbLtJn/MzWiIiuqqT14ozkrL7u+a/jLw0GLv4e\nbPXUdVy6Ob80DEuTJZ9Jb+MOPSP7Xsce9nPMwUPN17ucH+m4BLYC/60PuZkrQF95\neLQ38qoQIgnViYYnpyNLI5lY23aNLsqHK6Hk/DgzrfQTaBeIqpsvu0/QKew2Tjq2\n7gRhd8ZRRmwquO/MNyOBxkQ/B0iBq20ZwOoG/3UMw3gynJEcMwGlFcmXETxxxtnj\nlJIGNg3c0L1Lk4CRCRDoi00zE27heHdNXS0nhXSvOnNSM3Pjcr92kLg7NArBv1Oo\ncLDoAeFvt9Hmoc0nwEUCAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB\n/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAMEsF+w2wmLGl9EQ0ohtVBMQivmo\nHWsmchSRGoIo9U3Ns+z40Lm7u0qD9mKi3hFS7s73NioRF3XWKZZ2g0BxhUfiX7oe\nKlEN+p8WL2ld4ELHzI+xd5TfYJadn4QYrY0joE65X74TCuCe9quoFtDK7sENn6+R\njkh821YJJH3qy56rwmxmXcmwdtStFoFiF93RLLpBTfKvLiTnIF3Yj5Kf9qcRBd9Z\nKMWaLCavB2OWoE31SfGGetgi5grJxoUcRxVGZX4F/nyIjNEvly/nfg1X0igfn0fz\nB8U+sRYaJN6sD/lFV68qgbXH+BaV/Y+hyrTLLtoPoCXzO16vavVsJSHhvVk=\n-----END CERTIFICATE-----"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/jenkins1/ca-cert",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"jenkins1",
																"ca-cert"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Public Keys",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\": \"jwks\",\n    \"value\": {\n        \"keys\": [\n            {\n                \"kty\": \"RSA\",\n                \"e\": \"AQAB\",\n                \"use\": \"sig\",\n                \"kid\": \"0617140643\",\n                \"key_ops\": [\n                    \"verify\"\n                ],\n                \"alg\": \"RS256\",\n                \"n\": \"AMv2DSyYDpg-Xva-pjcN4t9_n1Mn8Kqey3KVRLyry9-VAlycDSaOtZRVHioprNKSBieubTRW75ov-oGzdwQZmu2-8upjshj-He6zJj1pL81G0IGhw0D72cNY9yUT2KScLzOQaWa_YvRc8UjOqgse6zrbANXjYkO9w7CILUrDlebu7abeAWIIalbncna_t-zlgYp39C-qZPOWELO-vAKsDCZOGT_DdTil2OnYrsQDGnNw-vmgrVUYDkIZlAALRSJBx8iEW0BV2KpNgEtxsE1VAuvodRhBJfbUmm_BatbnRfIWq6RcP3Nb4US2DAN1NF3_kLbFuZKQRJnHZB2yZGT_sn8\"\n            }\n        ]\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/jenkins1/public-keys",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"jenkins1",
																"public-keys"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Token App Property",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "jenkins_full_name"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/jenkins1/token-app-property",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"jenkins1",
																"token-app-property"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Identity Path",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "/data/ci/jenkins/projects"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/jenkins1/identity-path",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"jenkins1",
																"identity-path"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Issuer",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "https://jenkins.internal"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/jenkins1/issuer",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"jenkins1",
																"issuer"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Audience",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "https://conjur.internal"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/jenkins1/audience",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"jenkins1",
																"audience"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Enforced Claims",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "claim_root/claim_name,custom_claim1,custom_claim2"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/jenkins1/enforced-claims",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"jenkins1",
																"enforced-claims"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Claim Aliases",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "target-annotation-name_1:source-claim-name_1,target-annotation-name_2:source-claim-name_2"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/jenkins1/claim-aliases",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"jenkins1",
																"claim-aliases"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "3. Gitlab",
									"item": [
										{
											"name": "1. authn-jwt/gitlab1",
											"item": [
												{
													"name": "JWKS Uri",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "https://gitlab.internal/-/jwks/"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/gitlab1/jwks-uri",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"gitlab1",
																"jwks-uri"
															]
														}
													},
													"response": []
												},
												{
													"name": "JWKS Uri Ca Cert",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "-----BEGIN CERTIFICATE-----\nMIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl\ncm5ldGVzMB4XDTE5MDMxODE5NTE0NloXDTI5MDMxNTE5NTE0NlowFTETMBEGA1UE\nAxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAPSr\ni+aUjWdfe7I+snYG2CXEgvP8DVVbLtJn/MzWiIiuqqT14ozkrL7u+a/jLw0GLv4e\nbPXUdVy6Ob80DEuTJZ9Jb+MOPSP7Xsce9nPMwUPN17ucH+m4BLYC/60PuZkrQF95\neLQ38qoQIgnViYYnpyNLI5lY23aNLsqHK6Hk/DgzrfQTaBeIqpsvu0/QKew2Tjq2\n7gRhd8ZRRmwquO/MNyOBxkQ/B0iBq20ZwOoG/3UMw3gynJEcMwGlFcmXETxxxtnj\nlJIGNg3c0L1Lk4CRCRDoi00zE27heHdNXS0nhXSvOnNSM3Pjcr92kLg7NArBv1Oo\ncLDoAeFvt9Hmoc0nwEUCAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB\n/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAMEsF+w2wmLGl9EQ0ohtVBMQivmo\nHWsmchSRGoIo9U3Ns+z40Lm7u0qD9mKi3hFS7s73NioRF3XWKZZ2g0BxhUfiX7oe\nKlEN+p8WL2ld4ELHzI+xd5TfYJadn4QYrY0joE65X74TCuCe9quoFtDK7sENn6+R\njkh821YJJH3qy56rwmxmXcmwdtStFoFiF93RLLpBTfKvLiTnIF3Yj5Kf9qcRBd9Z\nKMWaLCavB2OWoE31SfGGetgi5grJxoUcRxVGZX4F/nyIjNEvly/nfg1X0igfn0fz\nB8U+sRYaJN6sD/lFV68qgbXH+BaV/Y+hyrTLLtoPoCXzO16vavVsJSHhvVk=\n-----END CERTIFICATE-----"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/gitlab1/ca-cert",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"gitlab1",
																"ca-cert"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Public Keys",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\": \"jwks\",\n    \"value\": {\n        \"keys\": [\n            {\n                \"use\": \"sig\",\n                \"kty\": \"RSA\",\n                \"kid\": \"jzWTyPPXylUcRphTd5O07_OupM0PozzrAbUjrLOjkUk\",\n                \"alg\": \"RS256\",\n                \"n\": \"ukXcxB_g-Q1QfgjAtDeMFOR86i8jyuD1Y1VFbfRhiSq5oEhJfWDTJdpLIK0twPo-lCXNHDgoPe55skPRyJJ_Xt81n2Am6RwKqBDxTuJOO8CYdfKisRlgSv0QjJHfrDQXlbo076UJ16lVMsk4-PuNXX-mbWXnW3p4BPaSXXxWPsMVGUU1KL2LKUyHhJbK0XRApxT0L8kZS-7bVPdmw-a8kVL_YwJac7zA4GK2cMp_3d7-fpfQLSB0cX3G0Z7eVxEPqgakXyAy5jLjmD7Xu0aKQU8uCwJXPW2tSTwEMgE2zJ64eCu3OioWDklDK3dK1B2owLjPOG1Dp2knuLozKyGIxQ\",\n                \"e\": \"AQAB\"\n            }\n        ]\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/gitlab1/public-keys",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"gitlab1",
																"public-keys"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Token App Property",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "project_path"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/gitlab1/token-app-property",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"gitlab1",
																"token-app-property"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Identity Path",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "/ci/gitlab/projects"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/gitlab1/identity-path",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"gitlab1",
																"identity-path"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Issuer",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "https://gitlab.internal"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/gitlab1/issuer",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"gitlab1",
																"issuer"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Audience",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "https://conjur.internal"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/gitlab1/audience",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"gitlab1",
																"audience"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Enforced Claims",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "claim_root/claim_name,custom_claim1,custom_claim2"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/gitlab1/enforced-claims",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"gitlab1",
																"enforced-claims"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Claim Aliases",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurCloudAccessToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "target-annotation-name_1:source-claim-name_1,target-annotation-name_2:source-claim-name_2"
														},
														"url": {
															"raw": "{{conjurCloudAPIURL}}/secrets/{{conjurCloudAccount}}/variable/conjur/authn-jwt/gitlab1/claim-aliases",
															"host": [
																"{{conjurCloudAPIURL}}"
															],
															"path": [
																"secrets",
																"{{conjurCloudAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"gitlab1",
																"claim-aliases"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "3. CRUD",
							"item": [
								{
									"name": "Create Objects",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Token token=\"{{conjurCloudAccessToken}}\"",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "- !host\n  id: newHost\n  annotations:\n    description: \"This is a new host.\"\n    authn/api-key: true\n  restricted_to: 192.168.19.34\n\n- !group\n  id: newGroup\n  annotations:\n    description: \"This is a new group.\"\n\n- !policy\n  id: newPolicy\n  annotations:\n    description : \"Container for other objects.\"\n  body:\n    - !variable newPolicyVariable\n\n- !layer\n  id: newLayer\n  annotations:\n    description: \"This is a new layer.\"\n\n- !variable\n  id: newVariable\n  kind: password\n  annotations:\n    mime_type: application/octet-stream\n    custom_key: \"custom_value\""
										},
										"url": {
											"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
											"host": [
												"{{conjurCloudAPIURL}}"
											],
											"path": [
												"policies",
												"{{conjurCloudAccount}}",
												"policy",
												"{{conjurCloudPolicyToExtend}}"
											]
										},
										"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
									},
									"response": []
								},
								{
									"name": "Delete Objects",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Token token=\"{{conjurCloudAccessToken}}\"",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "- !delete\n  record: !host newHost\n\n- !delete\n  record: !group newGroup\n\n- !delete\n  record: !layer newLayer\n\n- !delete\n  record: !policy newPolicy\n\n- !delete\n  record: !variable newVariable"
										},
										"url": {
											"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
											"host": [
												"{{conjurCloudAPIURL}}"
											],
											"path": [
												"policies",
												"{{conjurCloudAccount}}",
												"policy",
												"{{conjurCloudPolicyToExtend}}"
											]
										},
										"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
									},
									"response": []
								},
								{
									"name": "Replace Policy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											},
											"disabled": false
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"value": "Token token=\"{{conjurCloudAccessToken}}\"",
												"key": "Authorization",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/newPolicy",
											"host": [
												"{{conjurCloudAPIURL}}"
											],
											"path": [
												"policies",
												"{{conjurCloudAccount}}",
												"policy",
												"newPolicy"
											]
										},
										"description": "Loads or replaces a Conjur policy document.\n\nAny policy data which already exists on the server but is **not** explicitly specified in the new policy file **will be deleted**."
									},
									"response": []
								},
								{
									"name": "Assign Privileges",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Token token=\"{{conjurCloudAccessToken}}\"",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "- !permit\n  role: !host newHost\n  privileges: [\"read\",\"execute\",\"update\"]\n  resources:\n    - !variable newVariable\n\n- !permit\n  role: !group newGroup\n  privileges: [\"read\",\"update\",\"create\"]\n  resources:\n    - !policy newPolicy"
										},
										"url": {
											"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
											"host": [
												"{{conjurCloudAPIURL}}"
											],
											"path": [
												"policies",
												"{{conjurCloudAccount}}",
												"policy",
												"{{conjurCloudPolicyToExtend}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Grant Role Membership",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Token token=\"{{conjurCloudAccessToken}}\"",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "- !grant\n  role: !group newGroup\n  members:\n    - !user newUser"
										},
										"url": {
											"raw": "{{conjurCloudAPIURL}}/policies/{{conjurCloudAccount}}/policy/{{conjurCloudPolicyToExtend}}",
											"host": [
												"{{conjurCloudAPIURL}}"
											],
											"path": [
												"policies",
												"{{conjurCloudAccount}}",
												"policy",
												"{{conjurCloudPolicyToExtend}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let url = pm.environment.get(\"identityTenantURL\");",
									"let account = pm.environment.get(\"conjurCloudAccount\");",
									"let userName = pm.environment.get(\"identityUsername\")",
									"let password = pm.environment.get(\"identityPassword\")",
									"",
									"let login = {",
									"  url: url + \"/Security/StartAuthentication\",",
									"  method: 'POST',",
									"  header: { 'content-type': 'application/json' },",
									"  body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify({\"Version\": \"1.0\",\"User\": userName})",
									"  }",
									"}",
									"",
									"pm.sendRequest(login, function (err, res) {",
									"    var jsonData = res.json();",
									"    if (jsonData.Result.Token) {",
									"        pm.test(\"Identity Token Exists\", function() {",
									"            if (jsonData.Result.Token) {",
									"                pm.environment.set(\"identityToken\", jsonData.Result.Token);",
									"            }",
									"        });",
									"    }",
									"    else{",
									"        pm.test(\"Identity Session ID Exists\", function() {",
									"            if (jsonData.Result.SessionId) {",
									"                pm.environment.set(\"identitySessionID\", jsonData.Result.SessionId);",
									"            }",
									"        });",
									"",
									"        pm.test(\"Identity Mechanism ID Exists\", function() {",
									"            if (jsonData.Result.Challenges[0].Mechanisms[0].MechanismId) {",
									"                pm.environment.set(\"identityMechanismID\", jsonData.Result.Challenges[0].Mechanisms[0].MechanismId);",
									"            }",
									"        });",
									"    }",
									"    }",
									")",
									"",
									"let identityMechanismID = pm.environment.get(\"identityMechanismID\");",
									"let identitySessionID = pm.environment.get(\"identitySessionID\");",
									"",
									"let auth = {",
									"  url: url + \"/Security/AdvanceAuthentication\",",
									"  method: 'POST',",
									"  header: { 'content-type': 'application/json' },",
									"  body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify(     {",
									"      \"Action\": \"Answer\",",
									"      \"SessionId\": identitySessionID,",
									"      \"MechanismId\": identityMechanismID,\"Answer\": password})",
									"  }",
									"}",
									"pm.sendRequest(auth, function (err, res) {",
									"    var jsonData = res.json().Result;",
									"    pm.test(\"Identity Token Exists\", function() {",
									"    if (jsonData.Token) {",
									"        pm.environment.set(\"identityToken\", jsonData.Token);",
									"    }",
									"    else{",
									"        throw new Error(\"You already have a token. Next step: Authenticate user\")",
									"    }",
									"});",
									"    }",
									")",
									"",
									"let identityToken = pm.environment.get(\"identityToken\");",
									"let conjurCloudAPIURL = pm.environment.get(\"conjurCloudAPIURL\");",
									"",
									"let conjurauth = {",
									"    url: conjurCloudAPIURL + \"/authn-oidc/cyberark/conjur/authenticate\",",
									"    method: 'POST',",
									"    header: { 'content-type': 'x-www-form-urlencoded', 'Accept-Encoding': 'base64' },",
									"    body: {",
									"        mode: 'urlencoded',",
									"        urlencoded : [",
									"        { key: 'id_token', value:identityToken}",
									"        ]",
									"    }",
									"}",
									"",
									"pm.sendRequest(conjurauth, function (err, res) {",
									"    pm.environment.set(\"conjurCloudAccessToken\",res.text())",
									"    }",
									")",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "4. Identity",
					"item": [
						{
							"name": "1. Authentication",
							"item": [
								{
									"name": "Authenticate user",
									"item": [
										{
											"name": "MFA",
											"item": [
												{
													"name": "Send email with code",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-IDAP-NATIVE-CLIENT",
																"value": "true",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"SessionId\": \"{{identitySessionID}}\",\n    \"MechanismId\": \"{{identityMechanismID2}}\",\n    \"Action\": \"StartOOB\"\n}"
														},
														"url": {
															"raw": "{{identityTenantURL}}/Security/AdvanceAuthentication",
															"host": [
																"{{identityTenantURL}}"
															],
															"path": [
																"Security",
																"AdvanceAuthentication"
															]
														}
													},
													"response": []
												},
												{
													"name": "Enter code from email",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json().Result",
																	"",
																	"pm.test(\"Identity Token Exists\", function() {",
																	"    if (jsonData.Token) {",
																	"        pm.environment.set(\"identityToken\", jsonData.Token);",
																	"    }",
																	"    else{",
																	"        throw new Error(\"You already have a token. Next step: Authenticate user\")",
																	"    }",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-IDAP-NATIVE-CLIENT",
																"value": "true",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"SessionId\": \"{{identitySessionID}}\",\n    \"MechanismId\": \"{{identityMechanismID2}}\",\n    \"Action\": \"Answer\",\n    \"Answer\": \"<email code>\"\n}"
														},
														"url": {
															"raw": "{{identityTenantURL}}/Security/AdvanceAuthentication",
															"host": [
																"{{identityTenantURL}}"
															],
															"path": [
																"Security",
																"AdvanceAuthentication"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "1. Start authentication",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json().Result",
															"if (jsonData.Token) {",
															"    pm.test(\"Identity Token Exists\", function() {",
															"        if (jsonData.Token) {",
															"            pm.environment.set(\"identityToken\", jsonData.Token);",
															"        }",
															"    });",
															"}",
															"else{",
															"    pm.test(\"Identity Session ID Exists\", function() {",
															"        if (jsonData.SessionId) {",
															"            pm.environment.set(\"identitySessionID\", jsonData.SessionId);",
															"        }",
															"    });",
															"",
															"    pm.test(\"Identity Mechanism ID Exists\", function() {",
															"        if (jsonData.Challenges[0].Mechanisms[0].MechanismId) {",
															"            pm.environment.set(\"identityMechanismID\", jsonData.Challenges[0].Mechanisms[0].MechanismId);",
															"        }",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Version\": \"1.0\",\n    \"User\": \"{{identityUsername}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{identityTenantURL}}/Security/StartAuthentication",
													"host": [
														"{{identityTenantURL}}"
													],
													"path": [
														"Security",
														"StartAuthentication"
													]
												},
												"description": "**Environment variables you need for the request:**\n\nIdentityUsername\n\n**Environment variables will update by the response**:\n\nidentitySessionID\n\nidentityMechanismID\n\nidentityToken (only if you have seesionID and mechanismID in your cookies)"
											},
											"response": []
										},
										{
											"name": "2 Advance authentication",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json().Result",
															"",
															"pm.test(\"Identity Token Exists\", function() {",
															"    if (jsonData.Token) {",
															"        pm.environment.set(\"identityToken\", jsonData.Token);",
															"    }",
															"    else{",
															"        throw new Error(\"You already have a token. Next step: Authenticate user\")",
															"    }",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "     {\n      \"Action\": \"Answer\",\n      \"SessionId\": \"{{identitySessionID}}\",\n      \"MechanismId\": \"{{identityMechanismID}}\",\n      \"Answer\": \"{{identityPassword}}\"\n      }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{identityTenantURL}}/Security/AdvanceAuthentication",
													"host": [
														"{{identityTenantURL}}"
													],
													"path": [
														"Security",
														"AdvanceAuthentication"
													]
												},
												"description": "**Environment variables you need for the request:**\n\nidentitySessionID\n\nidentityMechanismID\n\nIdentityPlatformPassword\n\n**Environment variables will update by the response**:\n\nidentityToken"
											},
											"response": []
										},
										{
											"name": "3. Authenticate user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const Data = pm.response.text()",
															"pm.test(\"conjurCloudAccessToken Exists for user\", function() {",
															"    pm.environment.set(\"conjurCloudAccessToken\", Data);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept-Encoding",
														"value": "base64",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "id_token",
															"value": "{{identityToken}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{conjurCloudAPIURL}}/authn-oidc/cyberark/conjur/authenticate",
													"host": [
														"{{conjurCloudAPIURL}}"
													],
													"path": [
														"authn-oidc",
														"cyberark",
														"conjur",
														"authenticate"
													]
												},
												"description": "**Environment variables you need for the request:**\n\nidentityToken\n\n**Environment variables will update by the response**:\n\nconjurcloudAccessToken"
											},
											"response": []
										}
									]
								},
								{
									"name": "Authenticate host",
									"item": [
										{
											"name": "Authenticate host",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const Data = pm.response.text()",
															"pm.test(\"conjurCloudAccessToken Exists for host\", function() {",
															"    pm.environment.set(\"conjurCloudAccessToken\", Data);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept-Encoding",
														"value": "base64",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{conjurCloudHostAPIKey}}"
												},
												"url": {
													"raw": "{{conjurCloudAPIURL}}/authn/conjur/{{conjurCloudHostName}}/authenticate",
													"host": [
														"{{conjurCloudAPIURL}}"
													],
													"path": [
														"authn",
														"conjur",
														"{{conjurCloudHostName}}",
														"authenticate"
													]
												},
												"description": "**Environment variables you need for the request:**\n\nconjurcloudHostAPIKey (copy it from the policy who create the host)\n\nconjurcloudHostName\n\n**Environment variables will update by the response**:\n\nconjurcloudAccessToken"
											},
											"response": []
										},
										{
											"name": "Authenticate host - Edge",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const Data = pm.response.text()",
															"pm.test(\"conjurCloudAccessToken Exists for host\", function() {",
															"    pm.environment.set(\"conjurCloudAccessToken\", Data);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept-Encoding",
														"value": "base64",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{conjurCloudHostAPIKey}}"
												},
												"url": {
													"raw": "{{conjurCloudAPIURL}}/authn/conjur/{{conjurCloudHostName}}/authenticate",
													"host": [
														"{{conjurCloudAPIURL}}"
													],
													"path": [
														"authn",
														"conjur",
														"{{conjurCloudHostName}}",
														"authenticate"
													]
												},
												"description": "**Environment variables you need for the request:**\n\nconjurcloudHostAPIKey (copy it from the policy who create the host)\n\nconjurcloudHostName\n\n**Environment variables will update by the response**:\n\nconjurcloudAccessToken"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "2. Tenant Configuration",
							"item": [
								{
									"name": "1. Create Tenant Suffix",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{identityToken}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{tenantURL}}/Core/GetAliasesForTenant",
											"host": [
												"{{tenantURL}}"
											],
											"path": [
												"Core",
												"GetAliasesForTenant"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "3. Users",
							"item": [
								{
									"name": "1. Bulk User Import",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{identityToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "file",
											"file": {}
										},
										"url": {
											"raw": "{{identityTenantURL}}/CDirectoryService/GetUsersFromCsvFile",
											"host": [
												"{{identityTenantURL}}"
											],
											"path": [
												"CDirectoryService",
												"GetUsersFromCsvFile"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let url = pm.environment.get(\"identityTenantURL\");",
									"let account = pm.environment.get(\"conjurCloudAccount\");",
									"let userName = pm.environment.get(\"identityUsername\")",
									"let password = pm.environment.get(\"identityPassword\")",
									"",
									"let login = {",
									"  url: url + \"/Security/StartAuthentication\",",
									"  method: 'POST',",
									"  header: { 'content-type': 'application/json' },",
									"  body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify({\"Version\": \"1.0\",\"User\": userName})",
									"  }",
									"}",
									"",
									"pm.sendRequest(login, function (err, res) {",
									"    var jsonData = res.json();",
									"    if (jsonData.Result.Token) {",
									"        pm.test(\"Identity Token Exists\", function() {",
									"            if (jsonData.Result.Token) {",
									"                pm.environment.set(\"identityToken\", jsonData.Result.Token);",
									"            }",
									"        });",
									"    }",
									"    else{",
									"        pm.test(\"Identity Session ID Exists\", function() {",
									"            if (jsonData.Result.SessionId) {",
									"                pm.environment.set(\"identitySessionID\", jsonData.Result.SessionId);",
									"            }",
									"        });",
									"",
									"        pm.test(\"Identity Mechanism ID Exists\", function() {",
									"            if (jsonData.Result.Challenges[0].Mechanisms[0].MechanismId) {",
									"                pm.environment.set(\"identityMechanismID\", jsonData.Result.Challenges[0].Mechanisms[0].MechanismId);",
									"            }",
									"        });",
									"    }",
									"    }",
									")",
									"",
									"let identityMechanismID = pm.environment.get(\"identityMechanismID\");",
									"let identitySessionID = pm.environment.get(\"identitySessionID\");",
									"",
									"let auth = {",
									"  url: url + \"/Security/AdvanceAuthentication\",",
									"  method: 'POST',",
									"  header: { 'content-type': 'application/json' },",
									"  body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify(     {",
									"      \"Action\": \"Answer\",",
									"      \"SessionId\": identitySessionID,",
									"      \"MechanismId\": identityMechanismID,\"Answer\": password})",
									"  }",
									"}",
									"pm.sendRequest(auth, function (err, res) {",
									"    var jsonData = res.json().Result;",
									"    pm.test(\"Identity Token Exists\", function() {",
									"    if (jsonData.Token) {",
									"        pm.environment.set(\"identityToken\", jsonData.Token);",
									"    }",
									"    else{",
									"        throw new Error(\"You already have a token. Next step: Authenticate user\")",
									"    }",
									"});",
									"    }",
									")"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "5. Secrets Hub",
					"item": [
						{
							"name": "1. Secrets Store",
							"item": [
								{
									"name": "1. Source",
									"item": [
										{
											"name": "Optional",
											"item": [
												{
													"name": "Delete Privilege Cloud Secret Store Source",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "DELETE",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{identityToken}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{SecretsHubAPIURL}}/secret-stores/{{secretsHubPrivCloudSecretStoreSourceID}}",
															"host": [
																"{{SecretsHubAPIURL}}"
															],
															"path": [
																"secret-stores",
																"{{secretsHubPrivCloudSecretStoreSourceID}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "1. Create Privilege Cloud Secret Store Source",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"",
															"pm.environment.set(\"secretsHubPrivCloudSecretStoreSourceID\", jsonData['id']);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{identityToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\":\n    { \n        \"url\": \"{{pasBaseURL}}/passwordvault\", \n        \"userName\": \"{{secretsHubUser}}\", \n        \"password\": \"{{secretsHubUserPassword}}\" \n    },\n    \"name\":\"MySource\",\n    \"type\":\"PAM_PCLOUD\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{SecretsHubAPIURL}}/secret-stores",
													"host": [
														"{{SecretsHubAPIURL}}"
													],
													"path": [
														"secret-stores"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "2. Targets",
									"item": [
										{
											"name": "Optional",
											"item": [
												{
													"name": "Delete AWS Secrets Store Target",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "DELETE",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{identityToken}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{SecretsHubAPIURL}}/secret-stores/{{secretsHubAWSSecretStoreTargetID}}",
															"host": [
																"{{SecretsHubAPIURL}}"
															],
															"path": [
																"secret-stores",
																"{{secretsHubAWSSecretStoreTargetID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Azure Public Secrets Store Target",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "DELETE",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{identityToken}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{SecretsHubAPIURL}}/secret-stores/{{secretsHubAzurePublicSecretStoreTargetID}}",
															"host": [
																"{{SecretsHubAPIURL}}"
															],
															"path": [
																"secret-stores",
																"{{secretsHubAzurePublicSecretStoreTargetID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Azure Private Secrets Store Target",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "DELETE",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{identityToken}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{SecretsHubAPIURL}}/secret-stores/{{secretsHubAzurePrivateSecretStoreTargetID}}",
															"host": [
																"{{SecretsHubAPIURL}}"
															],
															"path": [
																"secret-stores",
																"{{secretsHubAzurePrivateSecretStoreTargetID}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "2. Create AWS Secrets Store Target",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"",
															"pm.environment.set(\"secretsHubAWSSecretStoreTargetID\", jsonData['id']);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{identityToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\":\n    {\n        \"accountAlias\":\"\",\n        \"accountId\":\"\",\n        \"regionId\":\"\",\n        \"roleName\":\"\"\n    },\n    \"name\":\"\",\n    \"description\":\"\",\n    \"type\":\"AWS_ASM\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{SecretsHubAPIURL}}/secret-stores",
													"host": [
														"{{SecretsHubAPIURL}}"
													],
													"path": [
														"secret-stores"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Create Azure Public Secrets Store Target",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"",
															"pm.environment.set(\"secretsHubAzurePublicSecretStoreTargetID\", jsonData['id']);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{identityToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\":\n    {\n        \"azureTenantId\": \"\",\n        \"azureVaultUrl\": \"\",\n        \"appClientId\": \"\",\n        \"appClientSecret\": \"\",\n        \"connectionConfig\": {\n            \"connectionType\": \"Public\"\n        }\n    },\n    \"name\":\"\",\n    \"description\":\"\",\n    \"type\":\"AZURE_AKV\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{SecretsHubAPIURL}}/secret-stores",
													"host": [
														"{{SecretsHubAPIURL}}"
													],
													"path": [
														"secret-stores"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. Create Azure Private Secrets Store Target",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"",
															"pm.environment.set(\"secretsHubAzurePrivateSecretStoreTargetID\", jsonData['id']);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{identityToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\":\n    {\n        \"azureTenantId\": \"\",\n        \"azureVaultUrl\": \"\",\n        \"appClientId\": \"\",\n        \"appClientSecret\": \"\",\n        \"connectionConfig\": {\n            \"connectionType\": \"CONNECTOR\", \n            \"connectorId\": \"\"\n        }\n    },\n    \"name\":\"\",\n    \"description\":\"\",\n    \"type\":\"AZURE_AKV\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{SecretsHubAPIURL}}/secret-stores",
													"host": [
														"{{SecretsHubAPIURL}}"
													],
													"path": [
														"secret-stores"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "2. Policies",
							"item": [
								{
									"name": "Optional",
									"item": [
										{
											"name": "Delete Secrets Hub Privilege Cloud Source Safe Filter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{identityToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{SecretsHubAPIURL}}/secret-stores/{{secretsHubPrivCloudSecretStoreSourceID}}/filters/{{secretsHubPrivCloudSecretStoreSourceSafeFilterID}}",
													"host": [
														"{{SecretsHubAPIURL}}"
													],
													"path": [
														"secret-stores",
														"{{secretsHubPrivCloudSecretStoreSourceID}}",
														"filters",
														"{{secretsHubPrivCloudSecretStoreSourceSafeFilterID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Secrets Hub Privilege Cloud Source Filters",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{identityToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{SecretsHubAPIURL}}/secret-stores/{{secretsHubPrivCloudSecretStoreSourceID}}/filters",
													"host": [
														"{{SecretsHubAPIURL}}"
													],
													"path": [
														"secret-stores",
														"{{secretsHubPrivCloudSecretStoreSourceID}}",
														"filters"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Policies",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{identityToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{SecretsHubAPIURL}}/policies",
													"host": [
														"{{SecretsHubAPIURL}}"
													],
													"path": [
														"policies"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Privilege Cloud Secrets Store Source",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{identityToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{SecretsHubAPIURL}}/secret-stores?type=PAM_PCLOUD",
													"host": [
														"{{SecretsHubAPIURL}}"
													],
													"path": [
														"secret-stores"
													],
													"query": [
														{
															"key": "type",
															"value": "PAM_PCLOUD"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "1. Create Filter for Synched Safes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json()",
													"",
													"pm.environment.set(\"secretsHubPrivCloudSecretStoreSourceSafeFilterID\", jsonData.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{identityToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"type\": \"PAM_SAFE\",\n  \"data\": {\n    \"safeName\": \"{{secretsHubTestSafeName}}\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SecretsHubAPIURL}}/secret-stores/{{secretsHubPrivCloudSecretStoreSourceID}}/filters",
											"host": [
												"{{SecretsHubAPIURL}}"
											],
											"path": [
												"secret-stores",
												"{{secretsHubPrivCloudSecretStoreSourceID}}",
												"filters"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Create AWS Policy for Secrets Hub Test Safe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{identityToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test AWS Sync Policy\",\n    \"description\": \"\",\n    \"sourceId\": \"{{secretsHubPrivCloudSecretStoreSourceSafeFilterID}}\",\n    \"targetId\": \"{{secretsHubAWSSecretStoreTargetID}}\",\n    \"transformationId\": \"\",\n    \"secretStoreFilterId\": \"{{secretsHubPrivCloudSecretStoreSourceID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SecretsHubAPIURL}}/policies",
											"host": [
												"{{SecretsHubAPIURL}}"
											],
											"path": [
												"policies"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create Azure Public Policy for Secrets Hub Test Safe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{identityToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test AWS Sync Policy\",\n    \"description\": \"\",\n    \"sourceId\": \"{{secretsHubPrivCloudSecretStoreSourceSafeFilterID}}\",\n    \"targetId\": \"{{secretsHubAzurePublicSecretStoreTargetID}}\",\n    \"transformationId\": \"\",\n    \"secretStoreFilterId\": \"{{secretsHubPrivCloudSecretStoreSourceID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SecretsHubAPIURL}}/policies",
											"host": [
												"{{SecretsHubAPIURL}}"
											],
											"path": [
												"policies"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Create Azure Private Policy for Secrets Hub Test Safe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{identityToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test AWS Sync Policy\",\n    \"description\": \"\",\n    \"sourceId\": \"{{secretsHubPrivCloudSecretStoreSourceSafeFilterID}}\",\n    \"targetId\": \"{{secretsHubAzurePrivateSecretStoreTargetID}}\",\n    \"transformationId\": \"\",\n    \"secretStoreFilterId\": \"{{secretsHubPrivCloudSecretStoreSourceID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SecretsHubAPIURL}}/policies",
											"host": [
												"{{SecretsHubAPIURL}}"
											],
											"path": [
												"policies"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let url = pm.environment.get(\"identityTenantURL\");",
									"let account = pm.environment.get(\"conjurCloudAccount\");",
									"let userName = pm.environment.get(\"identityUsername\")",
									"let password = pm.environment.get(\"identityPassword\")",
									"",
									"let login = {",
									"  url: url + \"/Security/StartAuthentication\",",
									"  method: 'POST',",
									"  header: { 'content-type': 'application/json' },",
									"  body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify({\"Version\": \"1.0\",\"User\": userName})",
									"  }",
									"}",
									"",
									"pm.sendRequest(login, function (err, res) {",
									"    var jsonData = res.json();",
									"    if (jsonData.Result.Token) {",
									"        pm.test(\"Identity Token Exists\", function() {",
									"            if (jsonData.Result.Token) {",
									"                pm.environment.set(\"identityToken\", jsonData.Result.Token);",
									"            }",
									"        });",
									"    }",
									"    else{",
									"        pm.test(\"Identity Session ID Exists\", function() {",
									"            if (jsonData.Result.SessionId) {",
									"                pm.environment.set(\"identitySessionID\", jsonData.Result.SessionId);",
									"            }",
									"        });",
									"",
									"        pm.test(\"Identity Mechanism ID Exists\", function() {",
									"            if (jsonData.Result.Challenges[0].Mechanisms[0].MechanismId) {",
									"                pm.environment.set(\"identityMechanismID\", jsonData.Result.Challenges[0].Mechanisms[0].MechanismId);",
									"            }",
									"        });",
									"    }",
									"    }",
									")",
									"",
									"let identityMechanismID = pm.environment.get(\"identityMechanismID\");",
									"let identitySessionID = pm.environment.get(\"identitySessionID\");",
									"",
									"let auth = {",
									"  url: url + \"/Security/AdvanceAuthentication\",",
									"  method: 'POST',",
									"  header: { 'content-type': 'application/json' },",
									"  body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify(     {",
									"      \"Action\": \"Answer\",",
									"      \"SessionId\": identitySessionID,",
									"      \"MechanismId\": identityMechanismID,\"Answer\": password})",
									"  }",
									"}",
									"pm.sendRequest(auth, function (err, res) {",
									"    var jsonData = res.json().Result;",
									"    pm.test(\"Identity Token Exists\", function() {",
									"    if (jsonData.Token) {",
									"        pm.environment.set(\"identityToken\", jsonData.Token);",
									"    }",
									"    else{",
									"        throw new Error(\"You already have a token. Next step: Authenticate user\")",
									"    }",
									"});",
									"    }",
									")"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "2. Conjur Secrets Manager Enterprise",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Rotate",
							"item": [
								{
									"name": "Rotate Your Own API Key",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Token token=\"{{conjurEnterpriseToken}}\"",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/authn/{{conjurEnterpriseAccount}}/api_key",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"authn",
												"{{conjurEnterpriseAccount}}",
												"api_key"
											]
										},
										"description": "Any role can rotate its own API key. The name and password or current API key of the role must be provided via HTTP Basic Authorization.\n\nNote that the body of the request must be the empty string."
									},
									"response": []
								},
								{
									"name": "Rotate A Host API Key",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Token token=\"{{conjurEnterpriseToken}}\"",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/authn/{{conjurEnterpriseAccount}}/api_key?role=host:hostID",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"authn",
												"{{conjurEnterpriseAccount}}",
												"api_key"
											],
											"query": [
												{
													"key": "role",
													"value": "host:hostID",
													"description": "hostID would be the identity without the prefix host/"
												}
											]
										},
										"description": "Rotates the API key of a host you can update.\n\nNote that the body of the request must be the empty string."
									},
									"response": []
								}
							]
						},
						{
							"name": "Login",
							"event": [
								{
									"disabled": false,
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{conjurEnterprisePassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{conjurEnterpriseUsername}}",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/authn/{{conjurEnterpriseAccount}}/login",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"authn",
										"{{conjurEnterpriseAccount}}",
										"login"
									]
								},
								"description": "Gets the API key of a user given the username and password via HTTP Basic Authentication.\n\nPasswords are stored in the Conjur database using bcrypt with a work factor of 12. Therefore, login is a fairly expensive operation. However, once the API key is obtained, it may be used to inexpensively obtain access tokens by calling the Authenticate method. An access token is required to use most other parts of the Conjur API.\n\nYour HTTP/REST client probably provides HTTP basic authentication support. For example, curl and all of the Conjur client libraries provide this.\n\nNote that machine roles (Hosts) do not have passwords and do not need to login."
							},
							"response": [
								{
									"name": "Login",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/authn/{{conjurEnterpriseAccount}}/login",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"authn",
												"{{conjurEnterpriseAccount}}",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Tue, 17 May 2022 19:31:20 GMT"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin"
										},
										{
											"key": "Vary",
											"value": "Accept"
										},
										{
											"key": "ETag",
											"value": "W/\"bb52b0cf8cfb30a71f7ab71398ff12c7\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "98ef0d87-8bf4-4743-be4b-2434d5c38f8d"
										},
										{
											"key": "X-Runtime",
											"value": "0.234238"
										}
									],
									"cookie": [],
									"body": "3cphq27aezgqx2w7f6we21pw4e0cngyzs6ssbsd14k70wn6jf9gp"
								}
							]
						},
						{
							"name": "Whoami",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token token=\"{{conjurEnterpriseToken}}\"",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/whoami",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"whoami"
									]
								},
								"description": "WhoAmI provides information about the client making an API request.\n\nIt can be used to help troubleshoot configuration by verifying authentication and the client IP address for audit and network access restrictions. For more information, see [Host Attributes](https://docs.cyberark.com/Product-Doc/OnlineHelp/AAM-DAP/Latest/en/Content/Operations/Policy/statement-ref-host.htm#Attribut)."
							},
							"response": [
								{
									"name": "Whoami",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Token token=\"{{conjurEnterpriseToken}}\"",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/whoami",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"whoami"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Tue, 17 May 2022 19:31:11 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin"
										},
										{
											"key": "Vary",
											"value": "Accept"
										},
										{
											"key": "ETag",
											"value": "W/\"666eb5026536bc8707410d37f618f516\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "e1d1ac14-90de-4625-8be4-07fa7e7b25d7"
										},
										{
											"key": "X-Runtime",
											"value": "0.010737"
										}
									],
									"cookie": [],
									"body": "{\n    \"client_ip\": \"172.22.0.1\",\n    \"user_agent\": \"PostmanRuntime/7.29.0\",\n    \"account\": \"cyberark\",\n    \"username\": \"admin\",\n    \"token_issued_at\": \"2022-05-17T19:31:11.000+00:00\"\n}"
								}
							]
						},
						{
							"name": "Authenticate",
							"event": [
								{
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									},
									"listen": "prerequest",
									"disabled": false
								},
								{
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									},
									"disabled": false,
									"listen": "test"
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept-Encoding",
										"value": "base64",
										"description": "Returns token base64-encoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{conjurEnterpriseAPIKey}}"
								},
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/authn/{{conjurEnterpriseAccount}}/{{conjurEnterpriseUsername}}/authenticate",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"authn",
										"{{conjurEnterpriseAccount}}",
										"{{conjurEnterpriseUsername}}",
										"authenticate"
									]
								},
								"description": "Gets a short-lived access token, which can be used to authenticate requests to (most of) the rest of the Conjur API. A client can obtain an access token by presenting a valid login name and API key.\n\nThe login must be URL encoded. For example, `alice@devops` must be encoded as `alice%40devops`.\n\nFor host authentication, the login is the host ID with the prefix `host/`. For example, the host webserver would login as `host/webserver`, and would be encoded as `host%2Fwebserver`.\n\nFor API usage, the access token is ordinarily passed as an HTTP Authorization “Token” header.\n\n**Note: Base64-encode the JSON Web Token (JWT) returned in the response for use as the {{dapToken}}.**"
							},
							"response": [
								{
									"name": "Authenticate",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept-Encoding",
												"value": "base64",
												"description": "Returns token base64-encoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{conjurAPIKey}}"
										},
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/authn/{{conjurEnterpriseAccount}}/{{conjurUsername}}/authenticate",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"authn",
												"{{conjurEnterpriseAccount}}",
												"{{conjurUsername}}",
												"authenticate"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Tue, 17 May 2022 19:31:27 GMT"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin"
										},
										{
											"key": "Content-Encoding",
											"value": "base64"
										},
										{
											"key": "Vary",
											"value": "Accept"
										},
										{
											"key": "ETag",
											"value": "W/\"7bdeffc067e39e8e881018084551b3ae\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "9c7c4b7a-27b7-400c-9a28-686952403db5"
										},
										{
											"key": "X-Runtime",
											"value": "0.013230"
										}
									],
									"cookie": [],
									"body": "eyJwcm90ZWN0ZWQiOiJleUpoYkdjaU9pSmpiMjVxZFhJdWIzSm5MM05zYjNOcGJHOHZkaklpTENKcmFXUWlPaUkzWWprNFptRmxPVGt3T1RabVlUWmhaRFkwWXpWbU1EYzJOMk5sTVdObU1qYzRNelJoTkdGaE1UUmpZMlUwTmpKaFl6ZzBNVFZqTlRGa04yRTFNR00ySW4wPSIsInBheWxvYWQiOiJleUp6ZFdJaU9pSmhaRzFwYmlJc0ltbGhkQ0k2TVRZMU1qZ3hOVGc0TjMwPSIsInNpZ25hdHVyZSI6IkVoa2hqU1dyaWZTb2pDQ0Q3Zmlvcy16U2dCWVQ1RGZUMWVDak4tbk03b0xyOEFEUHpSX0tqQmNUdWU3dWxjZlN3cG1kaWh6bk8zcjRkcDhGUmpiQXkwVURuRWs2ZFZmYUkxQ3pBcUdMbGg0aFBPYzBnYmtlQ1RYZVltdW9fUE45dFZUYnQ5SERhUUpDU2FVVzJhV0w3TkhjRGdtQUtPWWtzclN2NEVIbS16OGpGWG0zYjNzaWJUWW1LLTB2S05HYktoQmZhX1NyYXFqT0dGTnVYNHVFN1REbEppV2Vja1NQbTE0UnFITHZMQVAyczZEZUR3YVl1OUVjYmVEN2NiOXFtUzAwa09ndHlTY0wwODZ4c04wVjY3dU1ocGNQN0RnTWFnSnRESEVfWTlNZWJhLWYxTWlEVGhMYkh5T2RBZjFHTnozQXh5a296Y0toSXVocXV0UmJhdHFYUkxIQUl0T1NveUQ0ZTV6Nm9hZ0ItQlQ0aWpybWVEQlJBVUhvUE00ZCJ9"
								}
							]
						},
						{
							"name": "Change Your Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let res = pm.request.body.raw",
											"pm.environment.set(\"conjurEnterprisePassword\",res)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token token=\"{{conjurEnterpriseToken}}\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "CyberArk12345!!"
								},
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/authn/{{conjurEnterpriseAccount}}/password",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"authn",
										"{{conjurEnterpriseAccount}}",
										"password"
									]
								},
								"description": "Changes a user’s password. You must provide the login name and current password or API key of the user whose password is to be updated in an HTTP Basic Authentication header. Also replaces the user’s API key with a new securely generated random value. You can fetch the new API key by using Login.\n\nYour HTTP/REST client probably provides HTTP basic authentication support. For example, curl and all of the Conjur client libraries provide this.\n\nNote that machine roles (Hosts) do not have passwords. They authenticate using their API keys, while passwords are only used by human users."
							},
							"response": [
								{
									"name": "Change Your Password",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "@Sup3rS3cr3t@"
										},
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/authn/{{conjurEnterpriseAccount}}/password",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"authn",
												"{{conjurEnterpriseAccount}}",
												"password"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Wed, 18 May 2022 18:48:52 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache"
										},
										{
											"key": "X-Request-Id",
											"value": "a1480d82-65b6-4033-99f0-f0b1c1862d92"
										},
										{
											"key": "X-Runtime",
											"value": "0.415842"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "Here are the requests that handle the different types of authentication."
				},
				{
					"name": "Policy",
					"item": [
						{
							"name": "Samples",
							"item": [
								{
									"name": "root",
									"item": [
										{
											"name": "1-root",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Token token=\"{{conjurEnterpriseToken}}\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "# Load into root branch. This creates a structure like conjur-cloud. \n---\n- !group\n  id: admins-group\n\n- !group\n  id: users-group\n\n- !policy\n  id: data\n  owner: !group admins-group\n\n- !policy\n  id: conjur\n  owner: !group admins-group\n  body:\n  - !policy\n    id: authn-iam\n\n  - !policy\n    id: authn-azure\n\n  - !policy\n    id: authn-gcp\n\n  - !policy\n    id: authn-k8s\n\n  - !policy\n    id: authn-jwt\n\n  - !policy\n    id: seed-generation\n\n- &admins\n  - !user\n    id: joe\n    annotations:\n      first_name: Joe\n      last_name: Garcia\n      full_name: Joe Garcia\n      email: joe.garcia@cyberark.com\n      title: DevOps Security Engineer\n      company: CyberArk\n      cyberark: true\n  - !user\n    id: darren\n    annotations:\n      first_name: Darren\n      last_name: Khan\n      full_name: Darren Khan\n      email: darren.khan@cyberark.com\n      title: Senior DevSecOps SME\n      company: CyberArk\n      cyberark: true\n  - !user\n    id: jeremy\n    annotations:\n      first_name: Jeremy\n      last_name: Patton\n      full_name: Jeremy Patton\n      email: jeremy.patton@cyberark.com\n      title: DevOps Security Engineer\n      company: CyberArk\n      cyberark: true\n  - !user\n    id: jody\n    annotations:\n      first_name: Jody\n      last_name: Hunt\n      full_name: Jody Hunt\n      email: jody.hunt@cyberark.com\n      title: Senior DevSecOps SME\n      company: CyberArk\n      cyberark: true\n  - !user\n    id: dennis\n    annotations:\n      first_name: Dennis\n      last_name: Mastin\n      full_name: Dennis Mastin\n      email: dennis.mastin@cyberark.com\n      title: DevOps Security Engineer\n      company: CyberArk\n      cyberark: true\n  - !user\n    id: garnet\n    annotations:\n      first_name: Garnet\n      last_name: Merrill\n      full_name: Garnet Merrill\n      email: garnet.merrill@cyberark.com\n      title: DevOps Security Engineer\n      company: CyberArk\n      cyberark: true\n  - !user\n    id: quincy\n    annotations:\n      first_name: Quincy\n      last_name: Cheng\n      full_name: Quincy Cheng\n      email: quincy.cheng@cyberark.com\n      title: DevOps Security Engineer\n      company: CyberArk\n      cyberark: true\n  - !user\n    id: amine\n    annotations:\n      first_name: Amine\n      last_name: Al Oumami\n      full_name: Amine Al Oumami\n      email: amine.aloumami@cyberark.com\n      title: DevOps Security Engineer\n      company: CyberArk\n      cyberark: true\n  - !user\n    id: arron\n    annotations:\n      first_name: Arron\n      last_name: Thundercliffe\n      full_name: Arron Thundercliffe\n      email: arron.thundercliffe@cyberark.com\n      title: DevOps Security Engineer\n      company: CyberArk\n      cyberark: true\n  - !user\n    id: aslan\n    annotations:\n      first_name: Aslan\n      last_name: Ramos\n      full_name: Aslan Ramos\n      email: aslan.ramos@cyberark.com\n      title: DevOps Security Engineer\n      company: CyberArk\n      cyberark: true\n  - !user\n    id: tudor\n    annotations:\n      first_name: Tudor\n      last_name: Urdes\n      full_name: Tudor Urdes\n      email: tudor.urdes@cyberark.com\n      title: DevOps Security Engineer\n      company: CyberArk\n      cyberark: true\n  - !user\n    id: evan\n    annotations:\n      first_name: Evan\n      last_name: Litwak\n      full_name: Evan Litwak\n      email: evan.litwak@cyberark.com\n      title: Sr Director, DevSecOps Solutions Strategy\n      company: CyberArk\n      cyberark: true\n\n- !grant\n  role: !group admins-group\n  members: *admins\n\n- &auditors\n  - !user\n    id: mark\n    annotations:\n      first_name: Mark\n      last_name: Hurter\n      full_name: Mark Hurter\n      email: mark.hurter@cyberark.com\n      title: DevSecOps Sales Overlay\n      company: CyberArk\n      cyberark: true\n  - !user\n    id: rob\n    annotations:\n      first_name: Rob\n      last_name: Patrick\n      full_name: Rob Patrick\n      email: rob.patrick@cyberark.com\n      title: DevSecOps Sales Overlay\n      company: CyberArk\n      cyberark: true\n  - !user\n    id: james\n    annotations:\n      first_name: James\n      last_name: Creamer\n      full_name: James Creamer\n      email: james.creamer@cyberark.com\n      title: PAS Programs Architect\n      company: CyberArk\n      cyberark: true\n\n- !grant\n  role: !group users-group\n  members: *auditors"
												},
												"url": {
													"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/root",
													"host": [
														"{{conjurEnterpriseHostname}}"
													],
													"path": [
														"policies",
														"{{conjurEnterpriseAccount}}",
														"policy",
														"root"
													]
												},
												"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
											},
											"response": []
										},
										{
											"name": "2-secrets",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Token token=\"{{conjurEnterpriseToken}}\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "#Load policy into data branch\n- !group\n  id: example-vault1-admins\n\n- !policy\n  id: example-vault1\n  owner: !group example-vault1-admins\n  body:\n  - !group \n    id: example-safe1-admins\n  \n  - !policy\n    id: example-safe1\n    owner: !group example-safe1-admins\n    body:\n    - &safe1-secrets\n      - !variable\n        id: secret1/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe1/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret1/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe1/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret2/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe1/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret2/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe1/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret3/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe1/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret3/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe1/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret4/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe1/secret4\n          mime_type: application/json\n\n      - !variable\n        id: secret4/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe1/secret4\n          mime_type: application/json\n\n    - !policy\n      id: delegation\n      body:\n      - !group\n        id: consumers\n      \n    - !permit\n      role: !group delegation/consumers\n      privilege: [ read, execute ]\n      resource: *safe1-secrets\n\n  - !group \n    id: example-safe2-admins\n  \n  - !policy\n    id: example-safe2\n    owner: !group example-safe2-admins\n    body:\n    - &safe2-secrets\n      - !variable\n        id: secret1/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe2/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret1/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe2/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret2/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe2/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret2/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe2/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret3/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe2/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret3/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe2/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret4/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe2/secret4\n          mime_type: application/json\n\n      - !variable\n        id: secret4/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe2/secret4\n          mime_type: application/json\n\n    - !policy\n      id: delegation\n      body:\n      - !group\n        id: consumers\n      \n    - !permit\n      role: !group delegation/consumers\n      privilege: [ read, execute ]\n      resource: *safe2-secrets\n\n  - !group \n    id: example-safe3-admins\n  \n  - !policy\n    id: example-safe3\n    owner: !group example-safe3-admins\n    body:\n    - &safe3-secrets\n      - !variable\n        id: secret1/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe3/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret1/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe3/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret2/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe3/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret2/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe3/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret3/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe3/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret3/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe3/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret4/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe3/secret4\n          mime_type: application/json\n\n      - !variable\n        id: secret4/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe3/secret4\n          mime_type: application/json\n\n    - !policy\n      id: delegation\n      body:\n      - !group\n        id: consumers\n      \n    - !permit\n      role: !group delegation/consumers\n      privilege: [ read, execute ]\n      resource: *safe3-secrets\n\n  - !group \n    id: example-safe4-admins\n  \n  - !policy\n    id: example-safe4\n    owner: !group example-safe4-admins\n    body:\n    - &safe4-secrets\n      - !variable\n        id: secret1/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe4/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret1/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe4/secret1\n          mime_type: application/json\n          \n      - !variable\n        id: secret2/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe4/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret2/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe4/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret3/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe4/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret3/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe4/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret4/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe4/secret4\n          mime_type: application/json\n\n      - !variable\n        id: secret4/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe4/secret4\n          mime_type: application/json\n\n    - !policy\n      id: delegation\n      body:\n      - !group\n        id: consumers\n      \n    - !permit\n      role: !group delegation/consumers\n      privilege: [ read, execute ]\n      resource: *safe4-secrets\n\n  - !group \n    id: example-safe5-admins\n  \n  - !policy\n    id: example-safe5\n    owner: !group example-safe5-admins\n    body:\n    - &safe5-secrets\n      - !variable\n        id: secret1/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe5/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret1/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe5/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret2/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe5/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret2/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe5/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret3/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe5/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret3/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe5/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret4/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe5/secret4\n          mime_type: application/json\n\n      - !variable\n        id: secret4/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe5/secret4\n          mime_type: application/json\n\n    - !policy\n      id: delegation\n      body:\n      - !group\n        id: consumers\n    \n    - !permit\n      role: !group delegation/consumers\n      privilege: [ read, execute ]\n      resource: *safe5-secrets\n\n  - !group \n    id: example-safe6-admins\n  \n  - !policy\n    id: example-safe6\n    owner: !group example-safe6-admins\n    body:\n    - &safe6-secrets\n      - !variable\n        id: secret1/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe6/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret1/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe6/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret2/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe6/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret2/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe6/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret3/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe6/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret3/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe6/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret4/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe6/secret4\n          mime_type: application/json\n\n      - !variable\n        id: secret4/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe6/secret4\n          mime_type: application/json\n\n    - !policy\n      id: delegation\n      body:\n      - !group\n        id: consumers\n      \n    - !permit\n      role: !group delegation/consumers\n      privilege: [ read, execute ]\n      resource: *safe6-secrets\n\n  - !group \n    id: example-safe7-admins\n  \n  - !policy\n    id: example-safe7\n    owner: !group example-safe7-admins\n    body:\n    - &safe7-secrets\n      - !variable\n        id: secret1/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe7/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret1/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe7/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret2/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe7/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret2/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe7/secret2\n          mime_type: application/json\n          \n      - !variable\n        id: secret3/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe7/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret3/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe7/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret4/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe7/secret4\n          mime_type: application/json\n\n      - !variable\n        id: secret4/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe7/secret4\n          mime_type: application/json\n          \n    - !policy\n      id: delegation\n      body:\n      - !group\n        id: consumers\n      \n    - !permit\n      role: !group delegation/consumers\n      privilege: [ read, execute ]\n      resource: *safe7-secrets\n\n  - !group \n    id: example-safe8-admins\n  \n  - !policy\n    id: example-safe8\n    owner: !group example-safe8-admins\n    body:\n    - &safe8-secrets\n      - !variable\n        id: secret1/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe8/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret1/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe8/secret1\n          mime_type: application/json\n\n      - !variable\n        id: secret2/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe8/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret2/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe8/secret2\n          mime_type: application/json\n\n      - !variable\n        id: secret3/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe8/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret3/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe8/secret3\n          mime_type: application/json\n\n      - !variable\n        id: secret4/username\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe8/secret4\n          mime_type: application/json\n\n      - !variable\n        id: secret4/password\n        annotations:\n          cyberark-vault: 'true'\n          cyberark-vault/accounts: example-vault1/example-safe8/secret4\n          mime_type: application/json\n\n    - !policy\n      id: delegation\n      body:\n      - !group\n        id: consumers\n      \n    - !permit\n      role: !group delegation/consumers\n      privilege: [ read, execute ]\n      resource: *safe8-secrets"
												},
												"url": {
													"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
													"host": [
														"{{conjurEnterpriseHostname}}"
													],
													"path": [
														"policies",
														"{{conjurEnterpriseAccount}}",
														"policy",
														"{{conjurEnterprisePolicyID}}"
													]
												},
												"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
											},
											"response": []
										}
									]
								},
								{
									"name": "authenticators",
									"item": [
										{
											"name": "authn-aws",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Token token=\"{{conjurEnterpriseToken}}\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "#Load policy into conjur/authn-iam\n---\n- !policy\n  id: region1\n  body:\n  - !webservice\n\n  - !group consumers\n\n  - !permit\n    role: !group consumers\n    privilege: [ read, authenticate ]\n    resource: !webservice\n\n  - !webservice\n    id: status\n    annotations:\n      description: Status service to check that the authenticator is configured correctly\n\n  - !group\n    id: operators\n    annotations:\n      description: Group of users who can check the status of the authenticator\n\n  - !permit\n     role: !group operators\n     privilege: [ read ]\n     resource: !webservice status"
												},
												"url": {
													"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/conjur/authn-iam",
													"host": [
														"{{conjurEnterpriseHostname}}"
													],
													"path": [
														"policies",
														"{{conjurEnterpriseAccount}}",
														"policy",
														"conjur",
														"authn-iam"
													]
												},
												"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
											},
											"response": []
										},
										{
											"name": "authn-azure",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Token token=\"{{conjurEnterpriseToken}}\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "#Load policy into conjur/authn-azure\n---\n- !policy\n  id: region1\n  body:\n  - !webservice\n\n  - !variable\n    id: provider-uri\n\n  - !group\n    id: consumers\n    annotations:\n      description: Group of hosts that can authenticate using the authn-azure/<service-id> authenticator\n\n  - !permit\n    role: !group consumers\n    privilege: [ read, authenticate ]\n    resource: !webservice\n\n  - !webservice\n    id: status\n    annotations:\n      description: Status service to check that the authenticator is configured correctly\n\n  - !group\n    id: operators\n    annotations:\n      description: Group of users who can check the status of the authenticator\n\n  - !permit\n     role: !group operators\n     privilege: [ read ]\n     resource: !webservice status"
												},
												"url": {
													"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/conjur/authn-azure",
													"host": [
														"{{conjurEnterpriseHostname}}"
													],
													"path": [
														"policies",
														"{{conjurEnterpriseAccount}}",
														"policy",
														"conjur",
														"authn-azure"
													]
												},
												"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
											},
											"response": []
										},
										{
											"name": "authn-gcp",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Token token=\"{{conjurEnterpriseToken}}\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "#Load policy into conjur/authn-gcp\n---\n- !policy\n  id: region1\n  body:\n  - !webservice\n\n  - !group \n    id: consumers\n    annotations:\n      description: Group of hosts that can authenticate using the authn-gcp authenticator\n\n  - !permit\n    role: !group consumers\n    privilege: [ read, authenticate ]\n    resource: !webservice\n\n  - !webservice\n    id: status\n    annotations:\n      description: Status service to check that the authenticator is configured correctly\n\n  - !group\n    id: operators\n    annotations:\n      description: Group of users who can check the status of the authenticator\n\n  - !permit\n     role: !group operators\n     privilege: [ read ]\n     resource: !webservice status"
												},
												"url": {
													"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/conjur/authn-gcp",
													"host": [
														"{{conjurEnterpriseHostname}}"
													],
													"path": [
														"policies",
														"{{conjurEnterpriseAccount}}",
														"policy",
														"conjur",
														"authn-gcp"
													]
												},
												"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
											},
											"response": []
										},
										{
											"name": "authn-jwt-gitlab",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Token token=\"{{conjurEnterpriseToken}}\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "#Load policy into conjur/authn-jwt\n# This policy defines a JWT authenticator to be used with an instance of Gitlab\n---\n- !policy\n  id: gitlab1\n  body:\n  - !webservice\n\n  # If the JWKS service is publicly available, uncomment 'jwks-uri'.\n  # If the JWKS service is not available, uncomment 'public-keys'\n\n  - !variable\n    id: jwks-uri\n\n  # - !variable\n  #   id: public-keys\n\n  # This variable tells Conjur which claim in the JWT to use to determine the conjur host identity.\n  - !variable\n    id: token-app-property\n\n  # This variable is used with token-app-property. This variable will hold the conjur policy path that contains the conjur host identity found by looking at the claim entered in token-app-property.\n  - !variable\n    id: identity-path\n\n  # Uncomment ca-cert if the JWKS website cert isn't trusted by conjur\n\n  # - !variable\n  #   id: ca-cert\n\n  # This variable contains what \"iss\" in the JWT.\n  - !variable\n    id: issuer\n  \n  # This variable contains what \"aud\" is the JWT.\n  - !variable\n    id: audience\n\n  # - !variable\n  #   id: enforced-claims\n\n  # - !variable\n  #   id: claim-aliases\n\n  - !group\n    id: consumers\n\n  - !permit\n    role: !group consumers\n    privilege: [ read, authenticate ]\n    resource: !webservice\n\n  - !webservice\n    id: status\n    annotations:\n      description: Status service to check that the authenticator is configured correctly\n\n  - !group\n    id: operators\n    annotations:\n      description: Group of users who can check the status of the authenticator\n\n  - !permit\n     role: !group operators\n     privilege: [ read ]\n     resource: !webservice status"
												},
												"url": {
													"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/conjur/authn-jwt",
													"host": [
														"{{conjurEnterpriseHostname}}"
													],
													"path": [
														"policies",
														"{{conjurEnterpriseAccount}}",
														"policy",
														"conjur",
														"authn-jwt"
													]
												},
												"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
											},
											"response": []
										},
										{
											"name": "authn-jwt-jenkins",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Token token=\"{{conjurEnterpriseToken}}\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "#Load policy into conjur/authn-jwt\n# This policy defines a JWT authenticator to be used with an instance of Jenkins\n---\n- !policy\n  id: jenkins1\n  body:\n  - !webservice\n\n  # If the JWKS service is publicly available, uncomment 'jwks-uri'.\n  # If the JWKS service is not available, uncomment 'public-keys'\n\n  - !variable\n    id: jwks-uri\n\n  # - !variable\n  #   id: public-keys\n\n  # This variable tells Conjur which claim in the JWT to use to determine the conjur host identity.\n  - !variable\n    id: token-app-property\n\n  # This variable is used with token-app-property. This variable will hold the conjur policy path that contains the conjur host identity found by looking at the claim entered in token-app-property.\n  - !variable\n    id: identity-path\n\n  # Uncomment ca-cert if the JWKS website cert isn't trusted by conjur\n\n  # - !variable\n  #   id: ca-cert\n\n  # This variable contains what \"iss\" in the JWT.\n  - !variable\n    id: issuer\n  \n  # This variable contains what \"aud\" is the JWT.\n  - !variable\n    id: audience\n\n  # - !variable\n  #   id: enforced-claims\n\n  # - !variable\n  #   id: claim-aliases\n\n  - !group\n    id: consumers\n\n  - !permit\n    role: !group consumers\n    privilege: [ read, authenticate ]\n    resource: !webservice\n\n  - !webservice\n    id: status\n    annotations:\n      description: Status service to check that the authenticator is configured correctly\n\n  - !group\n    id: operators\n    annotations:\n      description: Group of users who can check the status of the authenticator\n\n  - !permit\n     role: !group operators\n     privilege: [ read ]\n     resource: !webservice status"
												},
												"url": {
													"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/conjur/authn-jwt",
													"host": [
														"{{conjurEnterpriseHostname}}"
													],
													"path": [
														"policies",
														"{{conjurEnterpriseAccount}}",
														"policy",
														"conjur",
														"authn-jwt"
													]
												},
												"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
											},
											"response": []
										},
										{
											"name": "authn-jwt-kubernetes",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Token token=\"{{conjurEnterpriseToken}}\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "#Load policy into conjur/authn-jwt\n# This policy defines a JWT authenticator to be used with an instance of Jenkins\n- !policy\n  id: k8s-cluster1\n  body:\n  - !webservice\n\n  # Uncomment one of following variables depending on the public availability\n  # of the Service Account Issuer Discovery service in Kubernetes \n  # If the service is publicly available, uncomment 'jwks-uri'.\n  # If the service is not available, uncomment 'public-keys'\n\n  # - !variable\n  #   id: jwks-uri\n\n  - !variable\n    id: public-keys\n\n  # This variable tells Conjur which claim in the JWT to use to determine the conjur host identity.\n  - !variable\n    id: token-app-property\n\n  # This variable is used with token-app-property. This variable will hold the conjur policy path that contains the conjur host identity found by looking at the claim entered in token-app-property.\n  - !variable\n    id: identity-path\n\n  # Uncomment ca-cert if the JWKS website cert isn't trusted by conjur\n\n  # - !variable\n  #   id: ca-cert\n\n  # This variable contains what \"iss\" in the JWT.\n  - !variable\n    id: issuer\n  \n  # This variable contains what \"aud\" is the JWT.\n  # - !variable\n  #   id: audience\n\n  # - !variable\n  #   id: enforced-claims\n\n  # - !variable\n  #   id: claim-aliases\n\n  - !group\n    id: consumers\n\n  - !permit\n    role: !group consumers\n    privilege: [ read, authenticate ]\n    resource: !webservice\n\n  - !webservice\n    id: status\n    annotations:\n      description: Status service to check that the authenticator is configured correctly\n\n  - !group\n    id: operators\n    annotations:\n      description: Group of users who can check the status of the authenticator\n\n  - !permit\n     role: !group operators\n     privilege: [ read ]\n     resource: !webservice status"
												},
												"url": {
													"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/conjur/authn-jwt",
													"host": [
														"{{conjurEnterpriseHostname}}"
													],
													"path": [
														"policies",
														"{{conjurEnterpriseAccount}}",
														"policy",
														"conjur",
														"authn-jwt"
													]
												},
												"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
											},
											"response": []
										},
										{
											"name": "authn-k8s",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Token token=\"{{conjurEnterpriseToken}}\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "#Load policy into conjur/authn-k8s\n---\n- !policy \n  id: cluster1\n  body:\n  - !webservice\n\n  - !variable\n    id: ca/key\n\n  - !variable \n    id: ca/cert\n\n  - !variable \n    id: kubernetes/service-account-token\n\n  - !variable \n    id: kubernetes/ca-cert\n\n  - !variable \n    id: kubernetes/api-url\n\n  - !group\n    id: consumers\n\n  - !permit\n    resource: !webservice\n    privilege: [ read, authenticate ]\n    role: !group consumers\n\n  - !webservice\n    id: status\n    annotations:\n      description: Status service to check that the authenticator is configured correctly\n\n  - !group\n    id: operators\n    annotations:\n      description: Group of users who can check the status of the authenticator\n\n  - !permit\n     role: !group operators\n     privilege: [ read ]\n     resource: !webservice status"
												},
												"url": {
													"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/conjur/authn-k8s",
													"host": [
														"{{conjurEnterpriseHostname}}"
													],
													"path": [
														"policies",
														"{{conjurEnterpriseAccount}}",
														"policy",
														"conjur",
														"authn-k8s"
													]
												},
												"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
											},
											"response": []
										},
										{
											"name": "authn-oidc",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Token token=\"{{conjurEnterpriseToken}}\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "#Load policy into conjur/authn-oidc\n---\n- !policy\n  id: identity-provider1\n  body:\n  - !webservice\n    annotations:\n      description: Authentication service for provider based on OpenID Connect.\n\n  - !variable\n    id: provider-uri\n\n  - !variable\n    id: id-token-user-property\n\n  - !group\n    id: consumers\n    annotations:\n      description: Group of users who can authenticate using the authn-oidc/<service-id> authenticator\n\n  - !permit\n    role: !group consumers\n    privilege: [ read, authenticate ]\n    resource: !webservice\n\n  - !webservice\n    id: status\n    annotations:\n      description: Status service to check that the authenticator is configured correctly\n\n  - !group\n    id: operators\n    annotations:\n      description: Group of users who can check the status of the authenticator\n\n  - !permit\n     role: !group operators\n     privilege: [ read ]\n     resource: !webservice status"
												},
												"url": {
													"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/conjur/authn-oidc",
													"host": [
														"{{conjurEnterpriseHostname}}"
													],
													"path": [
														"policies",
														"{{conjurEnterpriseAccount}}",
														"policy",
														"conjur",
														"authn-oidc"
													]
												},
												"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
											},
											"response": []
										},
										{
											"name": "seed-generation",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Token token=\"{{conjurEnterpriseToken}}\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "#Load policy into conjur/seed-generation\n- !webservice\n\n- !group\n  id: consumers\n\n- !permit\n  role: !group consumers\n  privilege: [ \"execute\" ]\n  resource: !webservice\n\n- !webservice\n  id: status\n  annotations:\n    description: Status service to check that the authenticator is configured correctly\n\n- !group\n  id: operators\n  annotations:\n    description: Group of users who can check the status of the authenticator\n\n- !permit\n    role: !group operators\n    privilege: [ read ]\n    resource: !webservice status"
												},
												"url": {
													"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/conjur/seed-generation",
													"host": [
														"{{conjurEnterpriseHostname}}"
													],
													"path": [
														"policies",
														"{{conjurEnterpriseAccount}}",
														"policy",
														"conjur",
														"seed-generation"
													]
												},
												"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
											},
											"response": []
										},
										{
											"name": "Enable Authenticator",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "Token token=\"{{conjurEnterpriseToken}}\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "enabled",
															"value": "true",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{conjurEnterpriseHostname}}/api/authn-jwt/jenkins1/conjur",
													"host": [
														"{{conjurEnterpriseHostname}}"
													],
													"path": [
														"api",
														"authn-jwt",
														"jenkins1",
														"conjur"
													]
												},
												"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
											},
											"response": []
										}
									]
								},
								{
									"name": "auto-failover",
									"item": [
										{
											"name": "1-cluster-auto-failover",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Token token=\"{{conjurEnterpriseToken}}\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "---\n- !policy\n    id: conjur/cluster/conjur-cluster1\n    annotations:\n      ttl: 500\n    body:\n    - !layer\n    - &hosts\n      - !host\n        id: <master_dns>\n      - !host\n        id: <standby1_dns>\n      - !host\n        id: <standby2_dns>\n    - !grant\n      role: !layer\n      member: *hosts"
												},
												"url": {
													"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
													"host": [
														"{{conjurEnterpriseHostname}}"
													],
													"path": [
														"policies",
														"{{conjurEnterpriseAccount}}",
														"policy",
														"{{conjurEnterprisePolicyID}}"
													]
												},
												"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
											},
											"response": []
										}
									]
								},
								{
									"name": "cd",
									"item": [
										{
											"name": "ansible",
											"item": [
												{
													"name": "1-ansible-automation-controller-team-1",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n---\n- !policy\n  id: cd/ansible/automation-controller-team-1\n  body:\n  - !group\n    id: ops\n\n  - &users\n    - !user \n      id: Jared\n  \n  - !grant\n    role: !group ops\n    members: *users\n  \n  - !group\n    id: managers\n\n  - &managers\n    - !user Keith \n\n  - !grant\n    role: !group managers\n    members: *managers"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": [
														{
															"name": "1-ansible-automation-controller-team-1",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "---\n- !policy\n  id: cd/ansible/automation-controller-team-1\n  body:\n  - !group\n    id: ops\n\n  - &users\n    - !user \n      id: Jared\n  \n  - !grant\n    role: !group ops\n    members: *users\n  \n  - !group\n    id: managers\n\n  - &managers\n    - !user Keith \n\n  - !grant\n    role: !group managers\n    members: *managers"
																},
																"url": {
																	"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
																	"host": [
																		"{{conjurEnterpriseHostname}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurEnterpriseAccount}}",
																		"policy",
																		"{{conjurEnterprisePolicyID}}"
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Server",
																	"value": "nginx"
																},
																{
																	"key": "Date",
																	"value": "Wed, 29 Jun 2022 20:20:15 GMT"
																},
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																},
																{
																	"key": "Transfer-Encoding",
																	"value": "chunked"
																},
																{
																	"key": "Connection",
																	"value": "keep-alive"
																},
																{
																	"key": "X-Frame-Options",
																	"value": "SAMEORIGIN"
																},
																{
																	"key": "X-XSS-Protection",
																	"value": "1; mode=block"
																},
																{
																	"key": "X-Content-Type-Options",
																	"value": "nosniff"
																},
																{
																	"key": "X-Download-Options",
																	"value": "noopen"
																},
																{
																	"key": "X-Permitted-Cross-Domain-Policies",
																	"value": "none"
																},
																{
																	"key": "Referrer-Policy",
																	"value": "strict-origin-when-cross-origin"
																},
																{
																	"key": "Vary",
																	"value": "Accept"
																},
																{
																	"key": "ETag",
																	"value": "W/\"69cbe70d022789e4e66cd76baa151feb\""
																},
																{
																	"key": "Cache-Control",
																	"value": "max-age=0, private, must-revalidate"
																},
																{
																	"key": "X-Request-Id",
																	"value": "619f984e-3435-4292-b706-2aa66805328c"
																},
																{
																	"key": "X-Runtime",
																	"value": "0.121786"
																}
															],
															"cookie": [],
															"body": "{\n    \"created_roles\": {\n        \"cyberark:user:Jared@cd-ansible-automation-controller-team-1\": {\n            \"id\": \"cyberark:user:Jared@cd-ansible-automation-controller-team-1\",\n            \"api_key\": \"39t71z6epn8xq15wew9223ekyez16wt729yve22b2d3tc6p33v2h7n\"\n        },\n        \"cyberark:user:Keith@cd-ansible-automation-controller-team-1\": {\n            \"id\": \"cyberark:user:Keith@cd-ansible-automation-controller-team-1\",\n            \"api_key\": \"3rqbj352qy71bb1x6y7hyekc241nx2geg23x8qan3f6pf1x279x4vz\"\n        }\n    },\n    \"version\": 22\n}"
														}
													]
												},
												{
													"name": "2-ansible-automation-controller-team-1-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n---\n- !policy\n  id: cd/ansible/automation-controller-team-1/controllers\n  owner: !group cd/ansible/automation-controller-team-1/managers\n  body:\n  - &test_environment\n    - !host\n      id: boise-controller\n      annotations:\n        team: automation-controller-team-1\n        ansible: true\n        location: datacenter9\n        environment: test\n\n  - !group test-controllers\n\n  - !grant\n    role: !group test-controllers\n    members: *test_environment\n      \n  - &production_environment\n    - !host\n      id: aws-controller\n      annotations:\n        team: automation-controller-team-1\n        ansible: true\n        location: aws\n        environment: prod\n\n    - !host\n      id: onprem-controller\n      annotations:\n        team: automation-controller-team-1\n        ansible: true\n        location: datacenter7\n        environment: prod\n  \n  - !group prod-controllers\n\n  - !grant\n    role: !group prod-controllers\n    members: *production_environment\n\n- !permit\n  role: !group cd/ansible/automation-controller-team-1/ops\n  privileges: [ read, update ]\n  resource: !policy cd/ansible/automation-controller-team-1/controllers"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": [
														{
															"name": "2-ansible-automation-controller-team-1-apps",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "---\n- !policy\n  id: cd/ansible/automation-controller-team-1/controllers\n  owner: !group /cd/ansible/automation-controller-team-1/managers\n  body:\n  - &test_environment\n    - !host\n      id: boise-controller\n      annotations:\n        team: automation-controller-team-1\n        ansible: true\n        location: datacenter9\n        environment: test\n\n  - !group test-controllers\n\n  - !grant\n    role: !group test-controllers\n    members: *test_environment\n      \n  - &production_environment\n    - !host\n      id: aws-controller\n      annotations:\n        team: automation-controller-team-1\n        ansible: true\n        location: aws\n        environment: prod\n\n    - !host\n      id: onprem-controller\n      annotations:\n        team: automation-controller-team-1\n        ansible: true\n        location: datacenter7\n        environment: prod\n  \n  - !group prod-controllers\n\n  - !grant\n    role: !group prod-controllers\n    members: *production_environment\n\n  - !permit\n    role: !group /cd/ansible/automation-controller-team-1/ops\n    privileges: [ read, update ]\n    resource: !policy"
																},
																"url": {
																	"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
																	"host": [
																		"{{conjurEnterpriseHostname}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurEnterpriseAccount}}",
																		"policy",
																		"{{conjurEnterprisePolicyID}}"
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Server",
																	"value": "nginx"
																},
																{
																	"key": "Date",
																	"value": "Wed, 29 Jun 2022 20:20:32 GMT"
																},
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																},
																{
																	"key": "Transfer-Encoding",
																	"value": "chunked"
																},
																{
																	"key": "Connection",
																	"value": "keep-alive"
																},
																{
																	"key": "X-Frame-Options",
																	"value": "SAMEORIGIN"
																},
																{
																	"key": "X-XSS-Protection",
																	"value": "1; mode=block"
																},
																{
																	"key": "X-Content-Type-Options",
																	"value": "nosniff"
																},
																{
																	"key": "X-Download-Options",
																	"value": "noopen"
																},
																{
																	"key": "X-Permitted-Cross-Domain-Policies",
																	"value": "none"
																},
																{
																	"key": "Referrer-Policy",
																	"value": "strict-origin-when-cross-origin"
																},
																{
																	"key": "Vary",
																	"value": "Accept"
																},
																{
																	"key": "ETag",
																	"value": "W/\"282048ff845555b901fa386cf769c7bc\""
																},
																{
																	"key": "Cache-Control",
																	"value": "max-age=0, private, must-revalidate"
																},
																{
																	"key": "X-Request-Id",
																	"value": "de0360dc-ce2b-475c-be9f-eb959a7db01c"
																},
																{
																	"key": "X-Runtime",
																	"value": "0.195478"
																}
															],
															"cookie": [],
															"body": "{\n    \"created_roles\": {\n        \"cyberark:host:cd/ansible/automation-controller-team-1/controllers/boise-controller\": {\n            \"id\": \"cyberark:host:cd/ansible/automation-controller-team-1/controllers/boise-controller\",\n            \"api_key\": \"1ygwwp81aqstbe23egmn32vyg11x5xjv703a6ja8518ddftn2jpr56x\"\n        },\n        \"cyberark:host:cd/ansible/automation-controller-team-1/controllers/aws-controller\": {\n            \"id\": \"cyberark:host:cd/ansible/automation-controller-team-1/controllers/aws-controller\",\n            \"api_key\": \"1hyr8gz2k3pgnzdspzy23kz6vhb24p06w53w733wr26mecyw25knvwv\"\n        },\n        \"cyberark:host:cd/ansible/automation-controller-team-1/controllers/onprem-controller\": {\n            \"id\": \"cyberark:host:cd/ansible/automation-controller-team-1/controllers/onprem-controller\",\n            \"api_key\": \"22qgagh32j2mvpgzhwxt5rd9gt1dzwczs1pr96163pr3c8x0ehyn\"\n        }\n    },\n    \"version\": 23\n}"
														}
													]
												},
												{
													"name": "3-ansible-dev-team-1",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n---\n- !policy\n  id: cd/ansible/dev-team-1\n  body:\n  - !group\n    id: devs\n  \n  - !group\n    id: managers\n\n  - &dev_users\n    - !user\n      id: Jose\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n\n  - &manager_users\n    - !user\n      id: Tristen\n    \n    - !grant\n      role: !group managers\n      members: *manager_users"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": [
														{
															"name": "3-ansible-dev-team-1",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "---\n- !policy\n  id: cd/ansible/dev-team-1\n  body:\n  - !group\n    id: devs\n  \n  - !group\n    id: managers\n\n  - &dev_users\n    - !user\n      id: Jose\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n\n  - &manager_users\n    - !user\n      id: Tristen\n    \n    - !grant\n      role: !group managers\n      members: *manager_users"
																},
																"url": {
																	"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
																	"host": [
																		"{{conjurEnterpriseHostname}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurEnterpriseAccount}}",
																		"policy",
																		"{{conjurEnterprisePolicyID}}"
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Server",
																	"value": "nginx"
																},
																{
																	"key": "Date",
																	"value": "Wed, 29 Jun 2022 20:20:47 GMT"
																},
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																},
																{
																	"key": "Transfer-Encoding",
																	"value": "chunked"
																},
																{
																	"key": "Connection",
																	"value": "keep-alive"
																},
																{
																	"key": "X-Frame-Options",
																	"value": "SAMEORIGIN"
																},
																{
																	"key": "X-XSS-Protection",
																	"value": "1; mode=block"
																},
																{
																	"key": "X-Content-Type-Options",
																	"value": "nosniff"
																},
																{
																	"key": "X-Download-Options",
																	"value": "noopen"
																},
																{
																	"key": "X-Permitted-Cross-Domain-Policies",
																	"value": "none"
																},
																{
																	"key": "Referrer-Policy",
																	"value": "strict-origin-when-cross-origin"
																},
																{
																	"key": "Vary",
																	"value": "Accept"
																},
																{
																	"key": "ETag",
																	"value": "W/\"7a9f7e86618ce47a38338dd508fed953\""
																},
																{
																	"key": "Cache-Control",
																	"value": "max-age=0, private, must-revalidate"
																},
																{
																	"key": "X-Request-Id",
																	"value": "91cd22ae-a641-4ab1-bd53-67466237705f"
																},
																{
																	"key": "X-Runtime",
																	"value": "0.130428"
																}
															],
															"cookie": [],
															"body": "{\n    \"created_roles\": {\n        \"cyberark:user:Jose@cd-ansible-dev-team-1\": {\n            \"id\": \"cyberark:user:Jose@cd-ansible-dev-team-1\",\n            \"api_key\": \"1z9fhqw1d56qd82gj7qvrkjtf3y3e1x8te5pegm7vfnesc2wdfv0e\"\n        },\n        \"cyberark:user:Tristen@cd-ansible-dev-team-1\": {\n            \"id\": \"cyberark:user:Tristen@cd-ansible-dev-team-1\",\n            \"api_key\": \"2esyb82cy3cp11ke3jw33x8rp1b3j7h4713mhsttk1z1xfc2143xvad\"\n        }\n    },\n    \"version\": 24\n}"
														}
													]
												},
												{
													"name": "4-ansible-dev-team-1-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n---\n- !policy\n  id: cd/ansible/dev-team-1/applications\n  owner: !group cd/ansible/dev-team-1/managers \n  body:\n  - &test_environment\n    - !host\n      id: app1\n      annotations:\n        team: dev-team-1\n        ansible: true\n        location: datacenter3\n        environment: test\n\n  - !group test-apps\n\n  - !grant\n    role: !group test-apps\n    members: *test_environment\n      \n  - &production_environment\n    - !host\n      id: app2\n      annotations:\n        team: dev-team-1\n        ansible: true\n        location: gcp\n        environment: prod\n  \n  - !group prod-apps\n\n  - !grant\n    role: !group prod-apps\n    members: *production_environment\n\n- !permit\n  role: !group cd/ansible/dev-team-1/devs\n  privileges:\n      - read\n      - update\n  resource: !policy cd/ansible/dev-team-1/applications"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": [
														{
															"name": "4-ansible-dev-team-1-apps",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "---\n- !policy\n  id: cd/ansible/dev-team-1/applications\n  owner: !group /cd/ansible/dev-team-1/managers \n  body:\n  - &test_environment\n    - !host\n      id: app1\n      annotations:\n        team: dev-team-1\n        ansible: true\n        location: datacenter3\n        environment: test\n\n  - !group test-apps\n\n  - !grant\n    role: !group test-apps\n    members: *test_environment\n      \n  - &production_environment\n    - !host\n      id: app2\n      annotations:\n        team: dev-team-1\n        ansible: true\n        location: gcp\n        environment: prod\n  \n  - !group prod-apps\n\n  - !grant\n    role: !group prod-apps\n    members: *production_environment\n\n  - !permit\n    role: !group /cd/ansible/dev-team-1/devs\n    privileges:\n        - read\n        - update\n    resource: !policy"
																},
																"url": {
																	"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
																	"host": [
																		"{{conjurEnterpriseHostname}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurEnterpriseAccount}}",
																		"policy",
																		"{{conjurEnterprisePolicyID}}"
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Server",
																	"value": "nginx"
																},
																{
																	"key": "Date",
																	"value": "Wed, 29 Jun 2022 20:20:53 GMT"
																},
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																},
																{
																	"key": "Transfer-Encoding",
																	"value": "chunked"
																},
																{
																	"key": "Connection",
																	"value": "keep-alive"
																},
																{
																	"key": "X-Frame-Options",
																	"value": "SAMEORIGIN"
																},
																{
																	"key": "X-XSS-Protection",
																	"value": "1; mode=block"
																},
																{
																	"key": "X-Content-Type-Options",
																	"value": "nosniff"
																},
																{
																	"key": "X-Download-Options",
																	"value": "noopen"
																},
																{
																	"key": "X-Permitted-Cross-Domain-Policies",
																	"value": "none"
																},
																{
																	"key": "Referrer-Policy",
																	"value": "strict-origin-when-cross-origin"
																},
																{
																	"key": "Vary",
																	"value": "Accept"
																},
																{
																	"key": "ETag",
																	"value": "W/\"bd59f224eeaaca1e7221bc4e659af98d\""
																},
																{
																	"key": "Cache-Control",
																	"value": "max-age=0, private, must-revalidate"
																},
																{
																	"key": "X-Request-Id",
																	"value": "168f33cd-d9c4-4918-8b9b-d149f4188f5b"
																},
																{
																	"key": "X-Runtime",
																	"value": "0.135749"
																}
															],
															"cookie": [],
															"body": "{\n    \"created_roles\": {\n        \"cyberark:host:cd/ansible/dev-team-1/applications/app1\": {\n            \"id\": \"cyberark:host:cd/ansible/dev-team-1/applications/app1\",\n            \"api_key\": \"dks1gh9f1bz311anpx82421h25212qtwa2xb4bz12y7z4b226aczr\"\n        },\n        \"cyberark:host:cd/ansible/dev-team-1/applications/app2\": {\n            \"id\": \"cyberark:host:cd/ansible/dev-team-1/applications/app2\",\n            \"api_key\": \"1559wde3qjpqmk26dqvje35f1n4kyh5yxy2gm06xr37q3ahk26n1sm1\"\n        }\n    },\n    \"version\": 25\n}"
														}
													]
												},
												{
													"name": "5-ansible-dev-team-2",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n---\n- !policy\n  id: cd/ansible/dev-team-2\n  body:\n  - !group\n    id: devs\n  \n  - !group\n    id: managers\n\n  - &dev_users\n    - !user\n      id: John\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n\n  - &manager_users\n    - !user\n      id: Peter\n    \n    - !grant\n      role: !group managers\n      members: *manager_users"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": [
														{
															"name": "5-ansible-dev-team-2",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "---\n- !policy\n  id: cd/ansible/dev-team-2\n  body:\n  - !group\n    id: devs\n  \n  - !group\n    id: managers\n\n  - &dev_users\n    - !user\n      id: John\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n\n  - &manager_users\n    - !user\n      id: Peter\n    \n    - !grant\n      role: !group managers\n      members: *manager_users"
																},
																"url": {
																	"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
																	"host": [
																		"{{conjurEnterpriseHostname}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurEnterpriseAccount}}",
																		"policy",
																		"{{conjurEnterprisePolicyID}}"
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Server",
																	"value": "nginx"
																},
																{
																	"key": "Date",
																	"value": "Wed, 29 Jun 2022 20:21:08 GMT"
																},
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																},
																{
																	"key": "Transfer-Encoding",
																	"value": "chunked"
																},
																{
																	"key": "Connection",
																	"value": "keep-alive"
																},
																{
																	"key": "X-Frame-Options",
																	"value": "SAMEORIGIN"
																},
																{
																	"key": "X-XSS-Protection",
																	"value": "1; mode=block"
																},
																{
																	"key": "X-Content-Type-Options",
																	"value": "nosniff"
																},
																{
																	"key": "X-Download-Options",
																	"value": "noopen"
																},
																{
																	"key": "X-Permitted-Cross-Domain-Policies",
																	"value": "none"
																},
																{
																	"key": "Referrer-Policy",
																	"value": "strict-origin-when-cross-origin"
																},
																{
																	"key": "Vary",
																	"value": "Accept"
																},
																{
																	"key": "ETag",
																	"value": "W/\"f949278eb5331ae33567b999a95dc7c8\""
																},
																{
																	"key": "Cache-Control",
																	"value": "max-age=0, private, must-revalidate"
																},
																{
																	"key": "X-Request-Id",
																	"value": "af3c6d05-1edf-4663-beaf-a557dfec3c48"
																},
																{
																	"key": "X-Runtime",
																	"value": "0.105910"
																}
															],
															"cookie": [],
															"body": "{\n    \"created_roles\": {\n        \"cyberark:user:John@cd-ansible-dev-team-2\": {\n            \"id\": \"cyberark:user:John@cd-ansible-dev-team-2\",\n            \"api_key\": \"3mga39q4zf9333cgqvhr6n9hak2zsx98kp5qthr39jks5t2mttnj8\"\n        },\n        \"cyberark:user:Peter@cd-ansible-dev-team-2\": {\n            \"id\": \"cyberark:user:Peter@cd-ansible-dev-team-2\",\n            \"api_key\": \"gqph30wc2078y8s90g23sfy3p3rc4f6p3ggrk0018k0t692zy1hp3\"\n        }\n    },\n    \"version\": 26\n}"
														}
													]
												},
												{
													"name": "6-ansible-dev-team-2-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n---\n- !policy\n  id: cd/ansible/dev-team-2/applications\n  owner: !group cd/ansible/dev-team-2/managers\n  body:\n  - &test_environment\n    - !host\n      id: app1\n      annotations:\n        team: dev-team-2\n        ansible: true\n        location: datacenter9\n        environment: test\n\n  - !group test-apps\n\n  - !grant\n    role: !group test-apps\n    members: *test_environment\n      \n  - &production_environment\n    - !host\n      id: app2\n      annotations:\n        team: dev-team-2\n        ansible: true\n        location: aws\n        environment: prod\n  \n  - !group prod-apps\n\n  - !grant\n    role: !group prod-apps\n    members: *production_environment\n  \n- !permit\n  role: !group cd/ansible/dev-team-2/devs\n  privileges:\n      - read\n      - update\n  resource: !policy cd/ansible/dev-team-2/applications"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": [
														{
															"name": "6-ansible-dev-team-2-apps",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "---\n- !policy\n  id: cd/ansible/dev-team-2/applications\n  owner: !group /cd/ansible/dev-team-2/managers\n  body:\n  - &test_environment\n    - !host\n      id: app1\n      annotations:\n        team: dev-team-2\n        ansible: true\n        location: datacenter9\n        environment: test\n\n  - !group test-apps\n\n  - !grant\n    role: !group test-apps\n    members: *test_environment\n      \n  - &production_environment\n    - !host\n      id: app2\n      annotations:\n        team: dev-team-2\n        ansible: true\n        location: aws\n        environment: prod\n  \n  - !group prod-apps\n\n  - !grant\n    role: !group prod-apps\n    members: *production_environment\n  \n  - !permit\n    role: !group /cd/ansible/dev-team-2/devs\n    privileges:\n        - read\n        - update\n    resource: !policy"
																},
																"url": {
																	"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
																	"host": [
																		"{{conjurEnterpriseHostname}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurEnterpriseAccount}}",
																		"policy",
																		"{{conjurEnterprisePolicyID}}"
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Server",
																	"value": "nginx"
																},
																{
																	"key": "Date",
																	"value": "Wed, 29 Jun 2022 20:21:13 GMT"
																},
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																},
																{
																	"key": "Transfer-Encoding",
																	"value": "chunked"
																},
																{
																	"key": "Connection",
																	"value": "keep-alive"
																},
																{
																	"key": "X-Frame-Options",
																	"value": "SAMEORIGIN"
																},
																{
																	"key": "X-XSS-Protection",
																	"value": "1; mode=block"
																},
																{
																	"key": "X-Content-Type-Options",
																	"value": "nosniff"
																},
																{
																	"key": "X-Download-Options",
																	"value": "noopen"
																},
																{
																	"key": "X-Permitted-Cross-Domain-Policies",
																	"value": "none"
																},
																{
																	"key": "Referrer-Policy",
																	"value": "strict-origin-when-cross-origin"
																},
																{
																	"key": "Vary",
																	"value": "Accept"
																},
																{
																	"key": "ETag",
																	"value": "W/\"26ce3c5fb1548589728d148542613b92\""
																},
																{
																	"key": "Cache-Control",
																	"value": "max-age=0, private, must-revalidate"
																},
																{
																	"key": "X-Request-Id",
																	"value": "a69aba2b-0854-45f6-90aa-4b1acf7227b1"
																},
																{
																	"key": "X-Runtime",
																	"value": "0.127793"
																}
															],
															"cookie": [],
															"body": "{\n    \"created_roles\": {\n        \"cyberark:host:cd/ansible/dev-team-2/applications/app1\": {\n            \"id\": \"cyberark:host:cd/ansible/dev-team-2/applications/app1\",\n            \"api_key\": \"3zn2sdm1d8s0pq3mn5x1h2myphke2a2vs2be4n7nv168dvh1f8va2p\"\n        },\n        \"cyberark:host:cd/ansible/dev-team-2/applications/app2\": {\n            \"id\": \"cyberark:host:cd/ansible/dev-team-2/applications/app2\",\n            \"api_key\": \"naqnh610dt7vf2c6ahwx2b7mtfvkg9ev92sd3w683eh1t961kk1w8d\"\n        }\n    },\n    \"version\": 27\n}"
														}
													]
												},
												{
													"name": "7-ansible-grants",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into the data branch\n- !grant\n  role: !group example-vault1/example-safe1/delegation/consumers\n  members:\n    - !group cd/ansible/dev-team-1/applications/test-apps\n    - !group cd/ansible/dev-team-2/applications/test-apps\n\n- !grant\n  role: !group example-vault1/example-safe2/delegation/consumers\n  members:\n    - !group cd/ansible/dev-team-1/applications/prod-apps\n    - !group cd/ansible/dev-team-2/applications/prod-apps\n\n- !grant\n  role: !group example-vault1/example-safe3/delegation/consumers\n  members:\n    - !group cd/ansible/automation-controller-team-1/controllers/test-controllers\n\n- !grant\n  role: !group example-vault1/example-safe4/delegation/consumers\n  members:\n    - !group cd/ansible/automation-controller-team-1/controllers/prod-controllers"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": [
														{
															"name": "7-ansible-grants",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "- !grant\n  role: !group vault1/LOBUser1/Safe7/consumers\n  members:\n    - !group cd/ansible/dev-team-1/applications/test-apps\n    - !group cd/ansible/dev-team-2/applications/test-apps\n\n- !grant\n  role: !group vault1/LOBUser1/Safe3/consumers\n  members:\n    - !group cd/ansible/dev-team-1/applications/prod-apps\n    - !group cd/ansible/dev-team-2/applications/prod-apps\n\n- !grant\n  role: !group vault1/LOBUser1/Safe4/consumers\n  members:\n    - !group cd/ansible/automation-controller-team-1/controllers/test-controllers\n\n- !grant\n  role: !group vault1/LOBUser1/Safe6/consumers\n  members:\n    - !group cd/ansible/automation-controller-team-1/controllers/prod-controllers"
																},
																"url": {
																	"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
																	"host": [
																		"{{conjurEnterpriseHostname}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurEnterpriseAccount}}",
																		"policy",
																		"{{conjurEnterprisePolicyID}}"
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Server",
																	"value": "nginx"
																},
																{
																	"key": "Date",
																	"value": "Wed, 29 Jun 2022 20:21:19 GMT"
																},
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																},
																{
																	"key": "Transfer-Encoding",
																	"value": "chunked"
																},
																{
																	"key": "Connection",
																	"value": "keep-alive"
																},
																{
																	"key": "X-Frame-Options",
																	"value": "SAMEORIGIN"
																},
																{
																	"key": "X-XSS-Protection",
																	"value": "1; mode=block"
																},
																{
																	"key": "X-Content-Type-Options",
																	"value": "nosniff"
																},
																{
																	"key": "X-Download-Options",
																	"value": "noopen"
																},
																{
																	"key": "X-Permitted-Cross-Domain-Policies",
																	"value": "none"
																},
																{
																	"key": "Referrer-Policy",
																	"value": "strict-origin-when-cross-origin"
																},
																{
																	"key": "Vary",
																	"value": "Accept"
																},
																{
																	"key": "ETag",
																	"value": "W/\"0f9c84014ef6d24dd201b5aac91489b4\""
																},
																{
																	"key": "Cache-Control",
																	"value": "max-age=0, private, must-revalidate"
																},
																{
																	"key": "X-Request-Id",
																	"value": "0f2e4198-3a14-4837-ae76-e6c20fdeda5a"
																},
																{
																	"key": "X-Runtime",
																	"value": "0.107578"
																}
															],
															"cookie": [],
															"body": "{\n    \"created_roles\": {},\n    \"version\": 28\n}"
														}
													]
												}
											]
										},
										{
											"name": "kubernetes",
											"item": [
												{
													"name": "1-k8s-follower-auto-configuration",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load policy into data branch\n#\n# This is a template explaining all of the host configuration options.\n# - !host\n#   id: <application-name>\n#   annotations:\n#     authn-k8s/namespace: <namespace of app>\n#                    OR\n#     authn-k8s/namespace-label-selector: \"Key=Value\"\n#     authn-k8s/deployment: <deployment name of app>\n#     authn-k8s/deployment-config: <deployment-config name (Openshift)>\n#     authn-k8s/pod: <pod name>\n#     authn-k8s/stateful-set: <stateful-set name>\n#     authn-k8s/service-account: <service account of the app>\n#     authn-k8s/authentication-container-name: <name of the authenticator container in the application pod>\n\n---\n- !policy\n  id: cd/kubernetes/k8s-follower-auto-configuration/cert-authn-cluster1\n  body:\n  - !group\n\n  - &follower-service-accounts\n    - !host\n      id: follower\n      annotations:\n        authn-k8s/namespace: conjur\n        authn-k8s/service-account: conjur-cluster\n        authn-k8s/authentication-container-name: configurator\n  \n  - !grant \n    role: !group\n    members: *follower-service-accounts\n\n# Example Payload of JWT for a mounted service account token\n# {\n#   \"aud\": [\n#     \"https://kubernetes.default.svc.cluster.local\"\n#   ],\n#   \"exp\": 1680268878,\n#   \"iat\": 1648732878,\n#   \"iss\": \"https://kubernetes.default.svc.cluster.local\",\n#   \"kubernetes.io\": {\n#     \"namespace\": \"conjur\",\n#     \"pod\": {\n#       \"name\": \"k8s-jwt-app1-6679d7b48-sk8br\",\n#       \"uid\": \"77495a36-9fa7-422a-8422-f2ed73916c8b\"\n#     },\n#     \"serviceaccount\": {\n#       \"name\": \"jwt-app-account\",\n#       \"uid\": \"f5dcf3f4-e8b5-4d83-a631-499d1f97324b\"\n#     },\n#     \"warnafter\": 1648736485\n#   },\n#   \"nbf\": 1648732878,\n#   \"sub\": \"system:serviceaccount:conjur:jwt-app-account\"\n# }\n\n- !policy\n  id: cd/kubernetes/k8s-follower-auto-configuration/jwt-authn-k8s-cluster1\n  body:\n  - !group\n\n  - &follower-service-accounts-jwt\n    - !host\n      id: system:serviceaccount:conjur:conjur-cluster\n      annotations:\n        authn-jwt/k8s-cluster1/kubernetes.io/namespace: conjur\n        authn-jwt/k8s-cluster1/kubernetes.io/service-account: conjur-cluster\n  \n  - !grant \n    role: !group\n    members: *follower-service-accounts-jwt\n\n"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "2-k8s-dev-team-1",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "---\n- !policy\n  id: cd/kubernetes/dev-team-1\n  body:\n  - !group\n    id: devs\n\n  - &dev_users\n    - !user\n      id: Bobby\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n  \n  - !group\n    id: managers\n\n  - &manager_users\n    - !user\n      id: Naomi\n\n  - !grant\n    role: !group managers\n    members: *manager_users"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "3-k8s-dev-team-1-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# This is a template explaining all of the host configuration options.\n# - !host\n#   id: <application-name>\n#   annotations:\n#     authn-k8s/namespace: <namespace of app>\n#     authn-k8s/deployment: <deployment name of app>\n#     authn-k8s/deployment-config: <deployment-config name (Openshift)>\n#     authn-k8s/pod: <pod name>\n#     authn-k8s/stateful-set: <stateful-set name>\n#     authn-k8s/service-account: <service account of the app>\n#     authn-k8s/authentication-container-name: <name of the authenticator container in the application pod>\n#     authn-k8s/namespace-label-selector: \"Key=Value\"        \n\n---\n- !policy\n  id: cd/kubernetes/dev-team-1/applications\n  owner: !group cd/kubernetes/dev-team-1/managers\n  body:\n  - &dev_team_1_api_apps\n   - !host\n      id: api-app1\n      annotations:\n        authn-k8s/namespace: conjur\n        authn-k8s/deployment: api-app1\n        authn-k8s/authentication-container-name: authenticator \n  \n  - !group\n    id: api-apps\n\n  - !grant\n    role: !group api-apps\n    members: *dev_team_1_api_apps\n  \n  - &dev_team_1_secrets_provider_apps\n    - !host\n      id: k8s-secrets-app1\n      annotations:\n        authn-k8s/namespace: conjur\n        authn-k8s/service-account: k8s-secrets-provider-account\n        authn-k8s/authentication-container-name: k8s-secrets-provider\n    \n    - !host\n      id: k8s-secrets-app2\n      annotations:\n        authn-k8s/namespace: conjur\n        authn-k8s/service-account: k8s-secrets-provider-account\n        authn-k8s/authentication-container-name: k8s-secrets-provider-namespace\n  \n  - !group\n    id: k8s-secrets-apps\n\n  - !grant\n    role: !group k8s-secrets-apps\n    members: *dev_team_1_secrets_provider_apps\n\n  - &dev_team_1_secretless_apps\n    - !host\n      id: secretless-app1\n      annotations:\n        authn-k8s/namespace: conjur\n        authn-k8s/service-account: secretless-account\n        authn-k8s/authentication-container-name: secretless\n  \n  - !group\n    id: secretless-apps\n\n  - !grant\n    role: !group secretless-apps\n    members: *dev_team_1_secretless_apps\n\n  - &dev_team_1_push_to_file_apps\n    - !host\n      id: push-to-file-app1\n      annotations:\n        authn-k8s/namespace: conjur\n        authn-k8s/service-account: k8s-secrets-provider-push-to-file-account\n        authn-k8s/authentication-container-name: push-to-file\n  \n  - !group\n    id: push-to-file-apps\n\n  - !grant\n    role: !group push-to-file-apps\n    members: *dev_team_1_push_to_file_apps\n\n- !permit\n  role: !group cd/kubernetes/dev-team-1/devs\n  privileges: [ read, update ]\n  resource: !policy cd/kubernetes/dev-team-1/applications"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "4-k8s-dev-team-2",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "---\n- !policy\n  id: cd/kubernetes/dev-team-2\n  body:\n  - !group\n    id: devs\n\n  - &dev_users\n    - !user\n      id: Alex\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n  \n  - !group\n    id: managers\n\n  - &manager_users\n    - !user\n      id: Amos\n\n  - !grant\n    role: !group managers\n    members: *manager_users"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "5-k8s-dev-team-2-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# This is a template explaining all of the host configuration options.\n# - !host\n#   id: <application-name>\n#   annotations:\n#     authn-k8s/namespace: <namespace of app>\n#     authn-k8s/deployment: <deployment name of app>\n#     authn-k8s/deployment-config: <deployment-config name (Openshift)>\n#     authn-k8s/pod: <pod name>\n#     authn-k8s/stateful-set: <stateful-set name>\n#     authn-k8s/service-account: <service account of the app>\n#     authn-k8s/authentication-container-name: <name of the authenticator container in the application pod>\n\n---\n- !policy\n  id: cd/kubernetes/dev-team-2/applications\n  owner: !group cd/kubernetes/dev-team-2/managers\n  body:\n  - &dev_team_1_api_apps\n    - !host\n      id: api-app1\n      annotations:\n        authn-k8s/namespace: conjur\n        authn-k8s/deployment: api-app1\n        authn-k8s/authentication-container-name: authenticator\n  \n  - !group\n    id: api-apps\n\n  - !grant\n    role: !group api-apps\n    members: *dev_team_2_api_apps\n  \n  - &dev_team_2_secrets_provider_apps\n    - !host\n      id: k8s-secrets-app1\n      annotations:\n        authn-k8s/namespace: conjur\n        authn-k8s/service-account: k8s-secrets-provider-account\n        authn-k8s/authentication-container-name: k8s-secrets-provider\n    \n    - !host\n      id: k8s-secrets-app2\n      annotations:\n        authn-k8s/namespace: conjur\n        authn-k8s/service-account: k8s-secrets-provider-account\n        authn-k8s/authentication-container-name: k8s-secrets-provider-namespace\n  \n  - !group\n    id: k8s-secrets-apps\n\n  - !grant\n    roles:\n      - !group k8s-secrets-apps\n    members: *dev_team_2_secrets_provider_apps\n\n  - &dev_team_2_secretless_apps\n    - !host\n      id: secretless-app1\n      annotations:\n        authn-k8s/namespace: conjur\n        authn-k8s/service-account: secretless-account\n        authn-k8s/authentication-container-name: secretless\n  \n  - !group\n    id: secretless-apps\n\n  - !grant\n    roles:\n      - !group secretless-apps\n    members: *dev_team_2_secretless_apps\n\n  - &dev_team_2_push_to_file_apps\n    - !host\n      id: push-to-file-app1\n      annotations:\n        authn-k8s/namespace: conjur\n        authn-k8s/service-account: k8s-secrets-provider-push-to-file-account\n        authn-k8s/authentication-container-name: push-to-file\n  \n  - !group\n    id: push-to-file-apps\n\n  - !grant\n    roles:\n      - !group push-to-file-apps\n    members: *dev_team_2_push_to_file_apps\n\n- !permit\n  roles:\n    - !group cd/kubernetes/dev-team-2/devs\n  privileges: [ read, update ]\n  resources:\n    - !policy cd/kubernetes/dev-team-2/applications"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "6-k8s-dev-team-3",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "---\n- !policy\n  id: cd/kubernetes/dev-team-3\n  body:\n  - !group\n    id: devs\n\n  - &dev_users\n    - !user\n      id: Peaches\n  \n  - !grant\n    roles:\n      - !group devs\n    members: *dev_users\n  \n  - !group\n    id: managers\n\n  - &manager_users\n    - !user\n      id: Johnny\n\n  - !grant\n    roles:\n      - !group managers\n    members: *manager_users"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "7-k8s-dev-team-3-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "---\n- !policy\n  id: cd/kubernetes/dev-team-3/applications\n  owner: !group cd/kubernetes/dev-team-3/managers\n  body:\n  - &dev_team_3_jwt_apps\n    - !host\n      id: system:serviceaccount:conjur:jwt-app-account\n      annotations:\n        authn-jwt/k8s-cluster1/kubernetes.io/namespace: conjur\n        authn-jwt/k8s-cluster1/kubernetes.io/serviceaccount/name: jwt-app-account\n  \n  - !group\n    id: jwt-apps\n\n  - !grant\n    roles:\n      - !group jwt-apps\n    members: *dev_team_3_jwt_apps\n\n- !permit\n  roles:\n    - !group cd/kubernetes/dev-team-3/devs\n  privileges: [ read, update ]\n  resources:\n    - !policy cd/kubernetes/dev-team-3/applications\n\n\n# Example Payload of JWT for a mounted service account token\n# {\n#   \"aud\": [\n#     \"https://kubernetes.default.svc.cluster.local\"\n#   ],\n#   \"exp\": 1680268878,\n#   \"iat\": 1648732878,\n#   \"iss\": \"https://kubernetes.default.svc.cluster.local\",\n#   \"kubernetes.io\": {\n#     \"namespace\": \"conjur\",\n#     \"pod\": {\n#       \"name\": \"k8s-jwt-app1-6679d7b48-sk8br\",\n#       \"uid\": \"77495a36-9fa7-422a-8422-f2ed73916c8b\"\n#     },\n#     \"serviceaccount\": {\n#       \"name\": \"jwt-app-account\",\n#       \"uid\": \"f5dcf3f4-e8b5-4d83-a631-499d1f97324b\"\n#     },\n#     \"warnafter\": 1648736485\n#   },\n#   \"nbf\": 1648732878,\n#   \"sub\": \"system:serviceaccount:conjur:jwt-app-account\"\n# }\n\n# Example Payload of JWT for an unmounted service account token\n# {\n#   \"iss\": \"kubernetes/serviceaccount\",\n#   \"kubernetes.io/serviceaccount/namespace\": \"conjur\",\n#   \"kubernetes.io/serviceaccount/secret.name\": \"conjur-cluster-token-r4qmp\",\n#   \"kubernetes.io/serviceaccount/service-account.name\": \"conjur-cluster\",\n#   \"kubernetes.io/serviceaccount/service-account.uid\": \"cb40fbdc-2b56-4057-8ab7-04c6873c6dc7\",\n#   \"sub\": \"system:serviceaccount:conjur:conjur-cluster\"\n# }"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "8-k8s-grants-follower-seed",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load policy into conjur/seed-generation\n- !grant\n  roles:\n    - !group consumers\n  members:\n    - !group /data/cd/kubernetes/k8s-follower-auto-configuration/cert-authn-cluster1\n    - !group /data/cd/kubernetes/k8s-follower-auto-configuration/jwt-authn-k8s-cluster1"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/conjur/seed-generation",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"conjur",
																"seed-generation"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "9-k8s-grants-cert-authenticator",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into conjur/authn-k8s/cluster1 branch\n- !grant\n  roles:\n    - !group consumers\n  members:\n    - !group /data/cd/kubernetes/k8s-follower-auto-configuration/cert-authn-cluster1\n    - !group /data/cd/kubernetes/dev-team-1/applications/api-apps\n    - !group /data/cd/kubernetes/dev-team-1/applications/k8s-secrets-apps\n    - !group /data/cd/kubernetes/dev-team-1/applications/secretless-apps\n    - !group /data/cd/kubernetes/dev-team-1/applications/push-to-file-apps\n    - !group /data/cd/kubernetes/dev-team-2/applications/api-apps\n    - !group /data/cd/kubernetes/dev-team-2/applications/k8s-secrets-apps\n    - !group /data/cd/kubernetes/dev-team-2/applications/secretless-apps\n    - !group /data/cd/kubernetes/dev-team-2/applications/push-to-file-apps"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/conjur/authn-k8s/cluster1",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"conjur",
																"authn-k8s",
																"cluster1"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "10-k8s-grants-jwt-authenticator",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into conjur/authn-jwt/k8s-cluster1 branch\n- !grant\n  roles:\n    - !group consumers\n  members:\n    - !group /data/cd/kubernetes/k8s-follower-auto-configuration/jwt-authn-k8s-cluster1\n    - !group /data/cd/kubernetes/dev-team-3/applications/jwt-apps"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/conjur/authn-jwt/k8s-cluster1",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"conjur",
																"authn-jwt",
																"k8s-cluster1"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "11-k8s-grants-cert-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n- !grant\n  roles:\n    - !group example-vault1/example-safe1/delegation/consumers\n  members:\n    - !group cd/kubernetes/dev-team-1/applications/api-apps\n    - !group cd/kubernetes/dev-team-2/applications/push-to-file-apps\n\n- !grant\n  roles:\n    - !group example-vault1/example-safe2/delegation/consumers\n  members:\n    - !group cd/kubernetes/dev-team-1/applications/k8s-secrets-apps\n    - !group cd/kubernetes/dev-team-2/applications/secretless-apps\n\n- !grant\n  roles:\n    - !group example-vault1/example-safe3/delegation/consumers\n  members:\n    - !group cd/kubernetes/dev-team-1/applications/secretless-apps\n    - !group cd/kubernetes/dev-team-2/applications/k8s-secrets-apps\n  \n- !grant\n  roles:\n    - !group example-vault1/example-safe4/delegation/consumers\n  members:\n    - !group cd/kubernetes/dev-team-1/applications/push-to-file-apps\n    - !group cd/kubernetes/dev-team-2/applications/api-apps"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "12-k8s-grants-jwt-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "- !grant\n  roles:\n    - !group example-vault1/example-safe1/delegation/consumers\n  members:\n    - !group cd/kubernetes/dev-team-3/applications/jwt-apps"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "13-k8s-delete-public-keys",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "- !delete\n  record: !variable conjur/authn-jwt/{{conjurK8sCluster3ServiceId}}/public-keys"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "14-k8s-delete-jwks-uri",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "- !delete\n  record: !variable conjur/authn-jwt/{{conjurK8sCluster2ServiceId}}/jwks-uri\n\n- !delete\n  record: !variable conjur/authn-jwt/{{conjurK8sCluster2ServiceId}}/ca-certs"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "15-Delete-Follower-Decomposed-Host",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "- !delete\n  record: !host cd/kubernetes/k8s-follower-auto-configuration/cert-authn-cluster1/follower-decomposed\n"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												}
											]
										},
										{
											"name": "tanzu",
											"item": [
												{
													"name": "1-tanzu-dev-team-1",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "---\n- !policy\n  id: cd/tanzu/dev-team-1\n  body:\n  - !group\n    id: devs\n\n  - &dev_users\n    - !user\n      id: Donny\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n  \n  - !group\n    id: managers\n\n  - &manager_users\n    - !user\n      id: Kelli\n\n  - !grant\n    role: !group managers\n    members: *manager_users\n\n  - &service_brokers\n    - !host\n      id: conjur-service-broker-foundation1\n      annotations:\n        platform: tanzu\n    \n    - !host\n      id: conjur-service-broker-foundation2\n      annotations:\n        platform: tanzu\n  \n  - !group conjur-service-brokers\n\n  - !grant\n    role: !group conjur-service-brokers\n    members: *service_brokers"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "2-tanzu-dev-team-1-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "---\n# this policy will be automatically populated by the service-broker once an application is bound\n- &policies\n  - !policy\n    id: cd/tanzu/dev-team-1/foundation1\n    owner: !group /cd/tanzu/dev-team-1/managers\n\n  # this policy will be automatically populated by the service-broker once an application is bound\n  - !policy\n    id: cd/tanzu/dev-team1/foundation2\n    owner: !group /cd/tanzu/dev-team-1/managers\n\n- !permit\n  role: !group /cd/tanzu/dev-team-1/devs\n  privileges: [ read, update ]\n  resources: *policies\n\n- !permit\n  role: !group /cd/tanzu/dev-team-1/conjur-service-brokers\n  privileges: [ read, update, create ]\n  resources: *policies"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "3-tanzu-dev-team-2",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "---\n- !policy\n  id: cd/tanzu/dev-team-2\n  body:\n  - !group\n    id: devs\n\n  - &dev_users\n    - !user\n      id: Declan\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n  \n  - !group\n    id: managers\n\n  - &manager_users\n    - !user\n      id: Starr\n\n  - !grant\n    role: !group managers\n    members: *manager_users\n\n  - &service_brokers\n    - !host\n      id: conjur-service-broker-foundation1\n      annotations:\n        platform: tanzu\n    \n    - !host\n      id: conjur-service-broker-foundation2\n      annotations:\n        platform: tanzu\n  \n  - !group conjur-service-brokers\n\n  - !grant\n    role: !group conjur-service-brokers\n    members: *service_brokers"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "4-tanzu-dev-team-2-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "---\n# this policy will be automatically populated by the service-broker once an application is bound\n- &policies\n  - !policy\n    id: cd/tanzu/dev-team-2/foundation1\n    owner: !group /cd/tanzu/dev-team-2/managers\n\n  # this policy will be automatically populated by the service-broker once an application is bound\n  - !policy\n    id: cd/tanzu/dev-team2/foundation2\n    owner: !group /cd/tanzu/dev-team-2/managers\n\n- !permit\n  role: !group /cd/tanzu/dev-team-2/devs\n  privileges: [ read, update ]\n  resources: *policies\n\n- !permit\n  role: !group /cd/tanzu/dev-team-2/conjur-service-brokers\n  privileges: [ read, update, create ]\n  resources: *policies"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "5-tanzu-grants",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Grants for Tanzu apps can't be created until the service-broker populates the policies. \n\n# - !grant:\n#   role: !group vault1/LOBUser1/Safe6/consumers\n#   resources:\n#     - !host cd/tanzu/dev-team-1/foundation1/<<org guid>>/<<space guid>>/<<app guid>>\n#     - !host cd/tanzu/dev-team-1/foundation2/<<org guid>>/<<space guid>>/<<app guid>>\n\n# - !grant:\n#   role: !group vault1/LOBUser1/Safe1/consumers\n#   resources:\n#     - !host cd/tanzu/dev-team-2/foundation1/<<org guid>>/<<space guid>>/<<app guid>>\n#     - !host cd/tanzu/dev-team-2/foundation2/<<org guid>>/<<space guid>>/<<app guid>>"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "ci",
									"item": [
										{
											"name": "gitlab",
											"item": [
												{
													"name": "1-gitlab-dev-team-1",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n---\n- !policy\n  id: ci/gitlab/dev-team-1\n  body:\n  - !group\n    id: devs\n\n  - &dev_users\n    - !user\n      id: Denise\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n  \n  - !group\n    id: managers\n\n  - &manager_users\n    - !user\n      id: Holly\n\n  - !grant\n    role: !group managers\n    members: *manager_users"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "2-gitlab-dev-team-2",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n---\n- !policy\n  id: ci/gitlab/dev-team-2\n  body:\n  - !group\n    id: devs\n\n  - &dev_users\n    - !user\n      id: Dylan\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n  \n  - !group\n    id: managers\n\n  - &manager_users\n    - !user\n      id: Jeremy\n\n  - !grant\n    role: !group managers\n    members: *manager_users"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "3-gitlab-projects",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "---\n- !policy\n  id: ci/gitlab/projects\n  body:\n  - &dev_team_1_job_hosts\n    - !host\n      id: Dev-Team-1/Job1\n      annotations:\n        authn-jwt/gitlab1/namnespace_path: Dev-Team-1\n\n  - !group\n    id: dev-team-1-jobs\n\n  - !grant\n    role: !group dev-team-1-jobs\n    members: *dev_team_1_job_hosts\n    \n \n  - &dev_team_2_job_hosts\n    - !host\n      id: Dev-Team-2/Job2\n      annotations:\n        authn-jwt/gitlab1/namespace_path: Dev-Team-2\n\n  - !group\n    id: dev-team-2-jobs\n\n  - !grant\n    role: !group dev-team-2-jobs\n    members: *dev_team_2_job_hosts\n\n- !permit\n  role: !group ci/gitlab/dev-team-1/devs\n  privileges: [ read, update ]\n  resource: !policy ci/gitlab/projects\n\n- !permit\n  role: !group ci/gitlab/dev-team-2/devs\n  privileges: [ read, update ]\n  resource: !policy ci/gitlab/projects\n\n- !permit\n  role: !group ci/gitlab/dev-team-1/managers\n  privileges: [ read, update, create ]\n  resource: !policy ci/gitlab/projects\n\n- !permit\n  role: !group ci/gitlab/dev-team-2/managers\n  privileges: [ read, update, create ]\n  resource: !policy ci/gitlab/projects"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "4-gitlab-grants-authenticator",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into conjur/authn-jwt/gitlab1 branch\n- !grant\n  role: !group consumers\n  members: \n    - !group /data/ci/gitlab/projects/dev-team-1-jobs\n    - !group /data/ci/gitlab/projects/dev-team-2-jobs"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/conjur/authn-jwt/gitlab1",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"conjur",
																"authn-jwt",
																"gitlab1"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "5-gitlab-grants-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n- !grant\n  role: !group example-vault1/example-safe1/delegation/consumers\n  member: !group ci/gitlab/projects/dev-team-1-jobs\n\n- !grant\n  role: !group example-vault1/example-safe2/delegation/consumers\n  member: !group ci/gitlab/projects/dev-team-2-jobs"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												}
											]
										},
										{
											"name": "jenkins",
											"item": [
												{
													"name": "1-jenkins-dev-team-1",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n---\n- !policy\n  id: ci/jenkins/dev-team-1\n  body:\n  - !group\n    id: devs\n\n  - &dev_users\n    - !user\n      id: Chris\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n  \n  - !group\n    id: managers\n\n  - &manager_users\n    - !user\n      id: Heather\n\n  - !grant\n    role: !group managers\n    members: *manager_users"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "2-jenkins-dev-team-2",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n---\n- !policy\n  id: ci/jenkins/dev-team-2\n  body:\n  - !group\n    id: devs\n\n  - &dev_users\n    - !user\n      id: Patrick\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n  \n  - !group\n    id: managers\n\n  - &manager_users\n    - !user\n      id: Michael\n\n  - !grant\n    role: !group managers\n    members: *manager_users\n"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "3-jenkins-projects",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n---\n- !policy\n  id: ci/jenkins/projects\n  body:\n  - &dev_team_1_job_hosts\n    - !host\n      id: Dev-Team-1/Job1\n      annotations:\n        authn-jwt/jenkins1/jenkins_task_noun: Build\n        authn-jwt/jenkins1/jenkins_parent_full_name: Dev-Team-1\n\n  - !group\n    id: dev-team-1-jobs\n\n  - !grant\n    role: !group dev-team-1-jobs\n    members: *dev_team_1_job_hosts\n    \n  - &dev_team_1_folder_host\n    - !host\n      id: Dev-Team-1\n      annotations:\n        authn-jwt/jenkins1/jenkins_task_noun: Build\n  \n  - !group\n    id: dev-team-1-folder\n\n  - !grant\n    role: !group dev-team-1-folder\n    members: *dev_team_1_folder_host\n\n  - &dev_team_2_job_hosts\n    - !host\n      id: Dev-Team-2/Job2\n      annotations:\n        authn-jwt/jenkins1/jenkins_task_noun: Build\n        authn-jwt/jenkins1/jenkins_parent_full_name: Dev-Team-2\n\n  - !group\n    id: dev-team-2-jobs\n\n  - !grant\n    role: !group dev-team-2-jobs\n    members: *dev_team_2_job_hosts\n    \n  - &dev_team_2_folder_host\n    - !host\n      id: Dev-Team-2\n      annotations:\n        authn-jwt/jenkins1/jenkins_task_noun: Build\n  \n  - !group\n    id: dev-team-2-folder\n\n  - !grant\n    role: !group dev-team-2-folder\n    members: *dev_team_2_folder_host\n\n- !permit\n  role: !group ci/jenkins/dev-team-1/devs\n  privileges: [ read, update ]\n  resource: !policy ci/jenkins/projects\n\n- !permit\n  role: !group ci/jenkins/dev-team-2/devs\n  privileges: [ read, update ]\n  resource: !policy ci/jenkins/projects\n\n- !permit\n  role: !group ci/jenkins/dev-team-1/managers\n  privileges: [ read, update, create ]\n  resource: !policy ci/jenkins/projects\n\n- !permit\n  role: !group ci/jenkins/dev-team-2/managers\n  privileges: [ read, update, create ]\n  resource: !policy ci/jenkins/projects"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "4-jenkins-grants-authenticator",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into c branch\n- !grant\n  role: !group consumers\n  members: \n    - !group /data/ci/jenkins/projects/dev-team-1-jobs\n    - !group /data/ci/jenkins/projects/dev-team-1-folder\n    - !group /data/ci/jenkins/projects/dev-team-2-jobs\n    - !group /data/ci/jenkins/projects/dev-team-2-folder"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/conjur/authn-jwt/jenkins1",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"conjur",
																"authn-jwt",
																"jenkins1"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "5-jenkins-grants-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n- !grant\n  role: !group example-vault1/example-safe1/delegation/consumers\n  member: !group ci/jenkins/projects/dev-team-1-folder\n\n- !grant\n  role: !group example-vault1/example-safe2/delegation/consumers\n  member: !group ci/jenkins/projects/dev-team-1-jobs\n\n- !grant\n  role: !group example-vault1/example-safe3/delegation/consumers\n  member: !group ci/jenkins/projects/dev-team-2-jobs"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "cloud",
									"item": [
										{
											"name": "aws",
											"item": [
												{
													"name": "1-aws-dev-team-1",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load in data branch\n---\n- !policy\n  id: cloud/aws/dev-team-1\n  body:\n  - !group\n    id: devs\n\n  - &dev_users\n    - !user\n      id: Buster\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n  \n  - !group\n    id: managers\n\n  - &manager_users\n    - !user\n      id: Arthur\n\n  - !grant\n    role: !group managers\n    members: *manager_users"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "2-aws-dev-team-1-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load in data branch\n---\n- !policy\n  id: cloud/aws/dev-team-1/applications\n  owner: !group cloud/aws/dev-team-1/managers \n  annotations:\n    aws: true\n  body:\n  - &dev_team_1_ec2_apps\n  # The host's name has to follow the format: \"AccountID\"/\"IAMRoleName\"\n    - !host\n      id: 735280068473/ConjurAWSRole\n      annotations:\n        aws: ec2\n    \n  - !group\n    id: ec2-apps\n\n  - !grant\n    role: !group ec2-apps\n    members: *dev_team_1_ec2_apps"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "3-aws-dev-team-2",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load in data branch\n---\n- !policy\n  id: cloud/aws/dev-team-2\n  body:\n  - !group\n    id: devs\n\n  - &dev_users\n    - !user\n      id: Francine\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n  \n  - !group\n    id: managers\n\n  - &manager_users\n    - !user\n      id: Misty\n\n  - !grant\n    role: !group managers\n    members: *manager_users"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "4-aws-dev-team-2-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load in data branch\n---\n- !policy\n  id: cloud/aws/dev-team-2/applications\n  owner: !group cloud/aws/dev-team-2/managers \n  annotations:\n    aws: true\n  body:\n  # The host's name has to follow the format: \"AccountID\"/\"IAMRoleName\"\n  - &dev_team_2_lambda_apps\n    - !host\n      id: 735280068473/ConjurAWSRole\n      annotations:\n        aws: lambda\n    \n  - !group\n    id: lambda-apps\n\n  - !grant\n    role: !group lambda-apps\n    members: *dev_team_2_lambda_apps"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "5-aws-grants-authenticator",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into conjur/authn-iam/region1 branch\n- !grant\n  roles:\n    - !group consumers\n  members:\n    - !group /data/cloud/aws/dev-team-1/applications/ec2-apps\n    - !group /data/cloud/aws/dev-team-2/applications/lambda-apps"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "6-aws-grants-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load in data branch\n- !grant\n  roles:\n    - !group example-vault1/example-safe1/delegation/consumers\n  members:\n    - !group cloud/aws/dev-team-1/applications/ec2-apps\n\n- !grant\n  roles:\n    - !group example-vault1/example-safe2/delegation/consumers\n  members:\n    - !group cloud/aws/dev-team-2/applications/lambda-apps"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												}
											]
										},
										{
											"name": "azure",
											"item": [
												{
													"name": "Baird",
													"item": [
														{
															"name": "Baird App(s)",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into data branch\n#\n# The hosts in the policy need to have this format:\n# - !host\n#   id: <name>\n#   annotations:\n#     azure: \"app services\"\n#     authn-azure/subscription-id: <subscription-id>\n#     authn-azure/resource-group: <resource-group>\n#     # authn-azure/user-assigned-identity: <user-assigned managed identity>\n#     # OR\n#     # authn-azure/system-assigned-identity: <Object ID>\n    \n---\n- !policy\n  id: cloud/azure/baird/applications\n  body:\n  - &baird_function_apps\n    - !host\n      id: function-app1\n      annotations:\n        azure: function\n        authn-azure/subscription-id: 9fa1403b-8759-4a08-a96c-75c886f0216c\n        authn-azure/resource-group: rg-ops-vaultpoc-dev-ncus\n    \n  - !group\n    id: function-apps\n\n  - !grant\n    role: !group function-apps\n    members: *baird_function_apps"
																},
																"url": {
																	"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
																	"host": [
																		"{{conjurEnterpriseHostname}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurEnterpriseAccount}}",
																		"policy",
																		"{{conjurEnterprisePolicyID}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": [
																{
																	"name": "Baird Host",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Authorization",
																				"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "# Load into data branch\n#\n# The hosts in the policy need to have this format:\n# - !host\n#   id: <name>\n#   annotations:\n#     azure: \"app services\"\n#     authn-azure/subscription-id: <subscription-id>\n#     authn-azure/resource-group: <resource-group>\n#     # authn-azure/user-assigned-identity: <user-assigned managed identity>\n#     # OR\n#     # authn-azure/system-assigned-identity: <Object ID>\n    \n---\n- !policy\n  id: cloud/azure/baird/applications\n  body:\n  - &baird_function_apps\n    - !host\n      id: function-app1\n      annotations:\n        azure: function\n        authn-azure/subscription-id: 9fa1403b-8759-4a08-a96c-75c886f0216c\n        authn-azure/resource-group: rg-ops-vaultpoc-dev-ncus\n    \n  - !group\n    id: function-apps\n\n  - !grant\n    role: !group function-apps\n    members: *baird_function_apps"
																		},
																		"url": {
																			"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
																			"host": [
																				"{{conjurEnterpriseHostname}}"
																			],
																			"path": [
																				"policies",
																				"{{conjurEnterpriseAccount}}",
																				"policy",
																				"{{conjurEnterprisePolicyID}}"
																			]
																		}
																	},
																	"status": "Created",
																	"code": 201,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Server",
																			"value": "nginx"
																		},
																		{
																			"key": "Date",
																			"value": "Thu, 22 Jun 2023 17:46:51 GMT"
																		},
																		{
																			"key": "Content-Type",
																			"value": "application/json; charset=utf-8"
																		},
																		{
																			"key": "Transfer-Encoding",
																			"value": "chunked"
																		},
																		{
																			"key": "Connection",
																			"value": "keep-alive"
																		},
																		{
																			"key": "X-Frame-Options",
																			"value": "SAMEORIGIN"
																		},
																		{
																			"key": "X-XSS-Protection",
																			"value": "1; mode=block"
																		},
																		{
																			"key": "X-Content-Type-Options",
																			"value": "nosniff"
																		},
																		{
																			"key": "X-Download-Options",
																			"value": "noopen"
																		},
																		{
																			"key": "X-Permitted-Cross-Domain-Policies",
																			"value": "none"
																		},
																		{
																			"key": "Referrer-Policy",
																			"value": "strict-origin-when-cross-origin"
																		},
																		{
																			"key": "Vary",
																			"value": "Accept"
																		},
																		{
																			"key": "ETag",
																			"value": "W/\"dd8c958953959e1b197fba8112f219d5\""
																		},
																		{
																			"key": "Cache-Control",
																			"value": "max-age=0, private, must-revalidate"
																		},
																		{
																			"key": "X-Request-Id",
																			"value": "3f5ec6c5-7a0e-4364-94a2-7d2d9ac5cf98"
																		},
																		{
																			"key": "X-Runtime",
																			"value": "0.261005"
																		}
																	],
																	"cookie": [],
																	"body": "{\n    \"created_roles\": {\n        \"baird:host:data/cloud/azure/baird/applications/function-app1\": {\n            \"id\": \"baird:host:data/cloud/azure/baird/applications/function-app1\",\n            \"api_key\": \"gedqcnkbgwz93ydsmkm29wrvsw23777kb1r4dbet1nbesde1v8r9ps\"\n        }\n    },\n    \"version\": 5\n}"
																}
															]
														},
														{
															"name": "Baird App(s) Grant(s)",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "# Load into data branch\n- !grant\n  roles:\n    - !group example-vault1/example-safe1/delegation/consumers\n  members:\n    - !group cloud/azure/baird/applications/function-apps"
																},
																"url": {
																	"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
																	"host": [
																		"{{conjurEnterpriseHostname}}"
																	],
																	"path": [
																		"policies",
																		"{{conjurEnterpriseAccount}}",
																		"policy",
																		"{{conjurEnterprisePolicyID}}"
																	]
																},
																"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
															},
															"response": []
														}
													]
												},
												{
													"name": "1-azure-dev-team-1",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n---\n- !policy\n  id: cloud/azure/dev-team-1\n  body:\n  - !group\n    id: devs\n\n  - &dev_users\n    - !user\n      id: Butters\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n  \n  - !group\n    id: managers\n\n  - &manager_users\n    - !user\n      id: Paulie\n\n  - !grant\n    role: !group managers\n    members: *manager_users"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "2-azure-dev-team-1-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n#\n# The hosts in the policy need to have this format:\n# - !host\n#   id: <name>\n#   annotations:\n#     azure: \"app services\"\n#     authn-azure/subscription-id: <subscription-id>\n#     authn-azure/resource-group: <resource-group>\n#     # authn-azure/user-assigned-identity: <user-assigned managed identity>\n#     # OR\n#     # authn-azure/system-assigned-identity: <Object ID>\n    \n---\n- !policy\n  id: cloud/azure/dev-team-1/applications\n  owner: !group cloud/azure/dev-team-1/managers \n  body:\n  - &dev_team_1_vm_apps\n    - !host\n      id: vm-app1\n      annotations:\n        azure: VM\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n        # authn-azure/user-assigned-identity: <user-assigned managed identity>\n        # authn-azure/system-assigned-identity: <Object ID>\n    \n  - !group\n    id: vm-apps\n\n  - !grant\n    role: !group vm-apps\n    members: *dev_team_1_vm_apps\n\n  - &dev_team_1_app_services_apps\n    - !host\n      id: app-services-app1\n      annotations:\n        azure: \"app services\"\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n        # authn-azure/user-assigned-identity: <user-assigned managed identity>\n        # authn-azure/system-assigned-identity: <Object ID>\n    \n  - !group\n    id: app-services-apps\n\n  - !grant\n    role: !group app-services-apps\n    members: *dev_team_1_app_services_apps\n\n  - &dev_team_1_function_apps\n    - !host\n      id: function-app1\n      annotations:\n        azure: function\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n        # authn-azure/user-assigned-identity: <user-assigned managed identity>\n        # authn-azure/system-assigned-identity: <Object ID>\n    \n  - !group\n    id: function-apps\n\n  - !grant\n    role: !group function-apps\n    members: *dev_team_1_function_apps\n\n  - &dev_team_1_container_apps\n    - !host\n      id: container-app1\n      annotations:\n        azure: container\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n        # authn-azure/user-assigned-identity: <user-assigned managed identity>\n        # authn-azure/system-assigned-identity: <Object ID>\n    \n  - !group\n    id: container-apps\n\n  - !grant\n    role: !group container-apps\n    members: *dev_team_1_container_apps"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "3-azure-dev-team-2",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n---\n- !policy\n  id: cloud/azure/dev-team-2\n  body:\n  - !group\n    id: devs\n\n  - &dev_users\n    - !user\n      id: Kenny\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n  \n  - !group\n    id: managers\n\n  - &manager_users\n    - !user\n      id: Kristen\n\n  - !grant\n    role: !group managers\n    members: *manager_users"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "4-azure-dev-team-2-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n#\n# The hosts in the policy need to have this format:\n# - !host\n#   id: <name>\n#   annotations:\n#     azure: \"app services\"\n#     authn-azure/subscription-id: <subscription-id>\n#     authn-azure/resource-group: <resource-group>\n#     # authn-azure/user-assigned-identity: <user-assigned managed identity>\n#     # OR\n#     # authn-azure/system-assigned-identity: <Object ID>\n    \n---\n- !policy\n  id: cloud/azure/dev-team-2/applications\n  owner: !group cloud/azure/dev-team-2/managers \n  body:\n  - &dev_team_2_vm_apps\n    - !host\n      id: vm-app1\n      annotations:\n        azure: VM\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n        # authn-azure/user-assigned-identity: <user-assigned managed identity>\n        # authn-azure/system-assigned-identity: <Object ID>\n    \n  - !group\n    id: vm-apps\n\n  - !grant\n    role: !group vm-apps\n    members: *dev_team_2_vm_apps\n\n  - &dev_team_2_app_services_apps\n    - !host\n      id: app-services-app1\n      annotations:\n        azure: \"app services\"\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n        # authn-azure/user-assigned-identity: <user-assigned managed identity>\n        # authn-azure/system-assigned-identity: <Object ID>\n    \n  - !group\n    id: app-services-apps\n\n  - !grant\n    role: !group app-services-apps\n    members: *dev_team_2_app_services_apps\n\n  - &dev_team_1_function_apps\n    - !host\n      id: function-app1\n      annotations:\n        azure: function\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n        # authn-azure/user-assigned-identity: <user-assigned managed identity>\n        # authn-azure/system-assigned-identity: <Object ID>\n    \n  - !group\n    id: function-apps\n\n  - !grant\n    role: !group function-apps\n    members: *dev_team_2_function_apps\n\n  - &dev_team_2_container_apps\n    - !host\n      id: container-app1\n      annotations:\n        azure: container\n        authn-azure/subscription-id: <subscription-id>\n        authn-azure/resource-group: <resource-group>\n        # authn-azure/user-assigned-identity: <user-assigned managed identity>\n        # authn-azure/system-assigned-identity: <Object ID>\n    \n  - !group\n    id: container-apps\n\n  - !grant\n    role: !group container-apps\n    members: *dev_team_2_container_apps"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "5-azure-grants-authenticator",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into conjur/authn-azure/region1 branch\n- !grant\n  roles:\n    - !group consumers\n  members:\n    - !group /data/cloud/azure/dev-team-1/applications/vm-apps\n    - !group /data/cloud/azure/dev-team-1/applications/app-services-apps\n    - !group /data/cloud/azure/dev-team-1/applications/function-apps\n    - !group /data/cloud/azure/dev-team-1/applications/container-apps\n    - !group /data/cloud/azure/dev-team-2/applications/vm-apps\n    - !group /data/cloud/azure/dev-team-2/applications/app-services-apps\n    - !group /data/cloud/azure/dev-team-2/applications/function-apps\n    - !group /data/cloud/azure/dev-team-2/applications/container-apps"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/conjur/authn-azure/region1",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"conjur",
																"authn-azure",
																"region1"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "6-azure-grants-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n- !grant\n  roles:\n    - !group example-vault1/example-safe1/delegation/consumers\n  members:\n    - !group cloud/azure/dev-team-1/applications/vm-apps\n    - !group cloud/azure/dev-team-1/applications/app-services-apps\n    - !group cloud/azure/dev-team-1/applications/function-apps\n    - !group cloud/azure/dev-team-1/applications/container-apps\n\n- !grant\n  roles:\n    - !group example-vault1/example-safe2/delegation/consumers\n  members:\n    - !group cloud/azure/dev-team-2/applications/vm-apps\n    - !group cloud/azure/dev-team-2/applications/app-services-apps\n    - !group cloud/azure/dev-team-2/applications/function-apps\n    - !group cloud/azure/dev-team-2/applications/container-apps"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												}
											]
										},
										{
											"name": "gcp",
											"item": [
												{
													"name": "1-gcp-dev-team-1",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "---\n- !policy\n  id: cloud/gcp/dev-team-1\n  body:\n  - !group\n    id: devs\n\n  - &dev_users\n    - !user\n      id: Hector\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n  \n  - !group\n    id: managers\n\n  - &manager_users\n    - !user\n      id: Vito\n\n  - !grant\n    role: !group managers\n    members: *manager_users"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "2-gcp-dev-team-1-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# The hosts in the policy need to have this format:\n# - !host\n#   id: <host-id>\n#   annotations:\n#     authn-gcp/instance-name: <instance-name>\n#     authn-gcp/project-id: <project-id>\n#     authn-gcp/service-account-id: <service-account-id>\n#     authn-gcp/service-account-email: <service-account-email>\n---\n- !policy\n  id: cloud/gcp/dev-team-1/applications\n  owner: !group cloud/gcp/dev-team-1/managers \n  body:\n  - &dev_team_1_compute_apps\n    - !host\n      id: compute-app1\n      annotations:\n        authn-gcp/instance-name: <instance-name>\n        authn-gcp/project-id: <project-id>\n        authn-gcp/service-account-id: <service-account-id>\n        authn-gcp/service-account-email: <service-account-email>\n        gcp: compute\n    \n  - !group\n    id: compute-apps\n\n  - !grant\n    role: !group compute-apps\n    members: *dev_team_1_compute_apps\n\n  - &dev_team_1_cloud_function_apps\n    - !host\n      id: cloud-function-app1\n      annotations:\n        authn-gcp/instance-name: <instance-name>\n        authn-gcp/project-id: <project-id>\n        authn-gcp/service-account-id: <service-account-id>\n        authn-gcp/service-account-email: <service-account-email>\n        gcp: cloud-function\n    \n  - !group\n    id: cloud-function-apps\n\n  - !grant\n    role: !group cloud-function-apps\n    members: *dev_team_1_cloud_function_apps\n"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "3-gcp-dev-team-2",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "---\n- !policy\n  id: cloud/gcp/dev-team-2\n  body:\n  - !group\n    id: devs\n\n  - &dev_users\n    - !user\n      id: Alison\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n  \n  - !group\n    id: managers\n\n  - &manager_users\n    - !user\n      id: Tanya\n\n  - !grant\n    role: !group managers\n    members: *manager_users"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "4-gcp-dev-team-2-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# The hosts in the policy need to have this format:\n# - !host\n#   id: <host-id>\n#   annotations:\n#     authn-gcp/instance-name: <instance-name>\n#     authn-gcp/project-id: <project-id>\n#     authn-gcp/service-account-id: <service-account-id>\n#     authn-gcp/service-account-email: <service-account-email>\n---\n- !policy\n  id: cloud/gcp/dev-team-2/applications\n  owner: !group cloud/gcp/dev-team-2/managers \n  body:\n  - &dev_team_1_compute_apps\n    - !host\n      id: compute-app1\n      annotations:\n        authn-gcp/instance-name: <instance-name>\n        authn-gcp/project-id: <project-id>\n        authn-gcp/service-account-id: <service-account-id>\n        authn-gcp/service-account-email: <service-account-email>\n        gcp: compute\n    \n  - !group\n    id: compute-apps\n\n  - !grant\n    role: !group compute-apps\n    members: *dev_team_1_compute_apps\n\n  - &dev_team_1_cloud_function_apps\n    - !host\n      id: cloud-function-app1\n      annotations:\n        authn-gcp/instance-name: <instance-name>\n        authn-gcp/project-id: <project-id>\n        authn-gcp/service-account-id: <service-account-id>\n        authn-gcp/service-account-email: <service-account-email>\n        gcp: cloud-function\n    \n  - !group\n    id: cloud-function-apps\n\n  - !grant\n    role: !group cloud-function-apps\n    members: *dev_team_1_cloud_function_apps"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "5-gcp-grants-authenticator",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into conjur/authn-gcp/region1 branch\n- !grant\n  roles:\n    - !group consumers\n  members:\n    - !group /data/cloud/gcp/dev-team-1/applications/compute-apps\n    - !group /data/cloud/gcp/dev-team-1/applications/cloud-function-apps\n    - !group /data/cloud/gcp/dev-team-2/applications/compute-apps\n    - !group /data/cloud/gcp/dev-team-2/applications/cloud-function-apps"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/conjur/authn-gcp/region1",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"conjur",
																"authn-gcp",
																"region1"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "6-gcp-grants-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n- !grant\n  roles:\n    - !group example-vault1/example-safe3/delegation/consumers\n  members:\n    - !group cloud/gcp/dev-team-1/applications/compute-apps\n    - !group cloud/gcp/dev-team-1/applications/cloud-function-apps\n\n\n- !grant\n  roles:\n    - !group example-vault1/example-safe4/delegation/consumers\n  members:\n    - !group cloud/gcp/dev-team-2/applications/compute-apps\n    - !group cloud/gcp/dev-team-2/applications/cloud-function-apps"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "web",
									"item": [
										{
											"name": "oidc",
											"item": [
												{
													"name": "1-oidc-dev-team-1",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n---\n- !policy\n  id: web/oidc/dev-team-1\n  body:\n  - !group\n    id: devs\n\n  - &dev_users\n    - !user\n      id: Lainey\n  \n  - !grant\n    role: !group devs\n    members: *dev_users\n  \n  - !group\n    id: managers\n\n  - &manager_users\n    - !user\n      id: Jimbo\n\n  - !grant\n    role: !group managers\n    members: *manager_users"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "2-oidc-dev-team-1-apps",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load into data branch\n---\n- !policy\n  id: web/oidc/dev-team-1/applications\n  owner: !group web/oidc/dev-team-1/managers\n  body:\n  - &dev_team_1_oidc_apps\n    - !host\n      id: oidc-app1\n\n  - !group\n    id: oidc-apps\n\n  - !grant\n    role: !group oidc-apps\n    members: *dev_team_1_oidc_apps\n  \n- !permit\n  role: !group web/oidc/dev-team-1/devs\n  privileges: [ read, update ]\n  resource: !policy web/oidc/dev-team-1/applications"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "3-oidc-grants",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "# Load in conjur/authn-oidc/identity-provider1 branch\n- !grant\n  role: !group consumers\n  members: \n    - !group web/oidc/dev-team-1/devs"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/conjur/authn-oidc/identity-provider1",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"conjur",
																"authn-oidc",
																"identity-provider1"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Load Required Sample Policy Variables",
							"item": [
								{
									"name": "Kubernetes",
									"item": [
										{
											"name": "authn-k8s/cluster1",
											"item": [
												{
													"name": "Load Kuberentes CA Cert",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "-----BEGIN CERTIFICATE-----\nMIIC/jCCAeagAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl\ncm5ldGVzMB4XDTIzMDUwMzE1MzU0OVoXDTMzMDQzMDE1MzU0OVowFTETMBEGA1UE\nAxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALx7\nMcV2ir1Pn4RCdYp6nDilBJRtVK3Rv/LOrQYM5+3VOVNln4SUiKj9k0dbwI+vk4Lf\nw534V/5NwCwhAw/AQdl8bEsaQTTQmnNZwiXy9zP/lYT5PBfQRhd9Sx1C3TuTItMU\noxpHyysSEroJc4bcYuiXQemA1DsZj+cop9aP8Ki4QvpaxNAVEekxbwTKhGMRcoFu\nSd7Qd3UVO/VJamu33H4Rf5zTSJlv8Tf0T8uEp6WJupAkePZrfaxA3bSzdtUenDgk\nt+b10QrZNL0Tu61hcCcnwjRfaoRIAciqKcwJm2SUfhTWTMX/xOd+37lqUlmHOAB7\nO9woqRg4UVN4KtTEPY0CAwEAAaNZMFcwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFPsGTE022vFSM2TmZnvvcXLpiJtNMBUGA1UdEQQO\nMAyCCmt1YmVybmV0ZXMwDQYJKoZIhvcNAQELBQADggEBAEvmBAs2HdiEDSIc0Cuh\n15JZM4x8h4603xcZ/taGPmEoFunQCcPKIOMbTEFU5OgPO3W4HcBOsjzKKtPqYdPT\nFE3C6/Q66xfrXkb/v+q5d+LRMcctA1PgqOpU4Oiq6cLEMyqU2JxceYCRooxH0zsW\nnaOIJbdxt/0GfNo9fhXSEDMT+bWUf9ByFQGM57j3bHmPCtIrIJL2Eo+8mNjnfZYv\nFev9pEyuaRyf6BZU8xcXbhcAVtC9O/kc9TZWJbTTot9oLE+ZSKQx3HNkFil8gl6U\n4XTLISQH4+dt5vj2+5VzOfmhGhkV+ecFKRiE4mQnv3oP1KdYN+jBqf3qaakwrPCU\ntNU=\n-----END CERTIFICATE-----"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-k8s/{{conjurK8sCluster1ServiceId}}/kubernetes/ca-cert",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-k8s",
																"{{conjurK8sCluster1ServiceId}}",
																"kubernetes",
																"ca-cert"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Kubernetes Service Account Token",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ik4zenBJOEFQZ1BRek9CYndvYlpZVE01emF0c2dPak13X0ZGWmVzcDhRUUkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJjb25qdXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiY29uanVyLWNsdXN0ZXItc2VjcmV0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImNvbmp1ci1jbHVzdGVyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiOGQ1ODY2NmUtNTgxOC00MTQzLWJjMDAtZTI1NGE1OTA0YzFkIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmNvbmp1cjpjb25qdXItY2x1c3RlciJ9.fFgCUv7uicF-mllheEvQevWOIy5ZNlXaDEXn9ziN8jxJInGVBnLCFeG9QUBg6FAGFdAmA-I_MHIoSKOsc2smZrECvvqooBUA9SVbYkNJpEINqwefGAsITUcCkfuGu-E2Fm24AeYx_x0HLK7RNiA3ZAdHnIYooVOD8gGpJjbKNqQLgmrZaVBlPcXhot2K9o86SxxEVKCMCw_qNR9kvvj6O0Sl_XqymBt79FXVHWlGLqhvh5NIz9-fArR_aYeP9TFLsRbtqb-PgcoDOXSr-qmEjUt6dCNVRLWFtGkC4EAt_D-5F9E684PVKJFXQb8rkDRSrKRbsyZjKW01Ty30lCCYew"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-k8s/{{conjurK8sCluster1ServiceId}}/kubernetes/service-account-token",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-k8s",
																"{{conjurK8sCluster1ServiceId}}",
																"kubernetes",
																"service-account-token"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Kubernetes API URL",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "https://kubernetes.docker.internal:6443"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-k8s/{{conjurK8sCluster1ServiceId}}/kubernetes/api-url",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-k8s",
																"{{conjurK8sCluster1ServiceId}}",
																"kubernetes",
																"api-url"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "authn-jwt/k8s-cluster1",
											"item": [
												{
													"name": "JWKS Uri",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "https://192.168.65.4:6443/openid/v1/jwks"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurK8sCluster2ServiceId}}/jwks-uri",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurK8sCluster2ServiceId}}",
																"jwks-uri"
															]
														}
													},
													"response": []
												},
												{
													"name": "JWKS Uri Ca Cert",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "-----BEGIN CERTIFICATE-----\nMIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl\ncm5ldGVzMB4XDTE5MDMxODE5NTE0NloXDTI5MDMxNTE5NTE0NlowFTETMBEGA1UE\nAxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAPSr\ni+aUjWdfe7I+snYG2CXEgvP8DVVbLtJn/MzWiIiuqqT14ozkrL7u+a/jLw0GLv4e\nbPXUdVy6Ob80DEuTJZ9Jb+MOPSP7Xsce9nPMwUPN17ucH+m4BLYC/60PuZkrQF95\neLQ38qoQIgnViYYnpyNLI5lY23aNLsqHK6Hk/DgzrfQTaBeIqpsvu0/QKew2Tjq2\n7gRhd8ZRRmwquO/MNyOBxkQ/B0iBq20ZwOoG/3UMw3gynJEcMwGlFcmXETxxxtnj\nlJIGNg3c0L1Lk4CRCRDoi00zE27heHdNXS0nhXSvOnNSM3Pjcr92kLg7NArBv1Oo\ncLDoAeFvt9Hmoc0nwEUCAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB\n/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAMEsF+w2wmLGl9EQ0ohtVBMQivmo\nHWsmchSRGoIo9U3Ns+z40Lm7u0qD9mKi3hFS7s73NioRF3XWKZZ2g0BxhUfiX7oe\nKlEN+p8WL2ld4ELHzI+xd5TfYJadn4QYrY0joE65X74TCuCe9quoFtDK7sENn6+R\njkh821YJJH3qy56rwmxmXcmwdtStFoFiF93RLLpBTfKvLiTnIF3Yj5Kf9qcRBd9Z\nKMWaLCavB2OWoE31SfGGetgi5grJxoUcRxVGZX4F/nyIjNEvly/nfg1X0igfn0fz\nB8U+sRYaJN6sD/lFV68qgbXH+BaV/Y+hyrTLLtoPoCXzO16vavVsJSHhvVk=\n-----END CERTIFICATE-----"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurK8sCluster2ServiceId}}/ca-cert",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurK8sCluster2ServiceId}}",
																"ca-cert"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Public Keys",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\": \"jwks\",\n    \"value\": {\n        \"keys\": [\n            {\n                \"use\": \"sig\",\n                \"kty\": \"RSA\",\n                \"kid\": \"N3zpI8APgPQzOBbwobZYTM5zatsgOjMw_FFZesp8QQI\",\n                \"alg\": \"RS256\",\n                \"n\": \"2FjpNLQUmceQdixAZ6_Kp9EYq5xXQFxklUeIFv0LqL8qqfbtRtpiHBfSXTWpnSxP6nlkKO8by4X9rWo0vuUVk7ihW-u1V3h-gvwuUBfj3y6TrsZGyM6TA-kTpwgf7WPMr14QCiTOLO0T-1DgfSrRx6q_boV1n80h8UdEuwcSSLU9DmxGltlJsdE2EnNm6Mv1CwPtIhg4gRxMK1-ElyYY5M8wq4TcHgpPIZZeY2wrX-8BiI_gQ8DwhXQXStiKH0jPdbhr2oieWNRVDyq1e-lG_1RoeXLT9zHSfVklX0aP9dEEuK28NkPBqVFVW-AqOUaSozeKPKsfNdV4inA_PC0xdw\",\n                \"e\": \"AQAB\"\n            }\n        ]\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurK8sCluster2ServiceId}}/public-keys",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurK8sCluster2ServiceId}}",
																"public-keys"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Token App Property",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "sub"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurK8sCluster2ServiceId}}/token-app-property",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurK8sCluster2ServiceId}}",
																"token-app-property"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Identity Path",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "/data/cd/kubernetes/dev-team-3/applications"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurK8sCluster2ServiceId}}/identity-path",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurK8sCluster2ServiceId}}",
																"identity-path"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Issuer",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "https://kubernetes.default.svc.cluster.local"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurK8sCluster2ServiceId}}/issuer",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurK8sCluster2ServiceId}}",
																"issuer"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Audience",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "conjur"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurK8sCluster2ServiceId}}/audience",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurK8sCluster2ServiceId}}",
																"audience"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Enforced Claims",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "claim_root/claim_name,custom_claim1,custom_claim2"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurK8sCluster2ServiceId}}/enforced-claims",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurK8sCluster2ServiceId}}",
																"enforced-claims"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Claim Aliases",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "target-annotation-name_1:source-claim-name_1,target-annotation-name_2:source-claim-name_2"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurK8sCluster2ServiceId}}/claim-aliases",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurK8sCluster2ServiceId}}",
																"claim-aliases"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Public Keys Variable",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "- !delete\n  record: !variable conjur/authn-jwt/{{conjurK8sCluster2ServiceId}}/public-keys"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												},
												{
													"name": "Delete JWKS URI and CA Certs Variables",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "- !delete\n  record: !variable conjur/authn-jwt/{{conjurK8sCluster2ServiceId}}/jwks-uri\n\n- !delete\n  record: !variable conjur/authn-jwt/{{conjurK8sCluster2ServiceId}}/ca-certs"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"policies",
																"{{conjurEnterpriseAccount}}",
																"policy",
																"{{conjurEnterprisePolicyID}}"
															]
														},
														"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Jenkins",
									"item": [
										{
											"name": "Jenkins1",
											"item": [
												{
													"name": "JWKS Uri",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "https://jenkins.internal/jwtauth/conjur-jwk-set"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurJenkinsServiceId}}/jwks-uri",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurJenkinsServiceId}}",
																"jwks-uri"
															]
														}
													},
													"response": []
												},
												{
													"name": "JWKS Uri Ca Cert",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "-----BEGIN CERTIFICATE-----\nMIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl\ncm5ldGVzMB4XDTE5MDMxODE5NTE0NloXDTI5MDMxNTE5NTE0NlowFTETMBEGA1UE\nAxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAPSr\ni+aUjWdfe7I+snYG2CXEgvP8DVVbLtJn/MzWiIiuqqT14ozkrL7u+a/jLw0GLv4e\nbPXUdVy6Ob80DEuTJZ9Jb+MOPSP7Xsce9nPMwUPN17ucH+m4BLYC/60PuZkrQF95\neLQ38qoQIgnViYYnpyNLI5lY23aNLsqHK6Hk/DgzrfQTaBeIqpsvu0/QKew2Tjq2\n7gRhd8ZRRmwquO/MNyOBxkQ/B0iBq20ZwOoG/3UMw3gynJEcMwGlFcmXETxxxtnj\nlJIGNg3c0L1Lk4CRCRDoi00zE27heHdNXS0nhXSvOnNSM3Pjcr92kLg7NArBv1Oo\ncLDoAeFvt9Hmoc0nwEUCAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB\n/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAMEsF+w2wmLGl9EQ0ohtVBMQivmo\nHWsmchSRGoIo9U3Ns+z40Lm7u0qD9mKi3hFS7s73NioRF3XWKZZ2g0BxhUfiX7oe\nKlEN+p8WL2ld4ELHzI+xd5TfYJadn4QYrY0joE65X74TCuCe9quoFtDK7sENn6+R\njkh821YJJH3qy56rwmxmXcmwdtStFoFiF93RLLpBTfKvLiTnIF3Yj5Kf9qcRBd9Z\nKMWaLCavB2OWoE31SfGGetgi5grJxoUcRxVGZX4F/nyIjNEvly/nfg1X0igfn0fz\nB8U+sRYaJN6sD/lFV68qgbXH+BaV/Y+hyrTLLtoPoCXzO16vavVsJSHhvVk=\n-----END CERTIFICATE-----"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurJenkinsServiceId}}/ca-cert",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurJenkinsServiceId}}",
																"ca-cert"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Public Keys",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\": \"jwks\",\n    \"value\": {\n        \"keys\": [\n            {\n                \"kty\": \"RSA\",\n                \"e\": \"AQAB\",\n                \"use\": \"sig\",\n                \"kid\": \"0617140643\",\n                \"key_ops\": [\n                    \"verify\"\n                ],\n                \"alg\": \"RS256\",\n                \"n\": \"AMv2DSyYDpg-Xva-pjcN4t9_n1Mn8Kqey3KVRLyry9-VAlycDSaOtZRVHioprNKSBieubTRW75ov-oGzdwQZmu2-8upjshj-He6zJj1pL81G0IGhw0D72cNY9yUT2KScLzOQaWa_YvRc8UjOqgse6zrbANXjYkO9w7CILUrDlebu7abeAWIIalbncna_t-zlgYp39C-qZPOWELO-vAKsDCZOGT_DdTil2OnYrsQDGnNw-vmgrVUYDkIZlAALRSJBx8iEW0BV2KpNgEtxsE1VAuvodRhBJfbUmm_BatbnRfIWq6RcP3Nb4US2DAN1NF3_kLbFuZKQRJnHZB2yZGT_sn8\"\n            }\n        ]\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurJenkinsServiceId}}/public-keys",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurJenkinsServiceId}}",
																"public-keys"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Token App Property",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "jenkins_full_name"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurJenkinsServiceId}}/token-app-property",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurJenkinsServiceId}}",
																"token-app-property"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Identity Path",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "/data/ci/jenkins/projects"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurJenkinsServiceId}}/identity-path",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurJenkinsServiceId}}",
																"identity-path"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Issuer",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "https://jenkins.internal"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurJenkinsServiceId}}/issuer",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurJenkinsServiceId}}",
																"issuer"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Audience",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "https://conjur.internal"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurJenkinsServiceId}}/audience",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurJenkinsServiceId}}",
																"audience"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Enforced Claims",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "claim_root/claim_name,custom_claim1,custom_claim2"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurJenkinsServiceId}}/enforced-claims",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurJenkinsServiceId}}",
																"enforced-claims"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Claim Aliases",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "target-annotation-name_1:source-claim-name_1,target-annotation-name_2:source-claim-name_2"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurJenkinsServiceId}}/claim-aliases",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurJenkinsServiceId}}",
																"claim-aliases"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Gitlab",
									"item": [
										{
											"name": "Gitlab1",
											"item": [
												{
													"name": "JWKS Uri",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "https://gitlab.internal/-/jwks/"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurGitlabServiceId}}/jwks-uri",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurGitlabServiceId}}",
																"jwks-uri"
															]
														}
													},
													"response": []
												},
												{
													"name": "JWKS Uri Ca Cert",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "-----BEGIN CERTIFICATE-----\nMIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl\ncm5ldGVzMB4XDTE5MDMxODE5NTE0NloXDTI5MDMxNTE5NTE0NlowFTETMBEGA1UE\nAxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAPSr\ni+aUjWdfe7I+snYG2CXEgvP8DVVbLtJn/MzWiIiuqqT14ozkrL7u+a/jLw0GLv4e\nbPXUdVy6Ob80DEuTJZ9Jb+MOPSP7Xsce9nPMwUPN17ucH+m4BLYC/60PuZkrQF95\neLQ38qoQIgnViYYnpyNLI5lY23aNLsqHK6Hk/DgzrfQTaBeIqpsvu0/QKew2Tjq2\n7gRhd8ZRRmwquO/MNyOBxkQ/B0iBq20ZwOoG/3UMw3gynJEcMwGlFcmXETxxxtnj\nlJIGNg3c0L1Lk4CRCRDoi00zE27heHdNXS0nhXSvOnNSM3Pjcr92kLg7NArBv1Oo\ncLDoAeFvt9Hmoc0nwEUCAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB\n/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAMEsF+w2wmLGl9EQ0ohtVBMQivmo\nHWsmchSRGoIo9U3Ns+z40Lm7u0qD9mKi3hFS7s73NioRF3XWKZZ2g0BxhUfiX7oe\nKlEN+p8WL2ld4ELHzI+xd5TfYJadn4QYrY0joE65X74TCuCe9quoFtDK7sENn6+R\njkh821YJJH3qy56rwmxmXcmwdtStFoFiF93RLLpBTfKvLiTnIF3Yj5Kf9qcRBd9Z\nKMWaLCavB2OWoE31SfGGetgi5grJxoUcRxVGZX4F/nyIjNEvly/nfg1X0igfn0fz\nB8U+sRYaJN6sD/lFV68qgbXH+BaV/Y+hyrTLLtoPoCXzO16vavVsJSHhvVk=\n-----END CERTIFICATE-----"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurGitlabServiceId}}/ca-cert",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurGitlabServiceId}}",
																"ca-cert"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Public Keys",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\": \"jwks\",\n    \"value\": {\n        \"keys\": [\n            {\n                \"use\": \"sig\",\n                \"kty\": \"RSA\",\n                \"kid\": \"jzWTyPPXylUcRphTd5O07_OupM0PozzrAbUjrLOjkUk\",\n                \"alg\": \"RS256\",\n                \"n\": \"ukXcxB_g-Q1QfgjAtDeMFOR86i8jyuD1Y1VFbfRhiSq5oEhJfWDTJdpLIK0twPo-lCXNHDgoPe55skPRyJJ_Xt81n2Am6RwKqBDxTuJOO8CYdfKisRlgSv0QjJHfrDQXlbo076UJ16lVMsk4-PuNXX-mbWXnW3p4BPaSXXxWPsMVGUU1KL2LKUyHhJbK0XRApxT0L8kZS-7bVPdmw-a8kVL_YwJac7zA4GK2cMp_3d7-fpfQLSB0cX3G0Z7eVxEPqgakXyAy5jLjmD7Xu0aKQU8uCwJXPW2tSTwEMgE2zJ64eCu3OioWDklDK3dK1B2owLjPOG1Dp2knuLozKyGIxQ\",\n                \"e\": \"AQAB\"\n            }\n        ]\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurGitlabServiceId}}/public-keys",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurGitlabServiceId}}",
																"public-keys"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Token App Property",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "project_path"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurGitlabServiceId}}/token-app-property",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurGitlabServiceId}}",
																"token-app-property"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Identity Path",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "/ci/gitlab/projects"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurGitlabServiceId}}/identity-path",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurGitlabServiceId}}",
																"identity-path"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Issuer",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "https://gitlab.internal"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurGitlabServiceId}}/issuer",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurGitlabServiceId}}",
																"issuer"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Audience",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "https://conjur.internal"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurGitlabServiceId}}/audience",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurGitlabServiceId}}",
																"audience"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Enforced Claims",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "claim_root/claim_name,custom_claim1,custom_claim2"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurGitlabServiceId}}/enforced-claims",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurGitlabServiceId}}",
																"enforced-claims"
															]
														}
													},
													"response": []
												},
												{
													"name": "Load Claim Aliases",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Token token=\"{{conjurEnterpriseToken}}\"",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "target-annotation-name_1:source-claim-name_1,target-annotation-name_2:source-claim-name_2"
														},
														"url": {
															"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/conjur/authn-jwt/{{conjurGitlabServiceId}}/claim-aliases",
															"host": [
																"{{conjurEnterpriseHostname}}"
															],
															"path": [
																"secrets",
																"{{conjurEnterpriseAccount}}",
																"variable",
																"conjur",
																"authn-jwt",
																"{{conjurGitlabServiceId}}",
																"claim-aliases"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "CRUD",
							"item": [
								{
									"name": "Create Objects",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Token token=\"{{conjurEnterpriseToken}}\"",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "- !host\n  id: newHost\n  annotations:\n    description: \"This is a new host.\"\n  restricted_to: 192.168.19.34\n\n- !group\n  id: newGroup\n  annotations:\n    description: \"This is a new group.\"\n\n- !user\n  id: newUser\n  annotations:\n    name: \"New User\"\n\n- !policy\n  id: newPolicy\n  annotations:\n    description : \"Container for other objects.\"\n  body:\n    - !variable newPolicyVariable\n\n- !layer\n  id: newLayer\n  annotations:\n    description: \"This is a new layer.\"\n\n- !variable\n  id: newVariable\n  kind: password\n  annotations:\n    mime_type: application/octet-stream\n    custom_key: \"custom_value\""
										},
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"policies",
												"{{conjurEnterpriseAccount}}",
												"policy",
												"{{conjurEnterprisePolicyID}}"
											]
										},
										"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
									},
									"response": [
										{
											"name": "Create Objects",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Token token=\"{{conjurEnterpriseToken}}\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "- !host newHost\n\n- !group newGroup\n\n- !user newUser\n\n- !policy newPolicy\n\n- !layer newLayer"
												},
												"url": {
													"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
													"host": [
														"{{conjurEnterpriseHostname}}"
													],
													"path": [
														"policies",
														"{{conjurEnterpriseAccount}}",
														"policy",
														"{{conjurEnterprisePolicyID}}"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Mon, 16 May 2022 21:06:22 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "X-XSS-Protection",
													"value": "1; mode=block"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "Referrer-Policy",
													"value": "strict-origin-when-cross-origin"
												},
												{
													"key": "Vary",
													"value": "Accept"
												},
												{
													"key": "ETag",
													"value": "W/\"b8b825e472133f17f6060185eef4aa0b\""
												},
												{
													"key": "Cache-Control",
													"value": "max-age=0, private, must-revalidate"
												},
												{
													"key": "X-Request-Id",
													"value": "219c1097-212e-43b3-b9e0-d0aa26394502"
												},
												{
													"key": "X-Runtime",
													"value": "0.116779"
												}
											],
											"cookie": [],
											"body": "{\n    \"created_roles\": {\n        \"cyberark:host:newHost\": {\n            \"id\": \"cyberark:host:newHost\",\n            \"api_key\": \"1xpgkvydjm4b5107yg641kj85z01rsw0pn8ydye01f931yb211640r\"\n        },\n        \"cyberark:user:newUser\": {\n            \"id\": \"cyberark:user:newUser\",\n            \"api_key\": \"376tcx937e4vdt369yn8m21k0ymh3wfezzw3nnetbybqwby23chnh95\"\n        }\n    },\n    \"version\": 37\n}"
										}
									]
								},
								{
									"name": "Delete Objects",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Token token=\"{{conjurEnterpriseToken}}\"",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "- !delete\n  record: !host newHost\n\n- !delete\n  record: !group newGroup\n\n- !delete\n  record: !user newUser\n\n- !delete\n  record: !layer newLayer\n\n- !delete\n  record: !policy newPolicy\n\n- !delete\n  record: !variable newVariable"
										},
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"policies",
												"{{conjurEnterpriseAccount}}",
												"policy",
												"{{conjurEnterprisePolicyID}}"
											]
										},
										"description": "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error."
									},
									"response": [
										{
											"name": "Delete Objects",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "Token token=\"{{conjurEnterpriseToken}}\"",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "- !delete\n  record: !host newHost\n\n- !delete\n  record: !group newGroup\n\n- !delete\n  record: !user newUser\n\n- !delete\n  record: !layer newLayer\n\n- !delete\n  record: !policy newPolicy"
												},
												"url": {
													"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
													"host": [
														"{{conjurEnterpriseHostname}}"
													],
													"path": [
														"policies",
														"{{conjurEnterpriseAccount}}",
														"policy",
														"{{conjurEnterprisePolicyID}}"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Mon, 16 May 2022 21:06:27 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "X-XSS-Protection",
													"value": "1; mode=block"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "Referrer-Policy",
													"value": "strict-origin-when-cross-origin"
												},
												{
													"key": "Vary",
													"value": "Accept"
												},
												{
													"key": "ETag",
													"value": "W/\"87fe2183295f2382ac728038548a3ad6\""
												},
												{
													"key": "Cache-Control",
													"value": "max-age=0, private, must-revalidate"
												},
												{
													"key": "X-Request-Id",
													"value": "f24d9003-c7a3-4b10-b09b-3cd7fc0a04f6"
												},
												{
													"key": "X-Runtime",
													"value": "0.100361"
												}
											],
											"cookie": [],
											"body": "{\n    \"created_roles\": {},\n    \"version\": 38\n}"
										}
									]
								},
								{
									"name": "Replace Policy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											},
											"disabled": false
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"value": "Token token=\"{{conjurEnterpriseToken}}\"",
												"key": "Authorization",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/newPolicy",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"policies",
												"{{conjurEnterpriseAccount}}",
												"policy",
												"newPolicy"
											]
										},
										"description": "Loads or replaces a Conjur policy document.\n\nAny policy data which already exists on the server but is **not** explicitly specified in the new policy file **will be deleted**."
									},
									"response": []
								},
								{
									"name": "Assign Privileges",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Token token=\"{{conjurEnterpriseToken}}\"",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "- !permit\n  role: !host newHost\n  privileges: [\"read\",\"execute\",\"update\"]\n  resources:\n    - !variable newVariable\n\n- !permit\n  role: !group newGroup\n  privileges: [\"read\",\"update\",\"create\"]\n  resources:\n    - !policy newPolicy"
										},
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"policies",
												"{{conjurEnterpriseAccount}}",
												"policy",
												"{{conjurEnterprisePolicyID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Grant Role Membership",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Token token=\"{{conjurEnterpriseToken}}\"",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "- !grant\n  role: !group newGroup\n  members:\n    - !user newUser"
										},
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/policies/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"policies",
												"{{conjurEnterpriseAccount}}",
												"policy",
												"{{conjurEnterprisePolicyID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "This folder contains sample policy files. They can be used to test different integrations."
				},
				{
					"name": "Retrieve Information",
					"item": [
						{
							"name": "Get Batch Variables Value",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token token=\"{{conjurEnterpriseToken}}\"",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/secrets?variable_ids={{conjurEnterpriseAccount}}:variable:vault1%2FLOBUser1%2FSafe1%2Fsecret1,{{conjurEnterpriseAccount}}:variable:vault1%2FLOBUser1%2FSafe1%2Fsecret2",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"secrets"
									],
									"query": [
										{
											"key": "variable_ids",
											"value": "{{conjurEnterpriseAccount}}:variable:vault1%2FLOBUser1%2FSafe1%2Fsecret1,{{conjurEnterpriseAccount}}:variable:vault1%2FLOBUser1%2FSafe1%2Fsecret2"
										}
									]
								},
								"description": "Fetches multiple secret values in one invocation. It’s faster to fetch secrets in batches than to fetch them one at a time."
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Token token=\"{{conjurEnterpriseToken}}\"",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/secrets?variable_ids={{conjurEnterpriseAccount}}:variable:vault1%2FLOBUser1%2FSafe1%2Fsecret1,{{conjurEnterpriseAccount}}:variable:vault1%2FLOBUser1%2FSafe1%2Fsecret2",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"secrets"
											],
											"query": [
												{
													"key": "variable_ids",
													"value": "{{conjurEnterpriseAccount}}:variable:vault1%2FLOBUser1%2FSafe1%2Fsecret1,{{conjurEnterpriseAccount}}:variable:vault1%2FLOBUser1%2FSafe1%2Fsecret2"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Thu, 19 May 2022 16:08:51 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin"
										},
										{
											"key": "Vary",
											"value": "Accept"
										},
										{
											"key": "ETag",
											"value": "W/\"84dfaa41b924707d9ab4a02df650e537\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "c1e019a2-cfe9-44b3-8dd5-d8406aaf0a7c"
										},
										{
											"key": "X-Runtime",
											"value": "0.014633"
										}
									],
									"cookie": [],
									"body": "{\n    \"cyberark:variable:vault1/LOBUser1/Safe1/secret1\": \"NewSecret\",\n    \"cyberark:variable:vault1/LOBUser1/Safe1/secret2\": \"6jtLIWSPlqjkzMgc7Vf2z4OPNrlgEPHS\"\n}"
								}
							]
						},
						{
							"name": "Get Variable Value",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"value": "Token token=\"{{conjurEnterpriseToken}}\"",
										"type": "text",
										"key": "Authorization"
									}
								],
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/{{conjurSecretID}}",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"secrets",
										"{{conjurEnterpriseAccount}}",
										"variable",
										"{{conjurSecretID}}"
									]
								},
								"description": "Fetches the value of a secret from the specified Variable. The latest version will be retrieved unless the version parameter is specified. The twenty most recent secret versions are retained.\n\nThe secret data is returned in the response body.\n\nNote: Conjur will allow you to add a secret to any resource, but the best practice is to store and retrieve secret data only using Variable resources."
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"value": "Token token=\"{{conjurEnterpriseToken}}\"",
												"type": "text",
												"key": "Authorization"
											}
										],
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/{{conjurSecretID}}",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"secrets",
												"{{conjurEnterpriseAccount}}",
												"variable",
												"{{conjurSecretID}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "raw",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Thu, 19 May 2022 16:06:58 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/octet-stream"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin"
										},
										{
											"key": "Content-Disposition",
											"value": "attachment"
										},
										{
											"key": "Content-Transfer-Encoding",
											"value": "binary"
										},
										{
											"key": "Vary",
											"value": "Accept"
										},
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "ETag",
											"value": "W/\"c2e434ade4cb324f532bfd907bebd58c\""
										},
										{
											"key": "X-Request-Id",
											"value": "d25ad8ba-eb44-4273-a838-7c3199c2b20c"
										},
										{
											"key": "X-Runtime",
											"value": "0.012260"
										}
									],
									"cookie": [],
									"body": "NewSecret"
								}
							]
						},
						{
							"name": "Cluster Health",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/health",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/health",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"health"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Mon, 16 May 2022 21:03:31 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "535"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Conjur-Health",
											"value": "OK"
										}
									],
									"cookie": [],
									"body": "{\n    \"services\": {\n        \"ldap-sync\": \"disabled\",\n        \"possum\": \"ok\",\n        \"ui\": \"ok\",\n        \"ok\": true\n    },\n    \"database\": {\n        \"ok\": true,\n        \"connect\": {\n            \"main\": \"ok\"\n        },\n        \"free_space\": {\n            \"main\": {\n                \"kbytes\": 278664148,\n                \"inodes\": 20025022\n            }\n        },\n        \"replication_status\": {\n            \"pg_current_xlog_location\": \"0/2B5FEA10\",\n            \"pg_current_xlog_location_bytes\": 727706128\n        }\n    },\n    \"audit\": {\n        \"ok\": true,\n        \"received\": {\n            \"processed\": 0\n        }\n    },\n    \"ok\": true,\n    \"role\": \"master\"\n}"
								}
							]
						},
						{
							"name": "Cluster Usage",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/usage",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"usage"
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/usage",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"usage"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Tue, 17 May 2022 14:27:44 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "284"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"leader\": {\n        \"authn_installed\": 8,\n        \"authn_enabled\": 9,\n        \"role\": \"master\",\n        \"container\": \"59a024d115c7\",\n        \"hostname\": \"host.docker.internal\"\n    },\n    \"followers\": {\n        \"count\": 0,\n        \"nodes\": []\n    },\n    \"standbys\": {\n        \"count\": 0,\n        \"nodes\": []\n    }\n}"
								}
							]
						},
						{
							"name": "Instance Information",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/info",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"info"
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/info",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"info"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Mon, 16 May 2022 21:11:34 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "1897"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"release\": \"12.5.1\",\n    \"version\": \"5.16.8-6\",\n    \"services\": {\n        \"evoke\": {\n            \"desired\": \"i\",\n            \"status\": \"i\",\n            \"err\": null,\n            \"description\": \"Conjur\",\n            \"name\": \"conjur-evoke\",\n            \"version\": \"5.24.0-1470\",\n            \"arch\": \"amd64\"\n        },\n        \"ldap-sync\": {\n            \"desired\": \"i\",\n            \"status\": \"i\",\n            \"err\": null,\n            \"description\": \"Conjur\",\n            \"name\": \"conjur-ldap-sync\",\n            \"version\": \"2.4.0-1172\",\n            \"arch\": \"amd64\"\n        },\n        \"possum\": {\n            \"desired\": \"i\",\n            \"status\": \"i\",\n            \"err\": null,\n            \"description\": \"Conjur\",\n            \"name\": \"conjur-possum\",\n            \"version\": \"1.17.4+enterprise.1-9\",\n            \"arch\": \"amd64\"\n        },\n        \"ui\": {\n            \"desired\": \"i\",\n            \"status\": \"i\",\n            \"err\": null,\n            \"description\": \"Conjur\",\n            \"name\": \"conjur-ui\",\n            \"version\": \"2.14.0-1413\",\n            \"arch\": \"amd64\"\n        }\n    },\n    \"container\": \"59a024d115c7\",\n    \"role\": \"master\",\n    \"configuration\": {\n        \"conjur\": {\n            \"account\": \"cyberark\",\n            \"altnames\": [\n                \"host.docker.internal\",\n                \"localhost\",\n                \"conjur\"\n            ],\n            \"hostname\": \"host.docker.internal\",\n            \"master_altnames\": [\n                \"host.docker.internal\",\n                \"localhost\",\n                \"conjur\"\n            ],\n            \"role\": \"master\"\n        }\n    },\n    \"authenticators\": {\n        \"installed\": [\n            \"authn\",\n            \"authn-azure\",\n            \"authn-gcp\",\n            \"authn-iam\",\n            \"authn-jwt\",\n            \"authn-k8s\",\n            \"authn-ldap\",\n            \"authn-oidc\"\n        ],\n        \"configured\": [\n            \"authn\",\n            \"authn-iam/region1\",\n            \"authn-jwt/k8s-cluster3\",\n            \"authn-k8s/cluster1\",\n            \"authn-k8s/cluster2\"\n        ],\n        \"enabled\": [\n            \"authn\",\n            \"authn-azure/prod\",\n            \"authn-iam/prod\",\n            \"authn-jwt/gitlab1\",\n            \"authn-jwt/jenkins1\",\n            \"authn-jwt/k8s-cluster3\",\n            \"authn-k8s/cluster1\",\n            \"authn-k8s/cluster2\",\n            \"authn-oidc/provider1\"\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "Retrieve Public Keys",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Token token=\"{{conjurEnterpriseToken}}\""
									}
								],
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/public_keys/{{conjurEnterpriseAccount}}/user/admin",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"public_keys",
										"{{conjurEnterpriseAccount}}",
										"user",
										"admin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Admin Role",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Token token=\"{{conjurEnterpriseToken}}\""
									}
								],
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/roles/{{conjurEnterpriseAccount}}/user/admin",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"roles",
										"{{conjurEnterpriseAccount}}",
										"user",
										"admin"
									]
								}
							},
							"response": [
								{
									"name": "Show Admin Role",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Token token=\"{{conjurEnterpriseToken}}\""
											}
										],
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/roles/{{conjurEnterpriseAccount}}/user/admin",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"roles",
												"{{conjurEnterpriseAccount}}",
												"user",
												"admin"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Tue, 07 Jun 2022 19:38:53 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin"
										},
										{
											"key": "Vary",
											"value": "Accept"
										},
										{
											"key": "ETag",
											"value": "W/\"e0700f0b3884819abb3afd33eb995045\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "6ada6e64-444e-4266-adb6-106db79c324f"
										},
										{
											"key": "X-Runtime",
											"value": "0.006928"
										}
									],
									"cookie": [],
									"body": "{\n    \"created_at\": \"2022-05-20T20:16:45.795+00:00\",\n    \"id\": \"cyberark:user:admin\",\n    \"members\": [\n        {\n            \"admin_option\": false,\n            \"ownership\": false,\n            \"role\": \"cyberark:user:admin\",\n            \"member\": \"cyberark:user:joe\",\n            \"policy\": \"cyberark:policy:root\"\n        },\n        {\n            \"admin_option\": false,\n            \"ownership\": false,\n            \"role\": \"cyberark:user:admin\",\n            \"member\": \"cyberark:user:darren\",\n            \"policy\": \"cyberark:policy:root\"\n        },\n        {\n            \"admin_option\": false,\n            \"ownership\": false,\n            \"role\": \"cyberark:user:admin\",\n            \"member\": \"cyberark:user:jeremy\",\n            \"policy\": \"cyberark:policy:root\"\n        },\n        {\n            \"admin_option\": false,\n            \"ownership\": false,\n            \"role\": \"cyberark:user:admin\",\n            \"member\": \"cyberark:user:jody\",\n            \"policy\": \"cyberark:policy:root\"\n        },\n        {\n            \"admin_option\": false,\n            \"ownership\": false,\n            \"role\": \"cyberark:user:admin\",\n            \"member\": \"cyberark:user:dennis\",\n            \"policy\": \"cyberark:policy:root\"\n        },\n        {\n            \"admin_option\": false,\n            \"ownership\": false,\n            \"role\": \"cyberark:user:admin\",\n            \"member\": \"cyberark:user:garnet\",\n            \"policy\": \"cyberark:policy:root\"\n        },\n        {\n            \"admin_option\": false,\n            \"ownership\": false,\n            \"role\": \"cyberark:user:admin\",\n            \"member\": \"cyberark:user:quincy\",\n            \"policy\": \"cyberark:policy:root\"\n        },\n        {\n            \"admin_option\": false,\n            \"ownership\": false,\n            \"role\": \"cyberark:user:admin\",\n            \"member\": \"cyberark:user:amine\",\n            \"policy\": \"cyberark:policy:root\"\n        },\n        {\n            \"admin_option\": false,\n            \"ownership\": false,\n            \"role\": \"cyberark:user:admin\",\n            \"member\": \"cyberark:user:arron\",\n            \"policy\": \"cyberark:policy:root\"\n        },\n        {\n            \"admin_option\": false,\n            \"ownership\": false,\n            \"role\": \"cyberark:user:admin\",\n            \"member\": \"cyberark:user:aslan\",\n            \"policy\": \"cyberark:policy:root\"\n        },\n        {\n            \"admin_option\": false,\n            \"ownership\": false,\n            \"role\": \"cyberark:user:admin\",\n            \"member\": \"cyberark:user:tudor\",\n            \"policy\": \"cyberark:policy:root\"\n        },\n        {\n            \"admin_option\": false,\n            \"ownership\": false,\n            \"role\": \"cyberark:user:admin\",\n            \"member\": \"cyberark:user:evan\",\n            \"policy\": \"cyberark:policy:root\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Search for Specific Variable",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"value": "Token token=\"{{conjurEnterpriseToken}}\"",
										"key": "Authorization",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/resources/{{conjurEnterpriseAccount}}?kind=variable&count=true&search=safe2&search=safe1",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"resources",
										"{{conjurEnterpriseAccount}}"
									],
									"query": [
										{
											"key": "kind",
											"value": "variable"
										},
										{
											"key": "count",
											"value": "true"
										},
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "3",
											"disabled": true
										},
										{
											"key": "search",
											"value": "safe2"
										},
										{
											"key": "search",
											"value": "safe1"
										}
									]
								}
							},
							"response": [
								{
									"name": "Search for Specific Variable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"value": "Token token=\"{{conjurEnterpriseToken}}\"",
												"key": "Authorization",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/resources/{{conjurEnterpriseAccount}}?kind=variable&search=LOBUser1/Safe1/secret1",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"resources",
												"{{conjurEnterpriseAccount}}"
											],
											"query": [
												{
													"key": "kind",
													"value": "variable"
												},
												{
													"key": "search",
													"value": "LOBUser1/Safe1/secret1"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Fri, 03 Jun 2022 13:07:38 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin"
										},
										{
											"key": "Vary",
											"value": "Accept"
										},
										{
											"key": "ETag",
											"value": "W/\"30212c6d1d519b2e7e065aac1e37f8f8\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "c5729a02-c611-4328-b781-83636bb3dd85"
										},
										{
											"key": "X-Runtime",
											"value": "0.010171"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe1/secret1\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe1/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe1/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    }\n]"
								}
							]
						},
						{
							"name": "List Policies",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"value": "Token token=\"{{conjurEnterpriseToken}}\"",
										"type": "text",
										"key": "Authorization"
									}
								],
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/resources/{{conjurEnterpriseAccount}}?kind=policy",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"resources",
										"{{conjurEnterpriseAccount}}"
									],
									"query": [
										{
											"key": "kind",
											"value": "policy"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Token token=\"{{dapToken}}\"",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": ""
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Tue, 18 Feb 2020 01:48:07 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "ETag",
											"value": "W/\"6ddd63463f5d83b718678ba329ee13f3\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "acde4887-2d84-448c-9a30-fe436a9f404a"
										},
										{
											"key": "X-Runtime",
											"value": "0.006684"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"created_at\": \"2019-09-25T16:38:16.426+00:00\",\n        \"id\": \"cyberarkdemo:policy:root\",\n        \"owner\": \"cyberarkdemo:user:admin\",\n        \"permissions\": [],\n        \"annotations\": [],\n        \"policy_versions\": [\n            {\n                \"version\": 1,\n                \"created_at\": \"2019-09-25T16:38:16.426+00:00\",\n                \"policy_text\": \"- !policy\\n  id: ec2_deploy\\n\",\n                \"policy_sha256\": \"074ae39f5be04db36ad2bb236c802963a4aa08d54501e941b99f8f2196bc2d62\",\n                \"finished_at\": \"2019-09-25T16:38:16.559+00:00\",\n                \"id\": \"cyberarkdemo:policy:root\",\n                \"role\": \"cyberarkdemo:user:admin\"\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2019-09-25T16:38:16.426+00:00\",\n        \"id\": \"cyberarkdemo:policy:ec2_deploy\",\n        \"owner\": \"cyberarkdemo:user:admin\",\n        \"policy\": \"cyberarkdemo:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [],\n        \"policy_versions\": [\n            {\n                \"version\": 1,\n                \"created_at\": \"2019-09-25T16:40:42.340+00:00\",\n                \"policy_text\": \"- !host\\n  id: ansible-tower\\n  annotations:\\n    ansible: true\\n\\n- !variable access_key_id\\n- !variable access_key_secret\\n\\n- !permit\\n  role: !host ansible-tower\\n  privileges: [ read, execute ]\\n  resources:\\n    - !variable access_key_id\\n    - !variable access_key_secret\\n\",\n                \"policy_sha256\": \"99dd5680b169825d42e170938f86723b6c5f0f06a564b4629aed56fbf6c614e7\",\n                \"finished_at\": \"2019-09-25T16:40:42.452+00:00\",\n                \"id\": \"cyberarkdemo:policy:ec2_deploy\",\n                \"role\": \"cyberarkdemo:user:admin\"\n            }\n        ]\n    }\n]"
								}
							]
						},
						{
							"name": "List Everything",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									},
									"disabled": false
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"value": "Token token=\"{{conjurEnterpriseToken}}\"",
										"type": "text",
										"key": "Authorization"
									}
								],
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/api/resources/{{conjurEnterpriseAccount}}",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"api",
										"resources",
										"{{conjurEnterpriseAccount}}"
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Token token=\"{{dapToken}}\"",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": ""
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Tue, 18 Feb 2020 01:49:20 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "ETag",
											"value": "W/\"83711a7f4234325be0940f3667f471c0\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "c4b8fbcb-0a32-4cfa-a85d-47b0832aea71"
										},
										{
											"key": "X-Runtime",
											"value": "0.008289"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"created_at\": \"2019-09-25T16:38:16.426+00:00\",\n        \"id\": \"cyberarkdemo:policy:root\",\n        \"owner\": \"cyberarkdemo:user:admin\",\n        \"permissions\": [],\n        \"annotations\": [],\n        \"policy_versions\": [\n            {\n                \"version\": 1,\n                \"created_at\": \"2019-09-25T16:38:16.426+00:00\",\n                \"policy_text\": \"- !policy\\n  id: ec2_deploy\\n\",\n                \"policy_sha256\": \"074ae39f5be04db36ad2bb236c802963a4aa08d54501e941b99f8f2196bc2d62\",\n                \"finished_at\": \"2019-09-25T16:38:16.559+00:00\",\n                \"id\": \"cyberarkdemo:policy:root\",\n                \"role\": \"cyberarkdemo:user:admin\"\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2019-09-25T16:38:16.426+00:00\",\n        \"id\": \"cyberarkdemo:policy:ec2_deploy\",\n        \"owner\": \"cyberarkdemo:user:admin\",\n        \"policy\": \"cyberarkdemo:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [],\n        \"policy_versions\": [\n            {\n                \"version\": 1,\n                \"created_at\": \"2019-09-25T16:40:42.340+00:00\",\n                \"policy_text\": \"- !host\\n  id: ansible-tower\\n  annotations:\\n    ansible: true\\n\\n- !variable access_key_id\\n- !variable access_key_secret\\n\\n- !permit\\n  role: !host ansible-tower\\n  privileges: [ read, execute ]\\n  resources:\\n    - !variable access_key_id\\n    - !variable access_key_secret\\n\",\n                \"policy_sha256\": \"99dd5680b169825d42e170938f86723b6c5f0f06a564b4629aed56fbf6c614e7\",\n                \"finished_at\": \"2019-09-25T16:40:42.452+00:00\",\n                \"id\": \"cyberarkdemo:policy:ec2_deploy\",\n                \"role\": \"cyberarkdemo:user:admin\"\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2019-09-25T16:40:42.340+00:00\",\n        \"id\": \"cyberarkdemo:host:ec2_deploy/ansible-tower\",\n        \"owner\": \"cyberarkdemo:policy:ec2_deploy\",\n        \"policy\": \"cyberarkdemo:policy:ec2_deploy\",\n        \"permissions\": [],\n        \"annotations\": [\n            {\n                \"name\": \"ansible\",\n                \"value\": \"true\",\n                \"policy\": \"cyberarkdemo:policy:ec2_deploy\"\n            }\n        ],\n        \"restricted_to\": []\n    },\n    {\n        \"created_at\": \"2019-09-25T16:40:42.340+00:00\",\n        \"id\": \"cyberarkdemo:variable:ec2_deploy/access_key_id\",\n        \"owner\": \"cyberarkdemo:policy:ec2_deploy\",\n        \"policy\": \"cyberarkdemo:policy:ec2_deploy\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberarkdemo:host:ec2_deploy/ansible-tower\",\n                \"policy\": \"cyberarkdemo:policy:ec2_deploy\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberarkdemo:host:ec2_deploy/ansible-tower\",\n                \"policy\": \"cyberarkdemo:policy:ec2_deploy\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2019-09-25T16:40:42.340+00:00\",\n        \"id\": \"cyberarkdemo:variable:ec2_deploy/access_key_secret\",\n        \"owner\": \"cyberarkdemo:policy:ec2_deploy\",\n        \"policy\": \"cyberarkdemo:policy:ec2_deploy\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberarkdemo:host:ec2_deploy/ansible-tower\",\n                \"policy\": \"cyberarkdemo:policy:ec2_deploy\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberarkdemo:host:ec2_deploy/ansible-tower\",\n                \"policy\": \"cyberarkdemo:policy:ec2_deploy\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    }\n]"
								}
							]
						},
						{
							"name": "List Variables",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"value": "Token token=\"{{conjurEnterpriseToken}}\"",
										"key": "Authorization",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/resources/{{conjurEnterpriseAccount}}?kind=variable",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"resources",
										"{{conjurEnterpriseAccount}}"
									],
									"query": [
										{
											"key": "kind",
											"value": "variable"
										}
									]
								}
							},
							"response": [
								{
									"name": "List Variables",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"value": "Token token=\"{{conjurEnterpriseToken}}\"",
												"key": "Authorization",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/resources/{{conjurEnterpriseAccount}}?kind=variable",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"resources",
												"{{conjurEnterpriseAccount}}"
											],
											"query": [
												{
													"key": "kind",
													"value": "variable"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Thu, 02 Jun 2022 15:55:33 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin"
										},
										{
											"key": "Vary",
											"value": "Accept"
										},
										{
											"key": "ETag",
											"value": "W/\"daf55ba9c68f8c10dda829ae4f3b8dee\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "8938dd41-c3d0-4994-865d-4424ced05188"
										},
										{
											"key": "X-Runtime",
											"value": "0.053407"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe1/secret1\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe1/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe1/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe1/secret2\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe1/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe1/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe1/secret3\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe1/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe1/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe1/secret4\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe1/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe1/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe1/secret5\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe1/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe1/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe1/secret6\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe1/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe1/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe1/secret7\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe1/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe1/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe1/secret8\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe1/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe1/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe2/secret1\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe2\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe2/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe2/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe2/secret2\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe2\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe2/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe2/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe2/secret3\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe2\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe2/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe2/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe2/secret4\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe2\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe2/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe2/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe2/secret5\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe2\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe2/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe2/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe2/secret6\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe2\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe2/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe2/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe2/secret7\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe2\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe2/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe2/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe2/secret8\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe2\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe2/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe2/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe3/secret1\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe3\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe3/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe3/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe3/secret2\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe3\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe3/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe3/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe3/secret3\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe3\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe3/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe3/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe3/secret4\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe3\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe3/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe3/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe3/secret5\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe3\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe3/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe3/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe3/secret6\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe3\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe3/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe3/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe3/secret7\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe3\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe3/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe3/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe3/secret8\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe3\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe3/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe3/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe4/secret1\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe4\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe4/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe4/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe4/secret2\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe4\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe4/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe4/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe4/secret3\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe4\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe4/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe4/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe4/secret4\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe4\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe4/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe4/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe4/secret5\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe4\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe4/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe4/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe4/secret6\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe4\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe4/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe4/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe4/secret7\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe4\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe4/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe4/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe4/secret8\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe4\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe4/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe4/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe5/secret1\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe5\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe5/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe5/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe5/secret2\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe5\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe5/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe5/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe5/secret3\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe5\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe5/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe5/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe5/secret4\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe5\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe5/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe5/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe5/secret5\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe5\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe5/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe5/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe5/secret6\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe5\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe5/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe5/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe5/secret7\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe5\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe5/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe5/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe5/secret8\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe5\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe5/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe5/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe6/secret1\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe6\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe6/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe6/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe6/secret2\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe6\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe6/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe6/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe6/secret3\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe6\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe6/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe6/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe6/secret4\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe6\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe6/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe6/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe6/secret5\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe6\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe6/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe6/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe6/secret6\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe6\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe6/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe6/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe6/secret7\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe6\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe6/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe6/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe6/secret8\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe6\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe6/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe6/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe7/secret1\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe7\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe7/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe7/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe7/secret2\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe7\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe7/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe7/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe7/secret3\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe7\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe7/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe7/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe7/secret4\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe7\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe7/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe7/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe7/secret5\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe7\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe7/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe7/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe7/secret6\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe7\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe7/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe7/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe7/secret7\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe7\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe7/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe7/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe7/secret8\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe7\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe7/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe7/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe8/secret1\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe8\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe8/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe8/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe8/secret2\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe8\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe8/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe8/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe8/secret3\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe8\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe8/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe8/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe8/secret4\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe8\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe8/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe8/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe8/secret5\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe8\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe8/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe8/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe8/secret6\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe8\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe8/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe8/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe8/secret7\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe8\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe8/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe8/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:37.481+00:00\",\n        \"id\": \"cyberark:variable:vault1/LOBUser1/Safe8/secret8\",\n        \"owner\": \"cyberark:policy:vault1/LOBUser1/Safe8\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [\n            {\n                \"privilege\": \"read\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe8/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"privilege\": \"execute\",\n                \"role\": \"cyberark:group:vault1/LOBUser1/Safe8/consumers\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:56.076+00:00\",\n        \"id\": \"cyberark:variable:conjur/authn-k8s/cluster1/ca/key\",\n        \"owner\": \"cyberark:policy:conjur/authn-k8s/cluster1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:56.076+00:00\",\n        \"id\": \"cyberark:variable:conjur/authn-k8s/cluster1/ca/cert\",\n        \"owner\": \"cyberark:policy:conjur/authn-k8s/cluster1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:56.076+00:00\",\n        \"id\": \"cyberark:variable:conjur/authn-k8s/cluster1/kubernetes/service-account-token\",\n        \"owner\": \"cyberark:policy:conjur/authn-k8s/cluster1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:56.076+00:00\",\n        \"id\": \"cyberark:variable:conjur/authn-k8s/cluster1/kubernetes/ca-cert\",\n        \"owner\": \"cyberark:policy:conjur/authn-k8s/cluster1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:56.076+00:00\",\n        \"id\": \"cyberark:variable:conjur/authn-k8s/cluster1/kubernetes/api-url\",\n        \"owner\": \"cyberark:policy:conjur/authn-k8s/cluster1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:56.220+00:00\",\n        \"id\": \"cyberark:variable:conjur/authn-jwt/k8s-cluster1/public-keys\",\n        \"owner\": \"cyberark:policy:conjur/authn-jwt/k8s-cluster1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            },\n            {\n                \"version\": 2,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:56.220+00:00\",\n        \"id\": \"cyberark:variable:conjur/authn-jwt/k8s-cluster1/token-app-property\",\n        \"owner\": \"cyberark:policy:conjur/authn-jwt/k8s-cluster1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:56.220+00:00\",\n        \"id\": \"cyberark:variable:conjur/authn-jwt/k8s-cluster1/identity-path\",\n        \"owner\": \"cyberark:policy:conjur/authn-jwt/k8s-cluster1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:56.220+00:00\",\n        \"id\": \"cyberark:variable:conjur/authn-jwt/k8s-cluster1/issuer\",\n        \"owner\": \"cyberark:policy:conjur/authn-jwt/k8s-cluster1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [],\n        \"secrets\": [\n            {\n                \"version\": 1,\n                \"expires_at\": null\n            }\n        ]\n    }\n]"
								}
							]
						},
						{
							"name": "List Layers",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Token token=\"{{conjurEnterpriseToken}}\""
									}
								],
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/resources/{{conjurEnterpriseAccount}}?kind=layer",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"resources",
										"{{conjurEnterpriseAccount}}"
									],
									"query": [
										{
											"key": "kind",
											"value": "layer"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK - No Layers",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"type": "text",
												"value": "Token token=\"{{dapToken}}\"",
												"key": "Authorization",
												"disabled": true
											}
										],
										"url": {
											"raw": ""
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Tue, 18 Feb 2020 01:50:28 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "ETag",
											"value": "W/\"d751713988987e9331980363e24189ce\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "458d7f4b-51e5-4328-b988-43a1f11bddca"
										},
										{
											"key": "X-Runtime",
											"value": "0.006812"
										}
									],
									"cookie": [],
									"body": "[]"
								}
							]
						},
						{
							"name": "List Roles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Token token=\"{{conjurEnterpriseToken}}\""
									}
								],
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/roles/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"roles",
										"{{conjurEnterpriseAccount}}",
										"policy",
										"{{conjurEnterprisePolicyID}}"
									]
								}
							},
							"response": [
								{
									"name": "200 OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Token token=\"{{conjurEnterpriseToken}}\""
											}
										],
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/roles/{{conjurEnterpriseAccount}}/policy/{{conjurEnterprisePolicyID}}",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"roles",
												"{{conjurEnterpriseAccount}}",
												"policy",
												"{{conjurEnterprisePolicyID}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Tue, 17 May 2022 14:28:19 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin"
										},
										{
											"key": "Vary",
											"value": "Accept"
										},
										{
											"key": "ETag",
											"value": "W/\"875193991fc1bb6fe18be70b7e2bfdca\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "cccdd887-c0db-49b8-9324-2679d31302b5"
										},
										{
											"key": "X-Runtime",
											"value": "0.007824"
										}
									],
									"cookie": [],
									"body": "{\n    \"created_at\": \"2022-05-02T19:15:18.966+00:00\",\n    \"id\": \"cyberark:policy:root\",\n    \"members\": [\n        {\n            \"admin_option\": true,\n            \"ownership\": true,\n            \"role\": \"cyberark:policy:root\",\n            \"member\": \"cyberark:user:admin\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "List Hosts",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token token=\"{{conjurEnterpriseToken}}\"",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/resources/{{conjurEnterpriseAccount}}?kind=host",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"resources",
										"{{conjurEnterpriseAccount}}"
									],
									"query": [
										{
											"key": "kind",
											"value": "host"
										}
									]
								}
							},
							"response": [
								{
									"name": "List Hosts",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Token token=\"{{conjurEnterpriseToken}}\"",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/resources/{{conjurEnterpriseAccount}}?kind=host",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"resources",
												"{{conjurEnterpriseAccount}}"
											],
											"query": [
												{
													"key": "kind",
													"value": "host"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Thu, 02 Jun 2022 15:56:01 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin"
										},
										{
											"key": "Vary",
											"value": "Accept"
										},
										{
											"key": "ETag",
											"value": "W/\"73ab63bb77eaf9deb559b6cb1f116ae4\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "87acce53-9739-45cd-aca4-bd0148d45756"
										},
										{
											"key": "X-Runtime",
											"value": "0.027541"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"created_at\": \"2022-05-20T20:19:56.488+00:00\",\n        \"id\": \"cyberark:host:cd/kubernetes/k8s-follower-auto-configuration/cert-authn-cluster1/follower-decomposed\",\n        \"owner\": \"cyberark:policy:cd/kubernetes/k8s-follower-auto-configuration/cert-authn-cluster1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [\n            {\n                \"name\": \"authn-k8s/namespace\",\n                \"value\": \"conjur\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/service-account\",\n                \"value\": \"conjur-cluster\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/authentication-container-name\",\n                \"value\": \"configurator\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"restricted_to\": []\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:56.773+00:00\",\n        \"id\": \"cyberark:host:cd/kubernetes/dev-team-1/applications/api-app1\",\n        \"owner\": \"cyberark:policy:cd/kubernetes/dev-team-1/applications\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [\n            {\n                \"name\": \"authn-k8s/namespace\",\n                \"value\": \"conjur\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/deployment\",\n                \"value\": \"api-app1\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/authentication-container-name\",\n                \"value\": \"authenticator\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"restricted_to\": []\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:56.773+00:00\",\n        \"id\": \"cyberark:host:cd/kubernetes/dev-team-1/applications/k8s-secrets-app1\",\n        \"owner\": \"cyberark:policy:cd/kubernetes/dev-team-1/applications\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [\n            {\n                \"name\": \"authn-k8s/namespace\",\n                \"value\": \"conjur\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/service-account\",\n                \"value\": \"k8s-secrets-provider-account\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/authentication-container-name\",\n                \"value\": \"k8s-secrets-provider\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"restricted_to\": []\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:56.773+00:00\",\n        \"id\": \"cyberark:host:cd/kubernetes/dev-team-1/applications/k8s-secrets-app2\",\n        \"owner\": \"cyberark:policy:cd/kubernetes/dev-team-1/applications\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [\n            {\n                \"name\": \"authn-k8s/namespace\",\n                \"value\": \"conjur\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/service-account\",\n                \"value\": \"k8s-secrets-provider-account\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/authentication-container-name\",\n                \"value\": \"k8s-secrets-provider-namespace\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"restricted_to\": []\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:56.773+00:00\",\n        \"id\": \"cyberark:host:cd/kubernetes/dev-team-1/applications/secretless-app1\",\n        \"owner\": \"cyberark:policy:cd/kubernetes/dev-team-1/applications\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [\n            {\n                \"name\": \"authn-k8s/namespace\",\n                \"value\": \"conjur\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/service-account\",\n                \"value\": \"secretless-account\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/authentication-container-name\",\n                \"value\": \"secretless\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"restricted_to\": []\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:56.773+00:00\",\n        \"id\": \"cyberark:host:cd/kubernetes/dev-team-1/applications/push-to-file-app1\",\n        \"owner\": \"cyberark:policy:cd/kubernetes/dev-team-1/applications\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [\n            {\n                \"name\": \"authn-k8s/namespace\",\n                \"value\": \"conjur\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/service-account\",\n                \"value\": \"k8s-secrets-provider-push-to-file-account\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/authentication-container-name\",\n                \"value\": \"push-to-file\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"restricted_to\": []\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:57.089+00:00\",\n        \"id\": \"cyberark:host:cd/kubernetes/dev-team-2/applications/api-app1\",\n        \"owner\": \"cyberark:policy:cd/kubernetes/dev-team-2/applications\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [\n            {\n                \"name\": \"authn-k8s/namespace\",\n                \"value\": \"conjur\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/deployment\",\n                \"value\": \"api-app1\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/authentication-container-name\",\n                \"value\": \"authenticator\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"restricted_to\": []\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:57.089+00:00\",\n        \"id\": \"cyberark:host:cd/kubernetes/dev-team-2/applications/k8s-secrets-app1\",\n        \"owner\": \"cyberark:policy:cd/kubernetes/dev-team-2/applications\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [\n            {\n                \"name\": \"authn-k8s/namespace\",\n                \"value\": \"conjur\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/service-account\",\n                \"value\": \"k8s-secrets-provider-account\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/authentication-container-name\",\n                \"value\": \"k8s-secrets-provider\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"restricted_to\": []\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:57.089+00:00\",\n        \"id\": \"cyberark:host:cd/kubernetes/dev-team-2/applications/k8s-secrets-app2\",\n        \"owner\": \"cyberark:policy:cd/kubernetes/dev-team-2/applications\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [\n            {\n                \"name\": \"authn-k8s/namespace\",\n                \"value\": \"conjur\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/service-account\",\n                \"value\": \"k8s-secrets-provider-account\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/authentication-container-name\",\n                \"value\": \"k8s-secrets-provider-namespace\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"restricted_to\": []\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:57.089+00:00\",\n        \"id\": \"cyberark:host:cd/kubernetes/dev-team-2/applications/secretless-app1\",\n        \"owner\": \"cyberark:policy:cd/kubernetes/dev-team-2/applications\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [\n            {\n                \"name\": \"authn-k8s/namespace\",\n                \"value\": \"conjur\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/service-account\",\n                \"value\": \"secretless-account\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/authentication-container-name\",\n                \"value\": \"secretless\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"restricted_to\": []\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:57.089+00:00\",\n        \"id\": \"cyberark:host:cd/kubernetes/dev-team-2/applications/push-to-file-app1\",\n        \"owner\": \"cyberark:policy:cd/kubernetes/dev-team-2/applications\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [\n            {\n                \"name\": \"authn-k8s/namespace\",\n                \"value\": \"conjur\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/service-account\",\n                \"value\": \"k8s-secrets-provider-push-to-file-account\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-k8s/authentication-container-name\",\n                \"value\": \"push-to-file\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"restricted_to\": []\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:57.482+00:00\",\n        \"id\": \"cyberark:host:cd/kubernetes/dev-team-3/applications/system:serviceaccount:conjur:jwt-app-account\",\n        \"owner\": \"cyberark:policy:cd/kubernetes/dev-team-3/applications\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [\n            {\n                \"name\": \"authn-jwt/k8s-cluster1/kubernetes.io/namespace\",\n                \"value\": \"conjur\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-jwt/k8s-cluster1/kubernetes.io/serviceaccount/name\",\n                \"value\": \"jwt-app-account\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"restricted_to\": []\n    },\n    {\n        \"created_at\": \"2022-05-20T20:19:56.488+00:00\",\n        \"id\": \"cyberark:host:cd/kubernetes/k8s-follower-auto-configuration/jwt-authn-k8s-cluster1/system:serviceaccount:conjur:conjur-cluster\",\n        \"owner\": \"cyberark:policy:cd/kubernetes/k8s-follower-auto-configuration/jwt-authn-k8s-cluster1\",\n        \"policy\": \"cyberark:policy:root\",\n        \"permissions\": [],\n        \"annotations\": [\n            {\n                \"name\": \"authn-jwt/k8s-cluster1/kubernetes.io/namespace\",\n                \"value\": \"conjur\",\n                \"policy\": \"cyberark:policy:root\"\n            },\n            {\n                \"name\": \"authn-jwt/k8s-cluster1/kubernetes.io/service-account\",\n                \"value\": \"conjur-cluster\",\n                \"policy\": \"cyberark:policy:root\"\n            }\n        ],\n        \"restricted_to\": []\n    }\n]"
								}
							]
						},
						{
							"name": "List Groups",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"value": "Token token=\"{{conjurEnterpriseToken}}\"",
										"type": "text",
										"key": "Authorization"
									}
								],
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/resources/{{conjurEnterpriseAccount}}?kind=group",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"resources",
										"{{conjurEnterpriseAccount}}"
									],
									"query": [
										{
											"key": "kind",
											"value": "group"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 OK - No Groups",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"type": "text",
												"value": "Token token=\"{{dapToken}}\"",
												"key": "Authorization",
												"disabled": true
											}
										],
										"url": {
											"raw": ""
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Tue, 18 Feb 2020 01:51:22 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "ETag",
											"value": "W/\"d751713988987e9331980363e24189ce\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "fdb29fc3-759b-4c7e-a3b8-f3bb72aaac54"
										},
										{
											"key": "X-Runtime",
											"value": "0.004353"
										}
									],
									"cookie": [],
									"body": "[]"
								}
							]
						}
					]
				},
				{
					"name": "Set Information",
					"item": [
						{
							"name": "Set Variable Value",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token token=\"{{conjurEnterpriseToken}}\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "NewSecret"
								},
								"url": {
									"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/{{conjurEnterpriseSecretID}}",
									"host": [
										"{{conjurEnterpriseHostname}}"
									],
									"path": [
										"secrets",
										"{{conjurEnterpriseAccount}}",
										"variable",
										"{{conjurEnterpriseSecretID}}"
									]
								}
							},
							"response": [
								{
									"name": "201 CREATED",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Token token=\"{{conjurEnterpriseToken}}\"",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "NewSecret"
										},
										"url": {
											"raw": "{{conjurEnterpriseHostname}}/secrets/{{conjurEnterpriseAccount}}/variable/{{conjurSecretID}}",
											"host": [
												"{{conjurEnterpriseHostname}}"
											],
											"path": [
												"secrets",
												"{{conjurEnterpriseAccount}}",
												"variable",
												"{{conjurSecretID}}"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "Date",
											"value": "Thu, 19 May 2022 16:06:53 GMT"
										},
										{
											"key": "Content-Type",
											"value": "text/html"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache"
										},
										{
											"key": "X-Request-Id",
											"value": "5c081004-9f66-44c7-a047-25a036d9757a"
										},
										{
											"key": "X-Runtime",
											"value": "0.013191"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"let url = pm.environment.get(\"conjurEnterpriseHostname\");",
							"let account = pm.environment.get(\"conjurEnterpriseAccount\");",
							"let userName = pm.environment.get(\"conjurEnterpriseUsername\")",
							"",
							"let keys = pm.environment.get(\"conjurEnterpriseUsername\") + \":\" + pm.environment.get(\"conjurEnterprisePassword\");",
							"let encodedKeys = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));",
							"",
							"let login = {",
							"  url: url + \"/authn/\" + account + \"/login\",",
							"  method: 'GET',",
							"  header: {",
							"    'Authorization' : 'Basic' + ' ' + encodedKeys,",
							"  }",
							"}",
							"",
							"pm.sendRequest(login, function (err, res) {",
							"  pm.environment.set(\"conjurEnterpriseAPIKey\",res.text())",
							"}",
							")",
							"",
							"let authen = {",
							"  url: url + \"/authn/\" + account + \"/\" + userName + \"/authenticate\",",
							"  method: 'POST',",
							"  header: {",
							"    'Accept-Encoding' : 'base64',",
							"    'Content-Type' : 'application/json'",
							"  },",
							"  body: {",
							"      mode: 'raw',",
							"      raw: pm.environment.get(\"conjurEnterpriseAPIKey\")",
							"  }",
							"}",
							"",
							"pm.sendRequest(authen, function (err, res) {",
							"  pm.environment.set(\"conjurEnterpriseToken\",res.text())",
							"}",
							")"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}